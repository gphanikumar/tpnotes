%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: stokesfig.dvi
%%CreationDate: Thu Feb 15 16:30:43 2018
%%BoundingBox: 56 560 384 736
%%DocumentFonts: CMMI7 CMSY5
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E stokesfig.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.02.15:1630
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /landplus90 true store
 
@fedspecial end
%%BeginFont: CMSY5
%!PS-AdobeFont-1.0: CMSY5 003.002
%%Title: CMSY5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMSY5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMSY5 known{/CMSY5 findfont dup/UniqueID known{dup
/UniqueID get 5096646 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY5 def
/FontBBox {21 -944 1448 791 }readonly def
/UniqueID 5096646 def
/PaintType 0 def
/FontInfo 9 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY5.) readonly def
 /FullName (CMSY5) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle -14.04 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /minus put
dup 1 /periodcentered put
dup 2 /multiply put
dup 3 /asteriskmath put
dup 4 /divide put
dup 5 /diamondmath put
dup 6 /plusminus put
dup 7 /minusplus put
dup 8 /circleplus put
dup 9 /circleminus put
dup 10 /circlemultiply put
dup 11 /circledivide put
dup 12 /circledot put
dup 13 /circlecopyrt put
dup 14 /openbullet put
dup 15 /bullet put
dup 16 /equivasymptotic put
dup 17 /equivalence put
dup 18 /reflexsubset put
dup 19 /reflexsuperset put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 22 /precedesequal put
dup 23 /followsequal put
dup 24 /similar put
dup 25 /approxequal put
dup 26 /propersubset put
dup 27 /propersuperset put
dup 28 /lessmuch put
dup 29 /greatermuch put
dup 30 /precedes put
dup 31 /follows put
dup 32 /arrowleft put
dup 33 /arrowright put
dup 34 /arrowup put
dup 35 /arrowdown put
dup 36 /arrowboth put
dup 37 /arrownortheast put
dup 38 /arrowsoutheast put
dup 39 /similarequal put
dup 40 /arrowdblleft put
dup 41 /arrowdblright put
dup 42 /arrowdblup put
dup 43 /arrowdbldown put
dup 44 /arrowdblboth put
dup 45 /arrownorthwest put
dup 46 /arrowsouthwest put
dup 47 /proportional put
dup 48 /prime put
dup 49 /infinity put
dup 50 /element put
dup 51 /owner put
dup 52 /triangle put
dup 53 /triangleinv put
dup 54 /negationslash put
dup 55 /mapsto put
dup 56 /universal put
dup 57 /existential put
dup 58 /logicalnot put
dup 59 /emptyset put
dup 60 /Rfractur put
dup 61 /Ifractur put
dup 62 /latticetop put
dup 63 /perpendicular put
dup 64 /aleph put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /union put
dup 92 /intersection put
dup 93 /unionmulti put
dup 94 /logicaland put
dup 95 /logicalor put
dup 96 /turnstileleft put
dup 97 /turnstileright put
dup 98 /floorleft put
dup 99 /floorright put
dup 100 /ceilingleft put
dup 101 /ceilingright put
dup 102 /braceleft put
dup 103 /braceright put
dup 104 /angbracketleft put
dup 105 /angbracketright put
dup 106 /bar put
dup 107 /bardbl put
dup 108 /arrowbothv put
dup 109 /arrowdblbothv put
dup 110 /backslash put
dup 111 /wreathproduct put
dup 112 /radical put
dup 113 /coproduct put
dup 114 /nabla put
dup 115 /integral put
dup 116 /unionsq put
dup 117 /intersectionsq put
dup 118 /subsetsqequal put
dup 119 /supersetsqequal put
dup 120 /section put
dup 121 /dagger put
dup 122 /daggerdbl put
dup 123 /paragraph put
dup 124 /club put
dup 125 /diamond put
dup 126 /heart put
dup 127 /spade put
dup 128 /arrowleft put
dup 160 /space put
dup 161 /minus put
dup 162 /periodcentered put
dup 163 /multiply put
dup 164 /asteriskmath put
dup 165 /divide put
dup 166 /diamondmath put
dup 167 /plusminus put
dup 168 /minusplus put
dup 169 /circleplus put
dup 170 /circleminus put
dup 173 /circlemultiply put
dup 174 /circledivide put
dup 175 /circledot put
dup 176 /circlecopyrt put
dup 177 /openbullet put
dup 178 /bullet put
dup 179 /equivasymptotic put
dup 180 /equivalence put
dup 181 /reflexsubset put
dup 182 /reflexsuperset put
dup 183 /lessequal put
dup 184 /greaterequal put
dup 185 /precedesequal put
dup 186 /followsequal put
dup 187 /similar put
dup 188 /approxequal put
dup 189 /propersubset put
dup 190 /propersuperset put
dup 191 /lessmuch put
dup 192 /greatermuch put
dup 193 /precedes put
dup 194 /follows put
dup 195 /arrowleft put
dup 196 /spade put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A07B684C079A47
D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81DE96489F740045C5E342F02D
A1C9F9F3C167651E646F1A67CF379789E311EF91511D0F605B045B279357D6FC8537C233E7AE
E6A4FDBE73E75A39EB206D20A6F61021961B748D419EBEEB028B592124E174CA595C108E1272
5B9875544955CFFD028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36
AD861319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D77D0DAC26A1FA54D2471EE9
BE33D2E87853491D634A3F05B7672519E09291AC2D08D95BFB80CABCFA89042E94FED8DC9929
ECEFAF741D273687B2127F5B80ED7D16F146894841D51A80D8085E27114AC35CD5E578760D89
82CF4D8587FD3385FE50E21A253A37E2AB628DF3500FD2C21BCCBC8C0B6AD3AE21DE63AE6586
DB06B3FB1966625EBF5290FEBA873F819AB480FF994D80C01DE1E2F28C665E74FACFF98B2972
CCCAD27996F2EFF1113CDA922985E095249765989A4C6A92A76340DCFA07AFF34AC5E17709B7
39A72D0D1EAE1A6164F3AA0DF1651EFED335B68C8465E1A61025235D4A5AC3661B9C0456C376
43C7881047B1A1E3FFF64747661BB6E0DC2660ABD5936635C34296B2EB469E597972CA96A95E
6202051003E809C818A346C264491156602FB5857EAD6783E97BE12BCFD9489F67B9468877BD
1413784E56DC96F1F78103A010AC746E6128058BBA61D9244319F9DC33CF439B1056444CFD8A
181CAE42D32392016CB47FED1F658CDB85CAAE4750D426AC33B8DC221E8F688116FC8A6537DC
543F23148D58F8A7FF8A5E0D1E31EFFABC9C42AA33F0039A7468E010633CD795A7159D96CAB4
B5E8ABA075E0655A05B0622AE8FFF00D59F3FBCE7B7E543691901BAD6F894BA38167C186BC95
CB1F18F7C2685D2E83B202CFDF26AE98B52F41D3A9B5C9C90654EA2A356CB95CE28DC540C7DA
ACB0A7491DAC4FE1FA95D95FFB5E8E0554E167E49CE8E225FFAD19B7E8C5C0A6A4708CF7269F
6F3F444CB98DD3F7C59E7A15B259390BFF5870B599F6E87885E5ACDE7775976E40F485673DA5
63F81223EC285D15B640A516B1560F5E3C3D0E9CE40EDF7510E9788178D764F8E7250047DE79
CAC6C1628158BA4CCF8EA6F918BDC4143D2EC76C61D76F5EF3625F69967075BF59D8B62532B5
6F51EE374B7BBD115F3D36E9496246BB82901BC5CBE79B51FA301CF4DEC10C248F396A1A8240
13329AECD316A1730D00123AEA43C756A23824EA24E5C5A6BC8B03161D31339ED1C525008B1A
A8D8A1A9FEDFC79E06559CFF13A4C8B86044E1DC79913FA64A9B6BB07A00752C7F0BCD0A6CF7
3BC7A35FB1407883F78E6CCC8A285BDAA13B2FD41210904FA4650A8C4B7C4B4C8B3F06235DC6
B5DE5E45F7408CB3964466A2992401E9CFEFB57F901955300E9992736F6D334505F271BBB4F4
EA31CB8AD36C69955A88925F33965A4A6421AA1432F661A0AAC5900DCFE2DBA86631A7EBA616
9CB786E373EBE86CAED6F109A12C745E46AFAD35EB6983D34884F7D67C53C83D418D95DEE443
CFB4A5754B205E2BDB2B550CE5EC623C79599ADB345A14152E70EFBFDC0A1C950BA0FA3ADD3E
CA8BA366D4403C0F1AA4B815C97DD24C077356DB8D9B464A1E3BA15052B88EF8B75274DFEFE5
1724247C918349FD01DAE2F167A0FDE81E7F42C1451320A38F2F95BF0F127D659F4CF8DC8676
5B534F6AB00B31678D1340856E23F14DF7C418191130E19BAEC6A477DEF96A173B32494B73AF
5DC1AB23587A00A2A73E223C6E025D2C7DF9031DF00A46497F822FCA0AE5403075CC0E092C3B
E30474BC186E1FE68A0D370D0C0A4EAD8A2118B542E9A517172479791D9FB1553A9903E4358F
82CC93BD7B49D4EF6BA2BEB6CE9EB40497DCD6B57700B108460E5B89FAA92BC9477D6C940D92
843C37879EEB6DC35720727A364E5DBD6077598CE6A311D9427025838E6AD80868DD936F0337
06EC68751BF90F2886E293BF09056BF0D7EDDAD3E2F61B6B1CDF16891B93C92FBADB764015B2
D9CE8C271B8FA48A07203D935E22303F40A44201D8A67EB92883D98A9F37608DF152B02DCA88
C0DE392B7C9F2E814C731DAEF8BECB71B501D32B7AFC4E2B7EBE32064C5CC41D16B6ECA3A54F
024A55DA458E9DB70F4C3D8DAF43F4407389BEAEBDB5638D39FCF0BC9A7997E2E174F26E3B05
A75EEA2E78698AEB003E58E617EF88EF1BED74DDC2A616F30A319C246FA0259A92692B8D773D
2FC391AF7688C44E82A9E249849D14D4780D50C50DDCCA107A0BC87245A1B7282F07AABE14AE
4D77825DC9D2E84AEE48EDABD7B7B30025AEB7A740DFDD952771ADD344A42CD6F28E709AC3BA
E22C4D8C838076189C642A43273ABA990E071F15E21C7DEF1B6DFD611B93AC16328BC4C64C73
5534977702037B5642AF32924D14DEF6B4ABF673BE060BA3A617DC8D9A72594F3CDB5C98D393
57EBF97889F9FE3CB4E95AE983990D6E95ADBC37DAB014F83012B037C28F3ED5A6381E44BDBE
60F63274F30F5555920BFC80F97257861CDA2050E07186F2C99BE1AE1F33BE510BF10E7EAAA9
BEDC7E55C3C49AD730C8EBF5947FB114F949E8F274415F9D40D4DE31AD59917308A90278330B
27B9F2CC03FAB1A7189E0D2524E568C1F8BDAAE4D6ED69A80B546371626F42911B2F33423F20
4476B24DF9CC7016FDB132DCA05B035AA70B1FAC9B3535434D6D349C403DA34E709F07385C06
0424782BE270BB3164CE76E640BE0CE56DE4D062F152811E6C51A7CD7A0E08899AC34CD826BC
5A85FBCD54375050548152CBBD83804ABBE509C89421FADB7CB31BD5BEE082A617520A9D3ACB
1B6364DE52234FFF4CADDAA46C3D95B63F6F81C952E8C5A774045316DB3E17E7AD7C59EC6BF1
9A25551E4DC25BDCF0C0307C8DBAB21FA47FC93D228D4630BEB8B22AF0DB96A8FBB90593DADD
5F00B36F5827E994EE2F9544AC5389C400515B7331A8562865A86792E55367FD3FEF27215E96
F73696B89B73EF925A43F061D1A13A7DCFF5CB04A0D039B36BF3F7D031C84EB449C0399F5536
D831A42B91DF4F80D8D20FA0693319C34BAFAA78BDA754E585FEC1B4A8D4C84E4A92FF465B87
84E93C2F9608CCC9529010527DF0666ED23DA4262D95526D37146C2CF9FA4189C0A57EEB875E
1DCDB770F09C9CB7D7AF9EF20BD673803E7A5FC9EF8913ACCE46DEAC6EF9D33C1E3BF60D8379
790F38EA41D21808F8CDBA948544AB0B7F708632439DF4FFE842FCEACCBF1421C194D54170FA
B136F8F073F7828FE54BD2A7CC4DAF4B18E7FEF6BD206269125D5F2AD586DB3ECD8545DCA6FB
C47382A8AF504028CF2B0ED670CF2D71AFBAA3228816E88CCE671E558FCDE16A597FADCDAA25
8D119D6E93DDE7147438AA0DFC38461E3197E82E28A7547ABA625D1C50DCCBCEA30AD4A04BB5
D7E55F349473F8B756102C519EC4EEE5EDFBC4E6EAC56E597206F484ADEEC5D67148E25855AF
675D3B8BB0E7FD8E16C651672BF3A6D82D115641576D605FAF9CD16129B9C09074C8A95E9794
07C4A3BA28309F1096348C1295240E69A8865AB75313549F8BCCAEC1111D4C730AA06F91FB6A
8EB6DEC253C75215C32DBE6CF863ECE04983D2977BCC8F381BF88CE95104289C29CC2D8F2534
9A714E8C8A6E2F28AEF671BCBDBB6547870F68D81E10DC610812A610807724F806DB5EEA70FD
A58F2E14788C072EB6A52D5E329665C90FC2954115482DED67F01C16D2A86E570E80900F5556
081010705161387CDC9A3B663D0B8A0E74321FED533AFE14543B06D0455F85014ED79702BB70
031670EB580D447408743297E6E066A696D4987D08411CCAAE64A85986D726C590034E2924E5
10B54FDAD4CD80079EA7B3622227142BA0B70F2680A0B9AE795327B8DE8B8F218A14933ABAF8
5B65F25E768F018B0603FEE211CD4C22A7CF66B2968C30928335F0D2AA7E3F183F0C951D4877
BE7D71FA6D92776B366A9939B41EA3E4E0D58E368E3C1E31DBA11E4CD84F8C7D205A5E2A88A2
176AACC7C3D03AC41461D896080F3AC92703C2B208559B521DEB92308ACC4DD2829218F04410
FAD9A5E0955A053E81F5EE192F2E536517C8C985B3FA0FEF721F45C1F170A819D96AFC891477
42BF6D6D6C5C60279F7992761CAA8710E9629AF114AAC1ED6E4CDB03DBAC0CC8F0F531CBC0FE
3EFF0C8F3E14E458C329E9D79A421FCA5E874201179DD48E7D6F21F774BAA1B60C7D343DF9D2
5F11C2981438EED122E86D93505031519687963EB9890A583F8AFD41C911FA47924F9F52F4D3
CC683A412348E7446A86F8ED9436AD6F733F9C45D4A8356A4748593A85F26432E9665B8765EB
BC36EBF500226A17E52F1AD5529D3358766D4F520743C94A2E53D0CF0AB629AE5EC20CDFB0D8
97C5148AD3854C6D7686D716BB51BFB130EAD253B22AB8EC5349D8C9900381EF97DA74D5AE3E
12E24A74893486EEFB8D4F5B493CD219C9B29CF04D961E606EBE35F9D3C6B41C38A1EB6758FE
01BA03893F5B3C651A4E79141C37AFC4CE55AD2E36EF313EEA3BA6A1FC7778CCD30819D4FAF0
EB4AF40FF4DBDE67440738D740487705BA3A5D8FE21C193C66D9CB936854ACA0F02135CF2BB1
4ADE6B35F845B23DE01C04F3692BE83D03398C836A26D2A0B296D7CE801582A531BD3280CFD3
874F775B5F957D9CDA812A2E9A73C3B8FEF42DF0DEEF692AE7FC6709146C422E534DE0AFA491
084FE464605B1C8C64873B1B97764466F623BCA71879AA584FB6DF566247A4B61353FDD91B3C
8A7DA83144E572D2B7A5D3BA200F544C744C880E36D3C181B2C0B4815E8EDA295AB0FB7ABB50
8F1A7DF9C5E02FA6E90CACD51D6BF3FBD800DF1E4C1CC306D93C51BF48CF2071AE874AA37373
9AF42F2FE7AA822D9CE1D70E788A771D94DDAF6DCE394E2E5C30D5BE9F874C7BF1C5F88302EF
4CE27767C993EB0411961E9069046AD7BE3905FBAEEADC30BE14F4486D45A55CF52D941E6EAA
0CABF927AC9E529788835A5B384D9836A10CDF4CF2D27E724275EB136DD070CE67BDE07609F1
4AA63AAA2A0F6B245C83A01DB9675B67062345FC634435BC70041ABDE28044746842674AFD09
B3FDAD003F5CF75BBC27C37CDD48391E96441CE8661A1FD81F5D37999E5B887BEAA754A9B863
F39391CCB5F0F4FF2F0BDCC06416458BC5D37EFD7D10997A0A00BEF78B21B1B4461DDBDDD7D6
80700AD479CFFA5B8AF41A162B7B9A405CD264ACB7945E73A0AC083875847A35D8927CB10EA0
DA4B43266322DAB3E3717EE82F40027873A085587A00B8ABCD80EA98667F6625405863C2B0EE
4FC4E033A0912DB43E17A28EB9986B15359A96238E0129DC11CDE0797FE3CE276FAA0E9AB175
389501C24E5070774466FBF426BFAFF7191BAAE4CAE0FF7019C1E9272B6AD8D45A46F5638751
71C36AB16BDAD2064D4F32A7C8575859286D41FA2FB7F85CA46952DA021770714639B17B2F63
F69CD718F38348A41313DFE1E1544CE6127DCF802CDF5E5B4834868FE38971A9EB0849EE6905
6FC55D51F5E35DA65D6131F4A9628C726B13E57A06D1FDD2051D81AABF4E9BF6671D2D071616
EB641261614E9C65D1F0D9D7ED976AB70DA68333B28B1E93C50F0F35D170E2DBD91818A3A826
96C9CC282DC41BC74A2015DAAE7CE03F868B2A712441B420DF315179964B8CD43265814FF7AE
3CFF8C55561F26B6C2C072793B8F007A3702FFD7342BB97E2533FDD5D4533DDA3A25BCAC1268
E86B5644B85E863030B118EF6B793EA3971AC3197F8BC95F0BE783C16288C2F0312005195AEB
55A7F3913ADBD20762B70B6929B9EC9F3986686D4DF6319B365E15F1A972233B2307EF2D0901
CEE300C6FD6B305970A148DE514E3A412C0EC84B8FFBBB660C09C26EBFCC3E8B9DF7B52AE9FD
4C18C0380AB954331E9AABF4D501EFABF23E1A0054D36CFE5B4A6EBD08DDDFE0606097D0F7B2
D04BC09B4FEC79FA7E07643045A666CACE9D6B8828E3F96C3906FFE27A89268B0B6AE94EDFE7
D4FC77113F3BD528E77BF35CAF94DF7BC00FD891EFFF62C842F2E9D8DE7E717557AEDEF813BA
5DF62FAD35B7C03BD2F167F11F991FA8A4AAA08CA50A6D283DA871BC491F2AF459A0BE14F90D
4E4E0267EE441AF194E0D5637DD20722A93064DAE0F863BB397FD447134B08F8934BAE07B244
E4036D183573B04CA69DA809381CF135F738D1AB3B78FE9EB92BACFF3668068CBE77AFCE1782
864D25BF4C3A77BA5ED372A54B63822403CA32C6FCB8AC0987E848EF91F02A7C336CA8E3F669
C888F6582801087DF6BF2323AE6EB4B3E2D75549A0320E0BBA22AFA649226305BA94ED8B5F97
8B697F81FCFDCFC781BDE71502F775BECCEF4A9C66CA0F6C765B31F0FD259921AD18BBC29539
45DEF16DDF0A4629D2240DB86763F4FF09A6D6987F74CABA4ADF57D31A3A33D6853179481EF1
53B84404B975DAEE1FB5E957933A9A67B043B0C03E55E04140D872D9FCE0D3899EF8723DA5F8
44C3D5706A2C93E0CC0494339816F86014484A6E6E8AE842C849D7942B788014DD018DCB3288
B29F48E5AF97D892DA95A426787C1B635A1DE1233808D50B2627C61182F06ED364950FDD7BE6
6A76BFFAC325FF9FAD5D167B5A9C90AB49EF740E4D16F0F96F8959FDF5CD1CF1FB063C8F05E1
571B672E9FD835E5C941623A0D6B905E83CA1366F768A8FC06F257461A6A2FFD9206874249C0
2707AF54D38D02B0E7DA4A31D173F42666E41586012A9761AA2A68E5F6A5F334D7DF1FFD5BFC
99198AEBF7FF975B4170FFEC81E8B3C2C068E8E78F6B2E9A3BA9C9CD8AC79122B82F9D975580
68BEFFA87A48956602471023F6FD5B62BE32DE0AA59908716822AA6DEB22968A130B2A57FEA6
F548A4E6621C1882FB269415104F3320C7B12649FA7C9CE061E20B6F985FB376CF8A5369BECF
BCA082C6860E4EB6F393A2AB61E6C8C6F48471B0DB27396CDBCEC1F15E61F6724E237C50E30E
8AE3773464CB40BF61BB8047F30E3CDF18F148ADCC88EBA3A9CED5D3458480E55D69E24B0AC6
3895E027634BF66C857150F65A49652CD156E73BA8BF1F0175E31F6996952AB1A7AB762B4582
0693CFF4ED80070551004D144AFDC910E35E750991E848CF3E25C49474C9FC712ECE17F3362F
558D75E46B1125320F3C812230805F55799548DA618B04D5B360F5F1E13893821744F6A75699
CBC25BA26D6B7F391721073BC7F4DAF9C64DAE15104733B552B85C657B536702E7B6D3EEF0C6
92DF9AD4A2546BBDD0EE3876BFC1F64D6419BD36BC0F770B30BD3A74C1FE292446A40F1CD965
44BF3F5EE57DF383523FF3A8E80CACFCF5DA7C5F32A0E42B070D2F53A84CA36BF42176A1D489
252EBE1EC8CD780319278D978DC32ED9876CE3A8A20569EA43C1C80F51C39617F4EFC2635F75
F76D0A0F45A2E05F447589E1E3DA58125F7C0FA3A21467664182DB4B6E286951E08F238A0746
B48973B178D49704755192EC3C7C21E41AE3D1AB7A79DDD015B271A5DC78FF3A23402AFE9B14
9BBABACA240F39DF24C5EA0D003B029C18DAA5093DE4BFBA9429FBB016DAB024A4ACE212709A
1531EBA5659706709C4188374274D87006D65ABE33FD0D53298B5EA999393826DB42B3354AC8
FBD5D2DF3A8999524B628D49941598E28CF764F1165C575772F6B02B8A9919F1ECE260044FEB
B86238F9F5C6E71309EC1F2799675F8EC284FA5D849B3B36DC5EB42F5D132EDA6674786922D6
EE27651FAF15667B394D56D3D131A8E596AE3034F12CB24E0692E10B19DE191D93B731C437C7
46B401977C825FAFF75CC9533DA8AEE8B1E95EEF067738840C2EEAE478EADB43B35E6A979099
D5B0185FE61F8A98033B9308A715C5DFA6C06130535DFD196AC2715A4D6C7F3565B4A26C6C28
4566EEFD6A7532FAA53F486220611A604F7E9943389C201C3829DB22E031FD366C88FCA3885B
C505BB0A5E9BF3B2DA778F7B38E900A047B3E227E7C40F76B948F478C09C0C17AC6B6DD86F6C
AA313DABB7CE3A054BB979C6D0767B41FA5ED0E97D1448FB3BFD21F77AFC673CD5058C3BD026
3C6FD50E005B6FCE3025B3EFDBEF3969D92A94088CE19FB9B08B8FCA2E283E6E547DFFAFA5F6
7337D23D1561064DA0D11EE511B87650E9FCB6E7D5BFEC711DBE80BA5F945E05D1A6D91640E9
56B9A042CBD9DE2B199BF68F4F1ABCCCAB72085EA0271647C0F14C94F2C72E10C5C5FFB1E3D2
9AB1228A867A6E707967A121C952D578F02C8705F8E929F2B0F8AD2FDFA0AFBD1FDEF3943ACB
1A35E9C925F0101F9B1D1C08F493BAC79598B445C1BCAD0ACB9847AE0E64C25184AAD4E80B65
440894D564D4A15072E61E39663DCB4CC4580059DBDF9D9F47E45D5D11DE56F7C43638EBBDD6
97C394F6F3B8BFDCCCE85A9A50B153195536AE96130F1DA43C69FEF3A13CFB62E9E29FC80A0F
96B8D82075F6C55C6966C32556F0F5249EBE0F49FA1E0A7F252FCB0FDF6342ACCE18F7B182FB
D0D05B90326C6E990F66578282BD29C76A0148ABFFE3E31D8F3B4A62B95A20BF1FAA7BF2F62F
8F615DBE19ECD7851035C968C93E0BC90695413FDE0883E9F16F397E8B2F8A84503FC8612389
C820C306D8B8CE5A0DB9E6767A3C3EE11C17CCB073646FAC9E85351608A3C6A881685EAC21C8
82A1C19663A85959A56283C224711476A879CE94608E68021A558B1B06A1B8A026B3CABB0CC3
7F5A95DC79C2C145668F9232E2BA655D6B1B75B45E7539EC19AEC86703A60AA724B8B14A65C0
323B7BB73AF9BB0854BAF9F9B0297B412AAE6EAF31D7E3248C334260FFC0AD445193BA825484
546D1E0321559F67C0C7C2CAE148CDBF18A3DF99325DB4BF4183752162BEF63E9B050D47B6B1
34260078247E50192A1D183F91D837DAC9DB9F165DF39E6422F6CDB99707F74C3953243CDD14
6E51DC6E8F60A158B2C6E7B7C11EDA80F180DA6C5CC0071B0F23D7332F3BEB784189B593D2B3
4864F53D3030884208837F3EE4357A42157527786FFC91029B34E09BAA559EBD564CB47A642E
2A8057D9EDDB1F8281DFD59BC49DC21C82282A213002B7390320C3445C8A567B56523D6C8F9B
9392F209194F58D24072BA6D3BF2401C2F5420F9106289CB906EF1099DA1BF5D635EA6872F16
A2DEC84AAFBD9260347C79C5CFB77A70ADE64C312FB1920CC46F888E2173163A8B2134134C53
B75E854513D09693F4FEE33C5D22149FDEB344F0E88043ABEBEF46AE9B0D66304F5522020399
6B45488E63C9A036185BD6F40D6C940AD95CBD2AC346D73A016DECA2B50EA201C01E77A0C76B
FE40B21594056026C8928FA563969AFA3EF67E6654B092339C70F96241E324DBE4DFB4E61679
573A17B45E2DE702454304E301DD501B215E0C20709B2C25857BDC5D13E73745229057FAFF90
1FE04D631921DB791A3E9102EDD93794DA528364449839BA9AECDF403BCD3BC89209B61C5020
D0C2AFDD2ECD702458D23EA87899D83EB2C4E0B58A50A5F0DBE2B76ED84BE6CD51111FEE7A9F
AB324C8936A41828AD9279DD4BF8B3A86043F860D5D548B19AF44DEC939618F42940D936614E
51177C601226CBACB89A37EC903C8E9D2C04E5FEB675CC4C2FB60274AD0F3B07C14429DF3E9F
84AC32FA55A458E441B9439F9CBB167794F15A883EF1EEE37A9B37F340E82990C9B501C5A0E5
53FAE26C9EA8BDB5F84578BE6D8B0403D5FE600A63A9ED3E685CC334CC28073A36DD2C54935A
57FB08AE09CA9E848B04F2190AB10E50E248B152A89A9E744AD73A9B50058FD7C77FB1097C6B
362A004BEEC2FDC99CB4BAF238E0726C2BD0C3949A3B40E0EC6170438745E9A1BB807D685866
0ACD0706B6A0D5A9FDEA6C520EBAAF0658C4EEBCB61C1564CE3239CB9D6CEAD942BA3349B09E
95B4D4AD4D14DA03FEFC3BFCC91C2518024DCB92063B642F3DF7839BCB349CBA258D0C1062DF
9CD2BCC3E1DF40B7A32FFAE1B507B71008649E89C78735148C98BFC203A9D6F60EB9A188D5FF
AD0B4F24490F22A91749B7E634A93D5C462C5618E7774085F67D3EA2BAB561C885F3D7D751E3
EECE3B5E6D9DC5A0C87E296D746AA4E86A0917C4EE056C0BED32786AED6F3919241C87B63591
3BCD1F9E4D9090B7E51BDD56B948CAEFA4CB176473B5BC95FCD43495D26ABB0205BFC33F59AC
92480BD3613A3B66E640ACA94FDEC118A7DC350FD5FB6FB206304C38ADBE7B50430E3800915B
B2C0591483166896E00B2B9CFE3CD2B875703D0465A72B13B25E4EAB88F4D43D72F5ADB686D4
20FE1314957DD0D2E8F867FA5F3E83895ED3591A01AD3C59CE2D84EF19B710F0CE7BCC35E002
EAA48BCD4DE9992E1A6BE060910584AD460018F74F1D32B9C9F8131C92607DB8584F0D00EF3D
F5A162F503136974808031C3438CE8F6FECC7617D6BA28E7C9629D71DFAA09CB5F48358F4BEF
19FBABD4BB4CA2110F7EF831AEEB66B947B113FB5D204AF8631E36D8F8E070100E80B2744C52
E03AF04BB94CC8DCBCF1472BCA0B4964019170AAB68DF774FA8A5A9F40E25002CBEFF3067AF5
36C43D0E0AECF6219AE44D9B1A907F1C0B9568CA5C0F1E544309904F812BBB0118ABD2A93BF5
ED74076F822CBDF5F451509DF2F69F45CD78541B71721C1B7C08D0BDE078E3393BAC70909EC3
370D281BAAC1F2310A9FE3881948A059EF5FA22B2962AD0E3A88E39735DB59FBE03745548588
5D7872A3E5AC504892B8158E11C8496044ACC64C1BD93B0356AE2D47CF2434754152207D0B2A
3406BE2CC33AE54FA9AD485BDD3D410AF2EB1486696A7A3DC4DBE0EFBEF4934DC90C4DBD5C96
62022E67CCF4673940A492283239B66E7A0DEF08E7A4BC547907773C378242C735CADDA2F323
67A110AFBB9CC0C05CDFD6A79A608B43CC648C29770B727394CC5C05863F4A02D4FE06B9B64A
F8802972AA2A356928E5458E56DA5D072AFCA452C1D782A58281370440AE6A061C6CE1E5D309
221F1221A2091EEB034F0178F9B42F1A66D88DE1EF92F68B65684D18314661A64332DC830F76
1F9BEC0FD59E52144FE179A050AEBE24455DA8DEA0E5D504B9470FB5A8D3F8B5350A8E9F841C
BD8C30CBED0834199E5166E21830624440CA34BF0A45AD38CC96C41DDF7B635749AC0D234D3A
5C32A6EC20EDA1AAADA36F569A06272C3108F06AA3EB7BC9502AA83271EEDF1C262932E6DAC3
F99D0D0052809156F548FFA94DD56A7530301B72E0A4F3198E65E78BFEEFD5225C1672C9220B
8C96F620F53681267C3CAA2EB784DBF0D07EA67F4CED6E780BE41565C1EE961F3B5DF8594BB4
F086E7D11567168019E07555E1970EA00AC4F7A54EF480E3BF891ACC2393BF2B0487A1638051
030E0C81E08D8315D95C3F4E7B870D24E943FE1F06E8653F02A40CC41D63FB1FA0385629B2E9
841152D5F30A8906F3F079049C51D9F275E2E05CAACE6645FEB5C6BB103CCE8D72E484843D1D
C7FE4AFF96E0BB12684E8C692FEF7662871F8036DD609ED1A6225F775C77B9E93423BBA6E21B
DC1797A554E64ABF5421FDCFCFDB11D9F92EAACC84375F4AB21443E702F3733FFA02773BB862
822A817E0C1AE223774AAAC6A0364CD52E2D163BE6DC923DF784762257A292F676A4A32F016D
0C71BB6AC150338E1A593273A096AEF6C04E3368A800D51CC2D4A8520C7555F4ADCEA3E7C643
96885FCEEA5387F9226F73B23A73D1945A8F4BD2D7853660E2E82BE4203F89634B6EC1597D22
64844C90D97F315BF9A88CD81C3EFBAFC59A7CDFF93C5BC9A6EBB7FC2A7FADA380C75E7BB838
D5AD83A7F3BBAF52FE6967777FF5924E27F9BED0BFC01866F3BCADCF1AC9DF70B8ED8FEE49C6
4E6F9D76DCE25CB6653B770C51760A213307250A201A66E1475347CB4279522F65F24E344C67
8211FD545D63CA72EC438861231E460EEF31FF78C3064D5C95AEC5E5AC36391D5C1F2A284FB1
9D91C921B5A609561B7F4F9994B20799AC50B0B785E80C4A55ECB894097DF1752019238C5A8D
70000E7C70D1DE8AF54F7512FBEBFAA631B2664B72CB98A8A2E2FD1111EA6776137EF9B72C50
21413D44914C997ECAB4A4F7F6AE2DBCC60E84F0FBEBC586BCB872E69AD862F421C1CDA538B0
3A1524583B56D6B16DBAC8ECEE866C4E19C6B8164846EB55EE4A87A44A606A8315DA1712AF5E
7AEB2D6AFA5C474BEA4D1BE62B39B1847D2C12A184DC96C86774AB3233A24D149EAD6E37126E
FB72FF6D87D9F754CAA4F73FCED05C51C4675831BBF5054D581F9BD765FD1D3BCA19D513CF7C
1AB5F70E2A435440A19862E5602E4398EAEDC0684D5367CE26CE80416A97B8F161067E520005
98059DAF33F4FCA70ACC33270DC124693B08AD193C8394F1E2FBCAB95437384248FC7B176100
7F5106FB006B0ABFCA115414EBBA4D18A1F5F90410CE4FAFE57677038D3E07F645ABA4FFE961
961146BC765FA15C00F30781500A41DA9DF62BF126C0065FDCBD8F7D4118C0C0A9699B27CB4C
336310F6F41633ADFF6189CFF3A9793066804EDCA6C91D72AB1E94A0EE4992492981016F4B5D
8EAC839DFFA709308EBF05E05A59C71FC0150E85239A9D3B471688EF3E31E699E28F918247A0
536DF467CD2F1ECC18D266374D163340EDCD392C9F1D29C0516021A341149FDBE7324E8837F0
A5A08AEBBBC73E74E368727BCFE211D51B25974C6839FC9F3928C00A4D388216AFDB3E77F338
79D310C2E50A295722BC6CACED49E074F352A9461237D4A82479C579E997005058150C279D12
6D0069DC8D4C937579A340759CA8B8DBB783ECCF569AA5D2A24621F74F1D1EDEA30849E0D634
76A54CB42948F1F3BB2DB772E58196876415B7BBE22170C745F4AB523D216CF6EA13A94B2927
926C1297172BA460218B67BC6E4A67F31318E7EF05C8F500E552C486A2E239842437D4A90E8C
28D40B1F515446F9987007BC5D61790FE291E8785FB3406D7555F4AFF6BF12249BB4CDF7339E
721D9BAC5A185022FCB009E7E1CA7C4439DA54562A476A1F590B805B3403A0AFD12F0554AAF4
73720F77EF2D741F17A2F59764294D60863B6ACFDA1904DC70BF794F5FF964EC781A7DCFD95F
8449A94C7DDB82F8F5E3210D0F1387CFCE9F34C2968F2B01C73EDC7B4E86E328EA3F8098A4CA
65357883CA950C84EA225D0E18F47EF3C378A1EAF650A659C4B902B9887F225DADE680285EA5
C7131A73F3A25BFF737F45BA70A53C02011A6442652C59FC2497C46D42B922560F20E108E6C7
365798144F47A9841707EE0641E79CEC806428F2DF82B6CB5EDCAE68986A530EAA75D61C48CD
8C2A6E401BD771133062248F9E18C38F6B32C08D78A4E41A9AADC86BA44A9FADA17D3D124640
642F76ABEFED3BAEB7A8B366FD76FF7CFA191767F6B7F11B439BB5EE32CCB43E63A3CCF26CF6
F778F0BFD7C54447F48D0744C23FA2DD2AE8BAD6F6A32E6F3BA2D3A7C748664D0D0FB30F0931
962D52D87FD84A582D21980C7097E69C46CCB2D8ABA83315CC71BB12863AB91049CF61E8FB5E
1D6E36682937A94F890A4324A470607835A3AD1ED657BB2BECDDB3817D86C6E2225F0F0D23E6
EF7E9DCA476243AD827E532E7530BBAEDD7C8BA676F70A422A7651D5B42107B8F10F9D7341B3
4F87D44F8A06C4AF571E9D9438320A71D222A3827EB93C23924FA1E91EAEA16342853B8D9E31
4E937470E4F40F1F4FB4A911D293421AB1A1B6309A53B076C0EB6A086F1FDDCE3CB63E55734B
673EAF99DA3A4040D2325371403768B451904AF18C03AAF7FE17B98B4E674834C9D9B0EB83BC
1E5F312781020945BD791C0C0BC797EEF442795C3EF9538375B8E2FDE4FC1590E7D5AFBCD646
8F2A176FED5DF278526BB974100BC8F5A659C7C1D3156E7C1B7E68F97084F10864CE97F33446
9683C88397308959C1323D42FE417455BE9A926C7A8F083E2C4112EE64B3DF7D86E648AC8061
CC0F8D251D4B33242EE413EBAD4B1A55EFDFF904F5709E18E3E24B5925749B5AB165A13E01CF
CA4D7769A45BAD4B5F7C29C799B21CC9C5AECA0A7EDD9132A315666A18DED9542AE33FCD9AB5
2CC7FC02253F4D49D8E5BC32AD199056964FB780F535ADF33F8AAC5194E06EF9445127376FE2
5EDAD1FCCD7534D4B29C7FBBA33A38FD1DE12A2BA70228A68FC305E55948EB0C39636991BA18
0341606C8EE5B5AA19B0EED76E820AE783D347A35A914FC053CB9730C595C1E3C16B91EE80FC
B85093E8160D5A6B01128FC599DFAEAA48DBC32BD8B96297DAD46EB3AE461EDB7CC758A216A7
D5A2473FD30049D7E8DD26131823706175AD201FFCAA449F141769AB96DCF50B16BC43DDA61D
EF51C6030A0FAE31E830C8ABD5D475C000D77408A4BA2B96DFB58872E497C843BB4321BA45F4
DB6B12C52CE7E1B5F437E6173311EF45E6EF1F6C38609F79D1B545C900B0EABD265AA73D5203
F159C41C006ECBBE4011D86A71EB31B96EA24AE8496FB07923B47A2195287B901616C926D616
D11FD3CC7DB73799840445E97100645FBFA450A8AD030B6A69A686791AA5CFA091EDCE04D6EF
C59FBB4BF2433E7A4E5C87B37019F753FF9C5850EECB8FC918563E8D45F67984D283BDA1A583
45044E51F92BAAFD7DDA95D60A5E22F2B9D3189C076C0EBAF10B7034053B88471B6247D6146E
36361474DCE253703EAF9CB7B08FDA1C0FFCEF0CDF39275751EB146E9C44AFBCCE75693653DC
C7372B7DB72D97B7E3008FFACCA2F6C6220F34D1129034003342DE78A601140D450E12C99C70
5EE0A93B3F88EBAFC86BDF4AE2D2339E665F5FCA1A2A7A80FEE1AF3DC9584A025C203C93C3C4
FC90A6EE244C5525FF9E4C9240B3B99A7CF9246D59F6D66D70F7D3722E3DE1CBB162E337FE13
6B363BA690D204DA1AE1ABE4DFB35729BAD3714E721C38E8CAEBD6556558B8AA6EDA4F647866
9B48096AD4F67BE2D12690D9F650267E26E1DF235768626FFBADD258D59A69DD427F6385716D
6DD694717A62528BA7E4DB29D1A49F3DF3B37B49BFDCD4D5D90B92857F59046E9C8C83007FE0
54811B3EA3F52E6B76078CF973AD4F4391D0F9402F9CD3A07A6B6C99A6D9E3B095522664C8A0
815226302FED30D34D6A5504A225E6443C98F748C66A937C7125F4497F240ECA312E20120E7F
B7C803A017BB8F0DF649053E09F1F9AA321B6178125EF4E25381FC3E227539D5702E0B4591B8
7CAB69B6944DEC1B9ADBE7EFC7E5B0E7C30D453EE4D3033ABC4C0021571B3CC5BC8025D441F7
102A6FDAD7A952E749B780E749046329514895E5B582DC4EA013DD50CEBB7F0B7016C92447B7
AE287E9E07E4F6F000DDB10FF8113D3E7A20C4AC98A8931395AC446774297EA00DFDC14DE0E0
76CB374FBF0029879B32736199608B79BF8ABEB90AD21A8C329473ABB4FC51644258DFE079F2
B4E8D1A0F73A02AA4518176A2720844B18341814CD559955F01156675FDE3EC6E20D040E062E
C3FB6879A78E46D981BE01DBF876DCCE3380AC3B70C73E8EBD70FD1686A3CCAA358769055F25
BA7D6BA490E9915FC1222F92CF52F01ED433D0D6F1BEAFF017A79272C4FAC74312FF65059AE0
B92F6A72DB5972C6B98B3F611D83004C29FF72C3060223589673FD69BA8B9893C620B0D6AF84
528D2BB37BF450A34012E907F57A5B4ECA1502EDB5EC18D2ACE9113FFA95DEC1DA8996E3E846
C10E056320F28433EDFA690BE86E50DB08D120CFA931FA48DFA2AFF5A1A17692013FE206EF70
DB40D2A90BDBA450068DD10FBECA5943A33BA80900746BE92BF06A00FE41EEABB6EF8C2C259F
EBB593792BBCDBE40C82EE1A0C982AC920D6DB1430D6D5982EB8A5F54114907D7153B5E43A0F
D6F297DCD3779B485EF00E4258803B3CBB8C3B674C82841A138DBEEA6D8D57A5B364E8E5E41F
DE9C091381D977BC77FB29C419F8AAEF51531CC7FEEE2DFE1706B2CC7FE788844E48EC7AA7EE
D76DA64614C71A4A2D60A89A8E8A49A9B4EC2FFED91605B91D11780D5F44EAEF728D4CBB4A57
6D2354EE6075A23B137476476687DF8B5343C839E3B20C8068FACC45D61B144F58418E2D1DB0
998DDFBABE23AC6E4D6FD711A3B1A0B7DCC3F4DBF5F49F0F030251B66B82698CC0D8E90CBF8F
F2F816F39A7F37485BF8CBCE1EB2FFF54C38C439F65980BBF081D53B3C6FE17916628E9CEB5D
D5E8B7C1151C3D5E555B9DEEFF035FF461052A8BDB1BD38D7A40364F60A9B39221C4301A7640
E020E40A868475A697B6FD6D95DF5594F3D41697E03815BF3247A8830158FCFFAA9F79D2E872
C5D2F588A19A393524EC6A4013951A875B5750CF9548C931CB745A834A4EE9B2FCB26FA5C2B6
007A0767D84467108065805EE8468AC9AB6E4E909AE1B1280F86700F9F29601183B7E7C5FDA0
817D73F991BF64B60090B09034571016B0A01DF8F876EDCCB30D6076471363EC61BD54CFCFA4
3A10D24F441841CDFC1797630674F1B6C90E58B4B41859C152C971B151CD45EDABD962EF16BF
42C04B94E30E714B61E8C546B07C62B0695F464A2E0BC792AA6D7B90FAC4D893B1C3450B1EA5
66F4A0F1D018D89CE2EA2F2D0F3BD2B5E4C0F5D36C81015352DD4184D2887BBE0C2E0A45E88A
485779065784F964E48CFDBAC33CFD2DC1B68213155BC02CD2092C46FEB6B828005563756D0E
D876E401F31273CE12577C98437127CEDFC2C1F386BBA0B39D26C51E21CB8542423EECDE8A53
B64C08B045E594E76FE7FE96FF88B7F5564EA57CC3AA38C12C27D91A12AC2A5BACE9404F36B5
B2F5CCCA624E92409FE569F426209848A16462103D2570201898AA2705A5F0E89A38400E9A77
5B14C2D4D38FBCFCA74E1F69AA30E386A594BFF9D6D72DDBFD1F16B5F56842A4B0979015AE73
7354310D573A00DBA0F9D3F4865D0F91A6FAE539C955B49D66A14A31EF0538B6A9FB56AC02B4
0590A2A6EED930D7442466883538C39BC8911292F283C9D41DAA379E679CDFA8080C0661D60B
76629951E2BC39CF7CAB379BE6A18FE38B912C3776AA5876F06AC4DB3786026696C4C2FC1141
36E1AC4E49D0DBDD11CE5BC474EBE38E9232A9DF46C40B06DAB01BDF1C537CABE0AE3B3E9D1F
1670D93E8083DF31C7CD014904220D5D20B51FC322774EC81A9AF929DD3F15F45602834B8D2E
98699963E4E4A789A1732A1B60ACDFAB7FDE279D513B7DD837A6BDFF2FBC09586F1C83E006B9
0F23C35702B0028E8DDEB0C0A9CFDBD2214F3E7382B3870B9885FACA9A0776B0AF02A8282BAD
112583338D99D971976BFD33BC406CAEB4683B69CB17C8C64337DD0C08607D7B8CAEEE45F519
A2FA1A280CB0A17FA0A0F80A33A8B80EB33E2CA371CCD9533833E933ADB3E1C797CCFF1601C5
010456F5138310D16E607A1B6C01211E5A920C76807A793F0EF2717C27262BCD486F44AD6339
E1797592F76EDE9D31F3DACB8628B628182CD1C6ABB4F9DDE5EC524618F2EEB3D5AFA54CDCF2
EBD34BC9C8FA2BD182700FBBD6A920D72A98B90CCF5D9202F8C68FBAB45E336182ABB3427E16
5800137C5AB794CCE2B9FC1268F8A6377A43E54E2880D6CD93B2A824AC64B95033D39F3FFE32
3AEE76F5C8029BB2664AD11ED4097F15CB1406C623F1E577FB7095A7CEB844C1B03187909DF0
EC389287C3724105A22B63FDEE7404E50194EC4552CAB75750640D810674DC2B405459238D56
7F0A14D954737BB3B77AEC9798A077EFD87C3B05DB4CA731D8B35DF4C0CC90895DDE6CB1E7D2
7B81B6B3347F54461877DF2504739BABC6BF448CEF9F0CDC9D3AAD48924C8B219559A07D3CD0
631CA58035EE45D570E15506F1283D62888E30EB7360816CBD994A87135B085CAF2DA280D5B7
A86591F271CF9BB97D8C3CC089C718F1E109930011BCC662A65E8449BF6E4619FD57CDB9DE81
E2094F163E9D68288A8A324A54AB2A0C4ECEFCB5224525F7CBC9026C8EB522FBDC26AB319D2D
3335635E32C030F16DA02069BA8B31C449BA3832D70E8F0C7595C9B66D4EA36BBBB9B60BF489
C0486A47CE4826E274466ECCCECFB0788DF1DEE5E16935CA9A3E3F376A2E7D81C766D2483BAB
6B7543A9457921540F4E491F10852A0F69D026A575F7BE55252BE8B9E032CC958C955E581EF4
5ECC7DE0664681E5FB5129AB5C5C1E34BE6BB5C427710540F239CB3C2E9823340BE52CF135EB
B147B2280F587B6D8B6BE6B720AADFE249D90356BECBB60272CBCC6D5FF2FC915FC6790FF52D
35EC208DE1348FD419BD6AA51C775A07B02C711B060818F1560DE2FE4DBB554BF8A2FCC8E409
14CC8C9A10A07D1EA61B51837589E1F54F222AC4E12024AEBB51A1118373CC1C26D648C9310D
DD3D72AF897C2DAD102B59EB0376FA15D1E3A9F2F211C236E69FD1AE2565053586DABB336821
22547FB866A3FA8824CCF312182A284A90BCFEDF404E88412C4CCD65155DECF7FEE1D78F936C
0D29E2B4F8FFC2505988994CDBA36C552BCFA2FD6DFE5424D02EBD6E72ECE7BAEE8D108969FB
3844FFEE2030AAF1F88485378145925BE804C5563DFC3C9B600ACBAD0B9AB20B4AD44D06A69A
3F570D51356D9324620225EB0E68E7FF19C9B916F193F1203195B599BE5D481CAC80418D83EC
28FCA1618D865594637E1A91DABF19F26F05C143E4C9852B0B4B217DDFE4CEDA576C5B974FF3
C8C621E3F060BE340E8517AA3EF0FAC50CCAFCF3875AC23792EDE8B39EF456B63B6A6AD6E85A
DC9DE8F3970E2FDD81B8D8FFA9FC4668AB2E39765162AF4BC1EECC53D1573F9BD5A7157A05AF
9C227BAB4AB213A080038F77445B3C774A1A9220B93B835753640923A35F37CEF15002F2EC24
85D24A9FBB2371FF572ED1D0066073B428478DE5839F0CDB6AB1FD57E55ED4FF122E30F2C711
2366B848EC562F1A9D77DFE1B2418D486BB8986116DA930875CE316C26FB3487D8EFB59BE39B
596BAA790610F39A4FB32CFDCFA0C890B76B2DAF898FAFEB1E443B53049B3D8BCAA2132A5874
3DC086219FE4488FB39B41AC446F120257DDD07B0CF969A887D60C5B45DF099E0F856C60CD3D
93444B226EBC57ABDD59C5F5A07CED0633C5F5181A92C40CDF39A5241F9CEEB79EE9A1D2F528
46EF5CBC08C84E83007B963D7A18BE30026DD7589AFB8261BCCD327FBE1DFE700DEB13E89B12
C8743845E7579EB7726D727243FE49E6D568690F042EA71759231F7341D5390A4432EAB8CE18
9A8E9694A411C088AE78B87C0153D28403E76C2CFB806A8FE000F720A9407E50D660C1BE1A4B
D30F59DF1EFAB4FB66F4CAFEC1995EAC56136E9042F62D5D266A060DB1E28D48A28A76872AF7
2ED7935A4A82D16AC02420482E40391F43E42F27A15FE3813FBB7B62626335C9677367A4EA5F
CD8B7A26A680C83B0D6A51D7EEEE8CB69C19E1953A59391CB0B25604CFB99CDD88BE4CD0937F
27C0A6552BCEE8A6EF45DBBD2E625A8EAD52CBD30CC247E96557B4CBBEED7F0EEE4BD87036A2
47571DDABFDEEA1A56F419A335A66FED2C9B1D857E9F81C35D668390AEB056E9C694689A964A
3849AA3BA966679195014D3F10F10E469AF3F6A9088E4937658492F3085DB53B587A4DAF7170
2AD9374585FDC6A900EC95C2E685DBF41A84B9211D8521D5CB713DD46A0E21D74D822446B092
F75DE8C9C6388868E93A0F7C30AE540AD4662F8457799D2ADA17C538C420DA4F6399BD407CF9
CF9E40ECB9A4B7B3F1A77D865AD445ABC89C607A4C5AFEDCF205D6BA6887BEAC450716C57FA9
8EAD379B1D343CD643D8ECC0BBB299D43B7B7B73EA9C624DFC635656B30ED50A22C27058D5BA
22DE38318FA3181FFC82A160CE64EA65A6D94CC01E2B5D9477687BA661B945658422C3FD5018
65604B8574BBFD95D7701BACDAB23FC0830A56C89EE856793AE199119B86F09AA20583B6ACAB
603CE6775B287787CF2DD3E5C99FF137BDD2989C6ADD90C704B9AB69FC932D5F81DE3DBB0816
A8E6F1B49B18FAD5A936DD65E65F7000B8ECC6569F87417DD575BEF75432788A670F1CC9B82B
395BDC1D2C77EC6CB37726EBBCA11E445B50943C8641CCD9AC8DA0CDD663BDA2512C8A862214
E72C3F2FDD61627CD730F0E44CE61BA3D02B6932F8520E493A1D63F561677A2A65655FB234B8
B0CFF2E2FFAA8988F9D1AC1E1AAB53FD8F9BF2CEA135081773ABE2D3692B7D2DA97AFE084C8D
099A75D89D96FAA97DE98F60BB4A319A3BFCD9E07A537F4A1EF25D41D7FCF20E5F1507C10C69
980BDD6E5F5F0DC1FB25EC2E1D99EE8E45CBFDE8D1D29DE70F7C4F561A138796134D8CFDF7E0
11DD39D72391296314BC7801E7956F4E517EAD36482FE75E6BA91C98D67FB7B44901600905E7
C3B16D73CEADF1D47EB4D1EF23B870C3A45B5D7E0C67C724BBEAC13A92CCFD621E2966F3C690
8A56758D24318A9CF7321D11D3C2FC437777723C0261F3A55F821A6711725CED8832ED93C25E
7C4009B0AE69D8B3B98D604550D2871EE5DA86726E06D6C48D0FD587EF6ACEEF2DDE65E915C0
3B779027F8CDE2B5BE62BB1B7BDACEB5B904D7AECB02D43855C9B1E04AA23F1C528AB9ED6318
0F5D31564207177CF9D04C34CAC23B02B6D1DE112A7993BD360E3D13B1C78E5A335B2C42E1B0
FA5992D5BFDC37A921D1DFC2059C252961815ED4AB4C9C0E371738EDE26276F1EC734A6DBBBC
A2FE0F3E2C844A4A47215C344C757C0A7EE3FBFB315DD73A8D873249DC2916F7A2B6B295EE5F
FCA2B866A777DC98530C3D2FE7AE649889BF44B74453264AE10FFBAEEE5DF3B93C28D9108A4D
88F0C8BDA72C46083DD427293F5AD1CAEBEC5A8450A99CBC8418A5DE6006BBE9510FE2B02D07
F3672D1ABFEF0670D5F5D4D31D904283740C635E52C3F78C13877D13B9A5D2834B5CD4BE0AE4
34C9CE0C85E2642E84CD51D02FA1999CB88E5ABC1C25C4DC34B6C6435C62167EC9267C72A950
3D0D62FD0B7A94072C616BDD667C476596BBC67F3223B8934B685194AC268130A042F6BCB286
94C813756785BCDDB7AFAB7619ADA27E4D618BA31B44F8D53CA5D8BFB6517005C8AF0592D1EA
94A96105D6397359F6A6ADB26118911D17BA898A11BA04F5D4454FBD5B4332579E5F3612AE97
3D491C9851122D079D06E225615B561B3036E744F58F046321D7CF53E48704CDB67CEF98CB38
0D8B2D6AF084739A828F4CFEA843B9AC375A3C1795E4AAF195D57FBF375028280115CEEE3EE8
DD413BE4E0D17F6839B4CF4316209724419FBE4C736397E4C00186963A6805FA071A1C88FF6D
D4E3FB3A54BDF25F7CCA5BA3150CCDA92B0A24BD000752900643BA09669222C239F0D1D30CFD
1B0847CDE69BA52166151D00CDF19E1F25A8BDC004E2051B98FA5CFC8C53096A9E9DF081CD4D
965A6056FAD05EC57F919C54BAD5D71A0777CE31A824AE33536D963ACB56F2EADCA2D4490202
29C780204061B07068F7D7BCC0BAA25C422BA80A33F01442215C5540F8A5634C9DA914E35CB4
7D140D6B586B641E04492AF2BFDBE64AD9834F019A88A908BCC7ADB9AE1FD01EC3AC5C8975A2
3C623E853B167F682D1CA8B2FAE954775B4C82E9D48817485DCEBD571244E42C5EFF7347AE22
56D69FAD884EFE1E301E17F23F85022E6035F3A3C335D20A8578AE811B140A8E867967767E4C
C3AFDA1BB40EBD8E660D25313E1253A5E11A957CD1312F1C557A13704D721063C5525F642599
714247C535B099DB0EE0D71CC3B6BF014AF6E1AC91F2C48B43630832FE4E1BC2B6B0DCFBA765
BCC2B7E488B2D8C55BA8837487C2E2DAEC7A8A04B60C5D0BCF41911942A73136921054A64EAD
9A1FACB1415999579473CD17EAEEBDD333AA193D61A35EBA832E90EE809AA8FB53DAA2D2C446
9D1F92E969EF7A4829AAD523BBABB3CF2E33E847CB94F6A139E2230956EF145AADB4D546F047
07A62F5A504AC695D2631654C1BABF7B6636784C90C5E008CA0FC027A9C83004CCF545FF79D0
EDCE33E615933220724291946A5ED2FC3E1F82E467CB182913AD7B45EE5A19CB58E0A16FD926
E722B79BD53E08722E3382AA7F6ED4E84AFFEA743E579EE64EC5C8C39D11B4DE072A5D3C3A2E
C7D295C9D640F99579D196F267B66554C2E0311076EFFB5C4BDF87F702524091A2ECA4D93D96
1F6ABC7FFA7AF10A3A25BB7F2FC09EE157B38FA159721C86C20B739016B3645BC2DA41B17B0B
372821A6E92F9E7F00728240DEE6A7FAC8E109C80D2BF88D314A397DEC43E25F586F0FC7FFDB
35801D891A416F7334D038172C07E5378B12A51BBF604437826ACAA2138D1AE3EBAEE5FBF119
7B920930EBE73BDAEEB58EE432C2AEEB59DAAD07D57F4110311E3A8FB5989355105C24B32259
8CBBC938CDE2779E3F89AF60E00D7FA93AF1335F0EB911A5DE90FEB5AD0610327E472F8E76C5
2C0198C68934D7BCB85C1C8549CED96CC0AAEBC2EF0C4231F5C1077428690DD25DC1976DAF2A
02409F6F420B8B841D6D40F59D10E460521988733F9D25E0DD4A098DBD8545440118BBABE6EA
0CFF827FDC00EC4D156C8569B97FC95B5E779D18C282A8B5DBBEC45A79B0DC399C89136F91C7
2B06925373CA580325F6CC2743CF1B494D506EC71A1045FE67AF271BEF1F949D40957FB7D706
6AFC3C4EDA3B0F9B7088D98100A6277AA4627CEF76FCFD5B8F3CB80381797301EE6FF7EDD41A
68481D111A2602DA6260DFA4A4A82165006327A2ADE868ED33E727A5F7A023B650ADA3BDBDAE
DC59E465F0A43382C49E44D147B8B34237E8E64D7CAC0E0744555FD66C4502D42C672D6B414C
5557FA6CCD7F8B42D547DB6849382A65835322488ADDD0C4F9DF379BC9085EE3A3727B45D4B0
CAA526EAE50FE35597A45B2BABFE357DFF10B3DB0CF505B8370303F073CE8BFC7E107366EB90
FFCCE481785769051E976DB2D8A27B5CB0C036ECC682BC3C280FF920369E524531C60BCDCBE1
7D86C0B8CFC7E2889901E6E554F9054DE8FAB166E7CE54414E2FEDC496B75377EBBF56297D06
ED3BA60C379723F2A489D33E103834E32C819D6A01C2E9A63D88A675F284D0D44CD519B5BA05
6BBEF1E2A1D0AF0A51E578549AF83B9D97CB2C5212F0FD34183C329C074288D5E6AF98A938FE
BA318DBFBCEB64761D4FCE096647B5F56047A419104EC71B97D2DBB0F399579FBD054B228E68
06EA6A2A36BE1FA0DAC9F3D69832E0C690046DE34528E76309EC9D0B81510E4A4F0D0627C768
AF60728CB7E9B7D495166839B98B96BEB8CE90EFA2719F05BA67F41C45BB8C2C92C4C61884DA
12A0D8889A874A865021DE908512BB94201F08C9A6F02D3736B8C0633FDAC2447CF080909949
4BE49B198FE9E59D93E526C94EED9BCDA7D1C9CAE9B93EAF17310D82210064D23FED3E6647A5
FE109302E13821C92C8E63389070ABFE88EB0E4B2D687473CAE7CC992284E1B04D9830FE3FA8
D52F816DB6236FE7BAFF3E9154F5CB6D8C94679B6165B71B7FFA156CCEB7925F105DADB37B92
05B6E69AB24AC13E96DC320FA48AA0ECB66AD3DC16A45DBE2DEC177AFE6E4D9C9299FC943422
C50DE8C7064EC35DCD37713633E4636CC8DF84F76F215FE0376D7D920417BBE50725A3283EF8
93A875CD8FD120834E0A33DF210EF3A0E609CEEAF8B48E0AF9D1D1573014BAA0C89BB7AEF228
8AE938662659BE5E2C118C6DAB866FC6B948CB509C16E4F823C33A5A5C418B5F449E58684EE5
3CD46AFE876DF8CF00C957368FFA4D8F1B6367BD077DAB4CC65FDB562B17C32000AAFB2D96C5
F7B23DD2A1358C4E9E12D84BB69F4B31335FDCEBBE6BFC8905F6A4BBBEBD3CAFB1587A5EBDEA
C4DB4674158597153B692F5AA2BC7C534357708F6F855C4521306A03513137108DD2B59248EB
7E846655195BD36F0B79AA06E3448BBB51A81B715BEF671A823E643806B052D276225B257835
3956164DF4569CF4055CCFB8416C00E5BBF54EE6A43B92E8146D65F34E0CE79481829C56DCCA
54CB942A0D9C3E1DC4B99AF5EA0373193A1070853CE11589D31817A1C5FBB4A361BCE50EFDFD
5D6D09ACBBB79FBD146C0E6B00C3A98C364051594EA44CA6D397105BB491AC4903192DB08DCE
05AFC3D594059F0D92F98DC0F4F8E52F8B4C956B20A6C4685C123401E3B9821F4971F9E1BEC3
DCF5F0B162C01865A47D53CB67A8266528B7CE2652262E4AD19A4DE4D26557E5EBC39B23EBAF
C236B7EFBFD7F08227D1FE71047B45EFAE728B5A91DBD45E6ED3D0CA615A43D87C7748B2CA2E
0A0C7664D68F604128B5BE598BA38D4CEB148362540887A9F81B5402A66068ADE99463E91665
9FC23F478BE353EC9E4D104F56BE701ED9DB5E4DFC3CF3155A7434F6D7C2FA6C623094E54971
F44A69A35AAFE54675657575AA1F111F167BCF97DEEB1C47BA15AE3C5DD7152E9A636B086EB3
F85D39B5A440481A2F4712B6553F4303889E3C01459C078E26B09320F433E3B82236CDDC4795
38270E5E3A25ADB3CD6A49D03DCF1029554CE0D9003EE845951F69C804F0DA6D35DCD4F7FD8E
3BBE6C6E4C6B4943E6304FEC3C255182480A698D453680DC193FA05D97B4B7FF8C413DB8CC0A
454D4610FFA8AA55F21BEE98A0CF739015253D3545D7B75E5FCC4A8CD5265DC731E62C587C7E
29196D1CB1B43818E6AA6AB8370CD5C6765221F1B6FFC94963299EA66E8AB516C9FDC4EC79AC
0001B6EA4221B88FF453C2764D8F9E545D3FB4C0F19B5204B363CD9DB27B905647A569CBB6F8
F60008DA5ED23C1C6C28D5A3A2D3684744D1734BB89B7B765BF809A48CF7139F62E00D2AEADB
6E14BD0640BBFA7B92C18CAF853B051200C76F3831FA5EED28CE6A111C5FA6039305FC09F6EC
026C4F16717847CE2244FBABC3E060C735C79BB9B622F9D737BFBCE50C68F8B5E910E5D33B47
F2270632397975D2ECF1189D6D34AA26D4916D8682CE4E6F313A54429ED4CD891CC40DDA56F0
EF1E5B3C68B9F57C19C67846BEF9EED7D82FBF0AEA57DAC78ACD7D2158515F075BDAD2EAE3B8
270FC13B3D5873C2B7CA773470FDA7A3170429B1F57B0DDEC15535CCEF9421362CC7221094B8
8B94F6B8DDBD767FC8C127246BC40F9DBC41A34429487120287005CDA17B71948368209C18B3
59F270A1C062B762176634DE27E35F7780800A64081B7878C304DAA22A5839E316C1DD8BEF27
4864EF4AC657FB82403911BC354A1AADBD05C977800BFD29563009506233279912F7B7C65564
BF969A7CE6BBDDED6709C036C1A70D521BC3A5BA7557FA476A1CBFF4128E63C7D95FAE9F54C3
219DB1294D0DE7FC83875B2642326A913B10D683CC8D3CE4CEB826842613BC58FE3311DF9789
E347685CC21D488C1948977AFDFFEB2D47521E6C992DECAA4B1B3A6E2616F21365B3985DC2DA
7DBC8D002626FCBA223396A7FC5D9E6E95E40C58F027740453149BBDBFFF2A6B3FCB480111ED
3C567142B6516025137D8D4DEE1EDEAD4DA26A1351ACAC286547F21A7D20002E3F96AEEDFEFA
C611BFE9DCB375424369E456CEDA14D318E7537354D72B73FEB067E8BD713F20A4A9487879F9
3225F3BB1FABFB6867F2EF2ED9BD3CFE808D46FAD28250422912D0C21BA588334271E04A1716
DE751B058B4032BAAEDD23E532B68C6F4950625E41A8B9FFB372678F0CA59C7207952C6763EE
75936F13D6C77D44822FC8CDDB74E29DBB628C647795DA158A014641A7BC363C6DD309045AE6
A91019276F357F3B93AB971B6EDBEDF8734BA37A5A8723BB795D7F0B64214634B22F96D6341F
ED71A86C50AE4A9F66A45721D075EA25AD917AF374F27E03A7C6B9B69CEA308B8B8D282D54EC
1BCCBF4DFF640D461DC43B502DB1124F74022B055AC286F7BFBC54ADCE919618772420475827
65F98D5E253C1D83BE8EC6C243666E71256299B49288D7C1747D467FB498E881C1BD7073E1B8
FA2FACEA62F25CC4D3AFFD7147937AF69F64DC8B2B7E45260773CFB997561D03285A28E79CEB
333378AD79B9B8F8102B80D8133AA7926C56BAC38BC2B29B59C49D14F04D08D1271008E77C7B
ACD3F80CECEBD9832B81D6F3F7F8822903D70AC443A7BFE358F9A3DFA55886A7103127A88974
B3707F8335B758581030EF8C301FB8536179CAB18018F7B79D77403F3B215427F637F275B245
7C36567BAB3AE3CF692383354B2770E39933FEFB675FC0109BE7FD35398584A6C50B3955FF1E
D189289FCBC16C4722567595010CCCE713A325E3E5E9CA23F2F7DF19F4A45EC7594E87BD9686
78CB38F74DF3C9D4A0C2FB6C17B6DA63EB40FFA86AE6FCAE7ECA698D653465326E4D835B42E1
F94CB658CACFC451ABECAD8CE3F26755D7E0709A1C1FA056FBB52DB2BD91CFD670328B17DDA9
666CDB41E8748076A2B006F570D783B5E3E0C515CA2C6F2720FCD64CEF7FAA7138D339888743
31F5361B641DC094EEDEA570901B027379A520BEDDFBE5B68406AC41D314735DD901753EA7AF
48C0460744F399D072BAC1F1052CF0C4E001827B4A5DF8FBD43A2F29B1DD1F4328633F938387
153FE72CE0B01BDAE9A6F68B00436AB68ED5B97B1A508619A43F4592A98C8D2F11E3E4270AD9
27660468E572E865C8686AC4DAC2CBE1E617E7735B570A348E09A861368489D80A41ABB8F76A
5BDC34600D603E861DCBAD49D2180BCF7DC48F949B21BF2601F382130F2378FE08F21BB7E1BB
F48B1EC0CA1E75CA1A1B31BAEFE2D1CF7A2CDF1E4DC1B5E64075D789F00FAB7122149546A5F1
C84CD9C0C56F4473FC83109C4A03C5401219452B633AE2A5F49D01C50ED03F4C7258D3CE5D68
DDD37833DBBD76B78360F2EF763C4ABD57FF2655F64DC77F8B8836A940F7B499144B95BB73F9
2796A192BF884C3A929F62B922B1BE1DC1AB3706874E267B50CE849C058F29BC280D5DCD6773
EB16AEF5E174ED11BCB17BA3A4004C5D22002168C2C33A1025FD29562A5F61128A54309111E8
50737A4931C6E90C2B3C70D7E5869EDDE9C76ACDFCE2BA9B06D38F7CF7F5E01A6977FEB47E6E
8B8CD26314B3D4D36C009D5BF8EBE702F2A748F055899C27E89366D29B6DB33CEAB3C85D01BF
5FD0588185C64AAC119FC25C4F1F006031BEA0D3ABD210DDB58BBBFF93D7AA703BD49E036877
1E09D019D02C72D7757D4DF7D40C23460AEDC066BB2A8A6D82A23BF86050A0D6238642FDC3DC
FCD972E27111183C2D642501617E4EE8D5660A82AE87309C4B61B66240DCE01A144604C8F9C0
999429694E82543ADC47B37BC1C414D05C16FE432CF22D941A9F8A9FF6BA35CF1E1D1A87FD78
483BDCDF437E9C5020A227E6B5CF7A7AE3600C7A855B31BBF8B600ABC1917B500E1E69FFAEC1
B09AD4353DD655A58CA7577B32E35BF31722B7E23B337B023EB7E1346D7871A83ABEC04B9611
B2C92FA2EFFE81DB330FFA64AA179662017DE0EC972ACD59F6578929AC3AE8084F6DDA5AD43E
1AB540313B5FA3B268A94C7655CDF2C1440D70E582E8BE3BAC539742E9D91A90ADA543C8F5DE
A18BC3044EFC816AE561D8E8A4A70FE9947779575BBCDFB659A499092B2B8786BB255E7BB673
AFAC6C9B1F0E1572470DAB53AB3E483EB65F9B525FEA74654D46D6285B3D79F954F269745D14
D06021086DB9900D6FB1BD43BCCE14D929F3272C33CB52C27EBD26AC96FA777C43D8535C9E7F
B6E93443C599F65423C7D5C47E376564061B618F24065ACCC0504895759DBF66043082EB7B66
5F0EF42A59B0765EAC7C95F5C5190ADD3A9EFD11654DB2EE953F411544E56FCC0971BC9496EE
146B86A7D3D457A24EF79995058FFE98B715228B5798F9E3C6F99BE5E85EE2B841417F230D38
7A092B9E6D32DF23C200F1EAA4B2D3205A4C2C19BD21DBF3DAAC60BF5DA397A63014851C7ED5
61D8578FAB515D6E670954969170FA6B1F3D80D52A0B0A3B63BFA15AE3607C0D5D3EC2C2F9E2
6B9F9F725332C4D9DFF0F088B1EF2B6FB6CDBA46D2946DB5BDF2EC498C8FD739C2E844DA06F5
924987E2212DD24C74A98F6A4166AADBC4E9AF58E56458106EAB3C37A068A14D9DCE84113B0E
C88F62328152EC5DD89072F6A6705C8D6D169FCCA5B9602D48ED37CF82998E2873D893415D2B
20976264EE89289A1D1731E1C0E0A7BB3C2ABB5AEB88AFCF64C6918171DBB418DC92B01E4853
6FEEF1BA647388F0F0C510BFB48800A7B2CD6583AEE9BE0F89B261527BFA1DBADFA531A5C3AD
EB9448E91842BEEDB893BB72EEDC7380464B369D7CAF4460C7A84F243403CCEF9E58C7A95CFA
640A9C43B6BB929C8DBCF093C473B13047FF35EB8BC0096C545A9C4F1FDA5B00ED13D8B24DB7
F4989EF0D1331B0D22C6AB41C397FEFC168BB8C28EC99D3B979A8DDA2F7D85A820379C3F4A6B
E0649C53862E26189A171441ED02D5DA83B14CA69376A9F65DF99A3A8B6DFE6684639383A21A
5AAEBE47D7636EFD69316C1C1835F2B0C08BE7DA329D995D145425126A1F31FAEB38D57904F2
42FBB28C17465210AAA16E4AA33A8F355822610D4A0D9DCC74B45231D8453A0548DEBF601D97
B6055683342CD86B1B68579CB3A77A35140DC86DF849D98BF4742BDFA18739A7711F241D885B
FFDF7CDD6453AC1AFD39A563381714C1FFCAACE0D7A9D1CFEA51974E0831F833246CDC87C89A
3880CAB9AA0A27B588505A69B1605870033391D03C5D9B54CB5648A642332B11C75DC40F6299
61CBA93E061294F6605CBE638D9A8D82EBBF3C4FD09005EEC3B3528DD9DB264A7223C5A085F7
8541B3962EF2E28A64707D1FEE138A8C8B40E42A6ED907B61580E8BD0E1DEAE8006E93585A31
99F5A8E421B2C478E5217C29B3E0F5BF37F6E59EA660A21C7803AEEDBF53FA507DB673B3CCE5
8ED059DFE080FE69B99274AB64C260E770F22B325AA2C26211468060A5D34E943C847F811B09
338B951EA941C46D46F7FA80E1BCBAA061FD0C46D6C761BD35610617C6A5FF1DF933BFF25A4D
24000BFB5E58E3317CB7D6403CDAFEBEE2C2C1B457DBCC4FE868BF3E1C0AB7AAE923B98D1A13
D1875B3A18F0573307917CD34BF4BDB5DC3945FA9902FDB4DBB5EA98C6B247313A889D0F9C6A
1A8EF4E33FE2759AABD7B3110B95F6E045AEBE9C1B911E950B9E07C30BB03FD4A238954F6751
606D51786E032C778B4155212247CB68F66D80DD428A1A233A437AB5B5DA306CEC66AE170394
B5C2B6E6B28FB5273E70617FFBCF01698017AE67108A9041AE2258657B1D3F95E10D6166636A
EBDDC9EE660748F0727F48411163810FB0275743F5AA5080E03809D0363830330A996E1EDAD8
284343965BA091E36146FBF27792D058C4DA8A68B78F9ED1C205E6CE4B14E31DD8A8308AEFFF
12750DDE5DD593A6876ABB84B27F08111C51BE4B2D0A886D4FB4178B525A4C04404F6310FD17
C4E250C5E6CF2BD10A10178A62A328CFF4A1A44C0D9366C0D7F041904F1737F77405246AC0CD
B42DFC563F80BCD75D3C300D1DFA23815CE27DFC5817FDCD1150A3F3580D0307496C9661C8AC
ED6D2211B6B5FA34108CE615FFEA7EC29FC0EB6075A228D4A36BA570E7DA7FC94AE01D3EF993
37BD41A53D09A6F3FCB851E0FE1BEAC3288A732B2C88DF58DF7375040FE8DEEAC255F619C422
95BA499B347BAEC1A5648E934A86F46DF6805FCF555120E20B5C789451DF58D65C8DD1886E88
3113E9E22547688FB047227CBD769239DA9C5D541C87FD66A99B25DBCB491FAAB1C1A8B5DBB5
E29FB03E6A9BA58ADCE4C8557EBC975488B9EC5C6CB5F9901A80E9180994EF0B272BE219D7CF
D0F186B2A59BF7B0F13EEB3573E399FCA3B49E6560BEA4D06AB46B0BF4080E6C364CB13EF0F3
F833D78917BB3FD14CBDAEF5FC30082FA7C33D55904CAB97E3E0FC00A2509E14D959F50B11D9
4D98E28A07D1F3BEEDEFE60A8700F437676CD3F50285BF4B45492F886D2B8BECECA4C7695391
B2C188CE10E8D4987DAAAFD018E5AB26012DC13A812D62BD890C5B6DDFEA3F91E0852ED125CF
592373D23DC67B52B675E7B406324A9A5251643AF5F511A5AE57E3A379F0280554B166B0A07D
2FE6911F2BA8154512588AD145BD1D51918CD1A935DD3F63937BA3CAC2CFEA4E39FFE6ECAA35
A0A8C0F4DDD5D13B27F0C346B9F82B95FFF299FE574BD9C6009AB50835DB3F7CDFCB54676548
1E33BA766A985E1BD76F4E7FBD9A69BB6C16C7A773527A86590F4E8AE1C18324316514C0DFE8
9262B2B3865B989B17A3A72248A1D956F73AB81FF85984D03147CD888647E247A5AA57AAC464
FA746C67EE4C377DFBCEB8C52BB0C334F458D21F725DC712F33A8BE855CCED95602BAC82CA69
F8EF1AB56511E7F9E58595C62AB67534C41519AA0367C1B864CA72F3B456042CB890AA9BC5D0
8430623B92BA0358CE7BBBA540C1F30D56676A0F15195CAEA184BB6CE139BD62FE04491C642E
27046F5E5C53381EE92CEC9CCD8F12CFDCA6879BAB548033D757DEA3A31262803DD8DA453E50
470A6ECA4AC2C86FB2ACDC5A9EFB7130EE7210BA68C71AD666765C759CEA1FD03C259AB5FBDB
41256724E1920BDC13E51A0463B4C570597671F005B2ADF56367C18AFE2F7212382C72F3355B
F09BEB273EC0CEE317699A814A2C8B21381110E41711F1D45E00C4EFEFD48D7345507EC19DCA
B2AFB7CD579663036C7CBA542EFC519119FE105AD74FF0DABC78DBB6134D876913D8C8758C6B
7FD9D1614811636A76545945D2871FF8A80C7ABA7AB9A56EB23A87E5939CC2C09156919729A1
31F1E5B6D1230F3A4150AF1BEB826FD6EE457925542F3699BED12C56FFEFC75B4EAEF6CDB9C4
96240E0BB3511878C7C90E1D915637D916FB5BDF61E698DBF83DD5BAF3D9C475A8915FF47C97
B8EE8E2C544E9DB143CEF531A6CD6EB6A468F55A5AF514525AB05778FB2D2ECE258F0112C177
41399EC4B8AD764B74871033E6C07FEB0EF9F2498441007427A9D15025F612FEE8003ABB4FAF
371A513CA57F050CF437D094E0D4B1F0BBDE4C21E3DCECBFE8FF2289231C8B39DDA47A134E96
274EB92548C51A4D469EC4533B351DBC42C9FD1D0CAAD32211A17807F7EB1EDC44D48E34BC38
578044389904541461134B44F2EB3204DF9B53FADD1814C15A6903ACE5DD349B33C217DBCF6D
EE29463977C7B75DCD553A72F01BE877F52D1518E63F3DEA4CFF4F1D8CA305BA13C5D7506D18
A827AD8B5081BC803060214D5D84FE1A5D5A8946CC15945BF085900441F907D5B55758B08167
FB7180AD0820859189DD2064241CF9BEF9F4584D53491E5ACAC33865D6A4C84D69C6F84DC240
9563AEC65F739B0272300AC776707A9E8435A1B5BF2ACB6367F1A4D8EC2239100E536D793BDA
E5A248EABA43335D8BE8BE0A748E05170419A908AB20EE50E396818A8322DD45565477D64C39
80B5FDC4847E550E4ACC6FE64956EC25E2889527AB5FF346430D6024058E2F0C834D7BA039F2
04DF7197E7FFBD096589BD005CC1091E34999490240BEEE1327A36B13F2FA8793BA04F777D10
556A5D3844D1BCA00EA56D3BAFBB1E890E2F90E0D0A97E6A7F32110BADFFB2540AC97C6C1B02
71F5199A2DA845E3ABC50369DC58F52FA93480CD4F18CFF663872B23F23D80B44E66A81C4D38
E08F42F746ED8E91A4AC8AACF49C6AE9C36CD8DA3513CB1EA8DDC67A1F58E85E9ED7A0D80854
7E26DC8F3D7593C513ADEAA75D327287EF4071290900E8D5990F0F78F84D9E38376F621110F3
76789EEDB0DE9D9EF5F3E5A3082660C5A48F3252DF3CE4D4A9EE0AC1EDF4DC2F53DB220F67D9
F0D16891EC0C0D7BCDF7120D5C5E3372B2580437E4BC2BBF3BE5F22970BEFBF6167D3636FEDC
AD05B66FF7FC86891D63912CF84DC5FD8255D8B70BAF9DB12C0E1B33EA757A40A19F28D4AA2A
375EA670999A03CA657E1F4F8AFE15ECA1E57394D83D593679B956703B3E29504F12942C472D
1F3B8396644B679DF434B1B211F68DD2EACAB2A407394072BA0F1EDB309D707C97A191E0A0ED
AE9343E12EA705CB86CAB7241B15E68A9CC5A8A541F52241425DD32B814A8C332C88E37FCF33
4F12D479CF6979E1255E1E85D071389B324A379142CB3235E3CFD3B8AAFE4304142DA84E5190
62919137B0B60411BE2B00D043D3D8328510268D0A0DC960CB9924F390C8829878A11EC039AF
5DA58C5392E8AF2660E2BEB9B5B7A46E7C838FD6670D19BDAE631A77425539B230C06EB99515
DC744A8576C8EDBC167E57C5DEDCD17DDF9C1C3465A5F0360E5F36F82B71DFC79AB821716C07
5D565C2EBDC14DAEA66002AA3D89F8EC0326F5CDCB54E7485462EC68AAB5AFC17800EFC12CD6
79FD1A94AECD0AAD69FDD3390CA0DB7AA15AE5DFE2C3DE293D479EA443B950E9F3592204EEDC
F63D40D91D0B84C713D975066BE7C2418EEB63B7E343F904ADEF77DDC2D2BFA7AF3E86FA407E
2E252E7D6ADC6FA8C6D75113D15ACAEF0471122FB9C6F5AB0CE289A8C577F5FC98348DA60F0D
5BFE7DCC62F4513316F17B0773F68D7452A95F91C8545446D1AB97E55D310FA94D76DAE467EE
BA9D96D8D33E281C535D6C1CD31BB49561A35E8DF298E3A66F7C9BF5490232A43FAC9018716C
A7315C5B929A100979FD75A93F8FCBE00E8D92E159A10A91CF6D593C1F153DAE602F0DC103E9
03123AE57B942D0AB4217782D160CEB5FAD1C62FC581EE7FC386C941B409F8BD57402B204172
455690BBC3D830D5641519D2933E1A7CE1B0BD9ED8F5DCBC58350EFA8B0D3AD63357E23485E0
3DCEDAEB6CC8935C29BBC9D7F707DC65F391D5063F7D87E6F7595E6ED725FA7FC95BE53EF18C
41BE86DB3E080A612CC8AAF755489E623A76F02F7F2A9C6099014AD4A1AECA0E0CD0458576F3
3A49C6A3DCFA3A8BAC68C96B819709FF5120589207BE23FA6359B7087A1CB19C5519C2691DB5
D796DA903B06B62F95F0304100A4371AC0022AF20EFC130940C59D2E727F913A6BA88A4D4736
FC812023D70B5DDF68B014D935B5921B9BF72996186B043B4EA4BD6890EA8D7B60A654E4630E
229E4396A5FD7B80752B6EF9CA59EAA22BFCBB153EAD19E82EA3D9E657345DB5764C93928CB1
34BB6D7D92F860690096FDC8821DFCEB85A8F6A9BAEE1B729CC567EFA8C323BC9D755F756432
182FCEC4DC7B4DFCD032F368C33F614189AD7B5622C8A72C406BBEE38AFB5F095EFC288048A6
29C7320C6FF263BA97C8C359151E5CF52C8AB49BEBFD8EFADF0BE586161DFB8B5AA27428BD67
C6882EAF22D81C9E7C164B1DC15A32B8BD3138F0F169C17E23070FE74446524EA8571605CE26
B8DA4E020491ECCD2D5DEF4C02D85DBEA3073B5C14840DADCD76634849A4BBE8CA05D5B11B31
54A3BFED3344B97C9EF3ACC2B7951C0B76E3B2C4D084DC4CD984CA516A265A9132951C9A2FB2
59D91E3974E6561E43A5D89032F392BE5A2E8D32F610AB846C9A63B3507CC7117E6265204796
762C36E26E9ACA06BA0F73F4E47A99F99026B4F9F6FA1460CE063EADB8C11E9A7B7BC668FF0C
D8717CAF7D6F7657CC2264D0FBC602BC48F968A4721E7F5314D54368896B3B24270D6FCB04D2
D224F1E42C5038D402221E8D199540FC9A1BB93BBC153FBB10FA3F5B74AAAC7183F11533F126
9BDC8567D0A6D192E0921577FB4E3F0E80A3533940E2B338FC950C2689A9B3C632E8CB4D68A7
0B531A282DDBFA5F774EC85A8D0B5C62D168CE3D68B23CDC087CFBA363D05ABB64CF90EA2828
49298C84490930ABBA10848978FC11B6CCF207F690DF5A33BD9815D72C4F86C5204C68FAAFF7
3A43514105B95D8048A486A37813D69445AF56B756661943291E0F1AC96247E676568A0FCDC0
A4814ADBE48F8A37D57C7DCB07ECDB1E670D6FAD9C666E414192E9C6B1D5292EF1809753783D
7220A11907150339AF02270FA4842E757454E63424030FA89F5E92ADF24DD5EB212204788527
F821F737D807E2CB59BD63C7EAB0699903BAE059F45D382D965A09CE2433A2A7A2FD47F2B5DC
18CB0F80D5A7BD6C7F47D4017FC3954A402CFC0E7BE3F35475E14D71DBEF60F987802EA149D0
B1247D7022433061FC4375A403EC69ED10D99C7DF2B639A6463B6D3727C18DD6A72522BB618A
EA8A319C4D120A248C8B23AE2CBB9BB984EE8DA6637923899F801E362F0B5DC5232353AE2488
2FE60668C1C8E12F815AA64E404D33B951AF49428CB8EBEC850E438B386EFA304EB8139904FF
85CD1BD75C6657F3C49AEC9FBCAF27BD58A0963DFF89B1EBBF721EDC85D1CDE0A03DB019A1F5
344DD92B6C46EA94A27BE33ADDA3EE0A769D7C8E1AB0774366B84658AD390BF3DD6729E6E14D
697064EA37CEB6A0011E85E8B6C1F57A2C281EA80C03844B564077FC43A0CAC1076C6326F9AE
53FC727EACD08F879DC691D33EE53C45F4A0470EC5FD257F4AE77753836AF7DFE079D21ED82D
5432DC416AB45C47B5530B619D5B72FD3272BECE5145ECD8382DC49BB9F81058181012752263
82942A43559186F4F4BA82FD97480635B7F93D8BAB770C17474DB7BD7551EF64D456484F18B3
7487A7D9BF607BB2F3664506FFC626EBC0391FC556618D6941CAFE348EB28FADF3F1EFEF2FC2
8826957268216D96FE0D0BEF2F4556884B7EE25762D02DFA00D537D9EB3EBC7B3F0C2AD052F8
C2E86976E7630CBE08383DC0E813D870FFBD2A033E8CF2C32814439E240F668181540E7585C5
7A0C40464A2E644741A0C697820F5505A4C23C799EF8589DB545913CF7C7581CB1D54A770D8E
51011F1A056B80B55467F9CEA775C25A1585CC8971900291F64305A59A4E4F435E43191C94EB
2B35DF0D37360A9B5D15E9CD0655C286CDD7F815A5CE26CDE945A6D2FA6A0C240AE5716A2C0E
29EE785B12C2C55903CCDF72BC81921AD850BDF8632AC068976D38A597C50E065C00B2FA94CB
7D28C38C6479B30223F7DE715C63DCCCF9759240A6D2BC6D7DF502C07C6D06ACE15ADC4A84F6
2A4937B8B5E85963F835479F2C35B86504D18136DB502BEA94396D8C92F9F791DC20E4BEFECD
357ADD9249310FA3EB728EFF740695CB81525A3CB19208C9893739F376E90C31E6A4DF99F3FF
278C222CE2FC27C38369F0511A2A10C2D2D69A49A368210E497863A3CAD150AFCB1FD83ED7C0
BB2C42D494C28D9FD8972626420E01BC33B76A24084160BACFD7D5931E753EDAF09B9898824C
47B0CC2359DAFF842B1E31E84A265EACECFE59ED20EC0CF893304F4B3F39982AC2E7E1E509CE
0DB608B3065C99F8FFA93EC91EDA843FA8DC2FAD37BEB1482EAB2DA62358BA6E5FD590D209F1
ECFE2BF58C15C06118B0840A78892B6991DF6B2431EA0C63539283323B47C53D6CD169902A89
4128CE7464C2BE4F1424ED566ED2DDD729E8AA3960AEEACEAD51ACD423337FAF00EE7E9A0D75
91F0AFCD2C1FDD199B376ECEFB5579B8123C43E8ACFEF6A1D16797106B1131CA2CEDF469A46E
E788BA5FABFF8C3FD1819641D3BFFE2B43A8FC98BC2A9DD765997B63350806FC2B834500C48E
0D3DC1821C3FBA8C92C047A3A680A6435C538EC2750C3444F2610EABBFE96BD75FF5C8923780
B878805B7C7DE15627890FC78161E8C2DC10706465D4686699D7059DB4B7713FFFCC6C3E46A9
57F0344670B461137DB7BECA9412C20309E3D08DFE45425D3D8C6343A37EED8D99771DF13AA3
80D8FDACA661EC7D59E047BB2FF3A4CE89B8E52E6AC5874842D452E290F3410CED61FEEA8565
A7CA395BCA38EAFBE33E365F929CC36E6B120A2552C8FE3F9C94CB0B62B5C1FCEC64FFE71ED4
F891940626B8B232A2A813B33C124AD6EC87FA4D49A90E0E863412513AD5C79E50201C9EF18A
2A0A3B5AEBCCA1B9F2299B02C68B3B76A5E728AFCD1A4DC22ACF8AD74446E3AC0E0BA0B72FCE
E5668B1BE5D5E3725FAC8558F96843DB032EDAF2576E54111C4934A8B0A9F551D1B15E8A6485
659F70A63127ECC1AC02D58B55C41C8DAD4AC72DD486E3670DE6D53AB056B9EAE669915888A1
66BE5D53AF4DF210A90DF91F4C036EB845901D8E9321AEC8736228B7866F6F0F1177F48EEA53
B3022C65C6CA8AA08C9EED775A21BACA33CA842DB3EB7D5F1432CCECF58920B07754659A0C23
79C59733B7ECEB490843FC23ADA87F7AA1D5E4677E4267AECDD6715053BE9AC55A35711F0C48
AB32138994293E7380AF786BF395B3A14124B11C52F01D49DA379D816E2E14DD03AD413054E2
7C5E9DDD11AA67A3F2AF7E64CA7ED0A21362E39C9F96959D8222F024B30254AC4B80C74A6186
F22098000FC5A660F95D3708515A10C1CE9E2427F90795140F62562A4A4015B619406E035965
DFB0AA0D874CF8C4580820605F6F25255B064A55FC2CE63403E708AD28046881071B1F6D247F
767A3B3B24C01830BFEE6DC8C08754759EB071D85E15D19E2FCE1DC473D8F796835C59178FB3
E8CE5AD039145727CA2CAD403A24F0A6E86C78C67EDDD1EAFC7619A6A484FEA696CB74E51480
D9AE6CB4CE0A431F78833E4E1BCE7BB05E65BD0D2FE06399E64E56C657C66934E2A2E3D7A661
97C20C8165F5BEF09A38F6CDB0C2694AF76C70651885F0D579EEAA5E51711DE13302B3B046F7
E88A6AEF0118CFEB85E0F816832FCDBB0580FDD6BEC378DD753D97941AC195C67DC344E1D9C1
9E65072ECE4DC2E2AD193F426738B3890DC542FB84F5BC99A4845392A92DDB1B9FB29B3B2B5E
DFB5F8F7D399F3EA9B38C63107922EAFC6660C819F1FDD364655604855214542EBF1502A8B8D
3042E07546C0D3A8C1EE847471BC697F3394B068A64DEE0F4B6A61F9B3074ABC7622ED79CF07
029827FB4D992542D90CD660D3C28CDBB42A4944A92038367B4F0A07F36142FEFBEE7DF8B856
B3A9C33078E46C172DEC617FA440B31151079B80C21FD63F8DEF69F3C0BA2218F06287AC09BB
795E20EB9EA78212A9DCB8DC7837A69D67378A4E0E6C42860203C6F561AA0A17D8382EC4BD7A
09D0537946639AAAAC1804C8AB20788864B76655421874B0C7B927EBE51969878C0683800F41
8E4DA78EB4FB92AA74FDD6E27DAC96076E8E1574E7E7C69674F84E958EEAE7F5ACC382580F4F
06BF5E5495197C86CC53E8CD1BE0772737D6943BB5E3FE2049D095A9B0401BB3572E39DE7CE5
F9E5DA75BBDE9B34A95AE78B13EC98615CF4DD01974EEC450E6FF4B39325366AC43928A03878
90608F467A74D765E9F2D33A3E0B6FA03A8AB79E9CAD4C9A5259F25A44C385A0E2E3940F6F2D
08D2643E6DE999324A4C81951674DAFCF9643C5B902947E40E4AFA9773F307933ACD65D60D24
575DEA3A5EC098319AEF3BA55AFC926B035C2E1E966CC15557ADEFD1F432629A9A6020BF4EF4
3E6B7F1D42A9531E2270F450D688C3C6AE1A801EC09FC65997CC144F92383D9E133305B4CEC2
5A96030D7AA1476B76196F3E34E6707BD3A53D185BCEE0D098E3095A7AF7AC5A8AE7F4E392B2
B213677DB993D69003509F9E5E030F2F423DF0C5239806C6A59B03FA8807CA832252832F0977
BE269DE3B2C0C49218DD138DE32101195C39483C27953512854E96325FDAF0128DF72FD479A5
0AD928833318BAF87D0F1CE9CFC006CD39001018F160D931276626D33B3A1A8E025CFBB31341
5CC01311B419AD10059FA43AE936EBCD34F629810F80C4B6FDA4305C5BC0938DDAFB83A8450A
39E6EDBFFE16B92920EB70B40806C8FE8DCD943D427EDD0B17185DF761E32F0997C88D040378
1D4249E3CE8EDABB0ED7A4E95DAA3FC2E420BADBDBC1C236B59B6A466E8913A6B237C6FD42E7
FA46F73500A794FF7E87EB3E98359716A2B530F114296BBCDB2B072EFF8C133C3F3319FBFFC8
616AE1998F1D22253DC37361D15F92A6680F6FA0514EE5A9C7059523B73346651A4787B8EF7A
34E792F4AAEFD3213C300E510F2A63BE15E2ECD028253A8B62B621EA5F18A35911E8F820A7AB
A051E8F06BAECDA5829844F69858442664E971FBA63A507B7140949EFAB303F1DA7253E86B23
446DA5C66E7C0504439A74B4888CE9AFB25A8AA47696176B37F024FBFD9F07C2427A64B9D204
DB3C92FE59C57E80BC37B97B10A0AF2FF86F569E1E8474A14C7E3CE4AD60BE45EA30DFE6800A
22D3D4BC2B9238BBC6FF6604C66E31EBC41BB9EC3EB2C7424825DBDB6627AEB44C9D65DAE235
1043B6167AC6655D04B2180989C2C0E0AFC3117C3916CEEEF4B4A1686AD7C0A77A31F94CC2EE
995201C6404B870B30CC1FEFA6199BCF28209966E1274BFF9EDE9A6D8B736C364EC1AE31198F
B80087A60E692D5A1C46D31D0561B21510C70C1FE8A21B289285C0EB9C537227238F0773427B
D8F833DDD7DEC6827FF0285C12E8B0553F12867C3F660006AF6D57799A934E81CE0D801530D2
6023566A68F1A42708CD177FC033DA35AAD70935DB7AC4AC3782FB0133EE9138E7B0FEC1AE19
F661E6DFB980B380D69968A1ECF40382ACCE343C983EF02ED87BBD7E3675AA051F9995DA62AD
44944D64B11D048FA59DDBDA65BB1EB0B80F133C6F1D1F97106A29A46DEDC6C652C3D7CDC7C1
33CEA53B07CBB1C16FAA2B25F5BCCBDC95B8ADB51751A5C1C613F3C5B9CF37AC4CD3D2389AC3
99F4B674A7EFBB0F5716A9E79EB7C7BD6E336866286D3AED6276682DAC609A864ABE27445134
C893A57D982CE00AFBA2433340A7F502129CA15A006790170024EE29115CEFB82FCE5CD71814
B20395434623FC9D5755C5942C30C816C170368229D011D28FC7F271E5A04A8E645EA3940471
16ED76A9DABE4FD1C6C91958B4C059AF859F6194BB02B165CF2971713B050561C4D4B418F7DC
A4E95A64D31973911C2E5953167CBCE5BDAE4C3F45A41B6D5053EE4DE4AF28FB49E8A5D31B35
2CF821A7A51E47980B11F6DF36C0434190C11CE7800EB89E4D7F0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndFont
%%BeginFont: CMMI7
%!PS-AdobeFont-1.0: CMMI7 003.002
%%Title: CMMI7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMMI7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMMI7 known{/CMMI7 findfont dup/UniqueID known{dup
/UniqueID get 5087382 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI7 def
/FontBBox {-1 -250 1171 750 }readonly def
/UniqueID 5087382 def
/PaintType 0 def
/FontInfo 10 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI7.) readonly def
 /FullName (CMMI7) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle -14.04 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
 /ascent 750 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /alpha put
dup 12 /beta put
dup 13 /gamma put
dup 14 /delta put
dup 15 /epsilon1 put
dup 16 /zeta put
dup 17 /eta put
dup 18 /theta put
dup 19 /iota put
dup 20 /kappa put
dup 21 /lambda put
dup 22 /mu put
dup 23 /nu put
dup 24 /xi put
dup 25 /pi put
dup 26 /rho put
dup 27 /sigma put
dup 28 /tau put
dup 29 /upsilon put
dup 30 /phi put
dup 31 /chi put
dup 32 /psi put
dup 33 /omega put
dup 34 /epsilon put
dup 35 /theta1 put
dup 36 /pi1 put
dup 37 /rho1 put
dup 38 /sigma1 put
dup 39 /phi1 put
dup 40 /arrowlefttophalf put
dup 41 /arrowleftbothalf put
dup 42 /arrowrighttophalf put
dup 43 /arrowrightbothalf put
dup 44 /arrowhookleft put
dup 45 /arrowhookright put
dup 46 /triangleright put
dup 47 /triangleleft put
dup 48 /zerooldstyle put
dup 49 /oneoldstyle put
dup 50 /twooldstyle put
dup 51 /threeoldstyle put
dup 52 /fouroldstyle put
dup 53 /fiveoldstyle put
dup 54 /sixoldstyle put
dup 55 /sevenoldstyle put
dup 56 /eightoldstyle put
dup 57 /nineoldstyle put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 63 /star put
dup 64 /partialdiff put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /flat put
dup 92 /natural put
dup 93 /sharp put
dup 94 /slurbelow put
dup 95 /slurabove put
dup 96 /lscript put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /dotlessi put
dup 124 /dotlessj put
dup 125 /weierstrass put
dup 126 /vector put
dup 127 /tie put
dup 128 /psi put
dup 160 /space put
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /alpha put
dup 175 /beta put
dup 176 /gamma put
dup 177 /delta put
dup 178 /epsilon1 put
dup 179 /zeta put
dup 180 /eta put
dup 181 /theta put
dup 182 /iota put
dup 183 /kappa put
dup 184 /lambda put
dup 185 /mu put
dup 186 /nu put
dup 187 /xi put
dup 188 /pi put
dup 189 /rho put
dup 190 /sigma put
dup 191 /tau put
dup 192 /upsilon put
dup 193 /phi put
dup 194 /chi put
dup 195 /psi put
dup 196 /tie put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C545D25FE19253
9D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB47934F62D1F46E8671F6290D6
FFF601D4937BF71C22D60FB800A15796421E3AA772C500501D8B10C0093F6467C553250F7C27
B2C3D893772614A846374A85BC4EBEC0B0A89C4C161C3956ECE25274B962C854E535F418279F
E26D8F83E38C5C89974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F024
867411453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBBAAB71645535A2B6F0F2245
8E1429F4A67307E01F0BCF6F337E0E2AD89658D880B04C26306F8179C8121B958459B923AC3B
05B594D8AB95F75870019130442FD29578D44F5690BC7281357A5041C8A809A59D0DEE108E2A
07D406656BC74A9F3317CB887E71231846B2ECAA341F8692ACC2D14ABABDFBCAC6F35858355F
1D3228B0223EC73AC56F3C987464DB829F243E304F4C59CDE3EF6EB53A4EF9BA91510CB89A34
07261F58A2AE66880BA98FC1EF546112892494C85A2C39F9DCCAC5766725894A7AA148E94236
0AE64BF3A4F1F9F0A0D0C1AAFDC4D50C52233AA595B7D0CE557D4A01279029977FFC0A0A70CE
49E478E1AEF488A4D8BD4114A926D90CB46F98444851CC1D2DC1972FFF3E90DB4A4A81EBE7FC
EB6C69D380A5EE9647B18AB897A594DE74C88F232BF32DD00046A4380ECB8AFFAC4B002C5C2A
AC563301BD897A5A78B0CA3A9C1AF8DC621295C8347DBA931CAF74770D36B5A83ACEF1AC37A6
63C1F2D044D5B33F5DB4AA98C11D4724DF232B9357D4608CB212A2560C933A35268DB88BB3D3
699893F78676BCAD44FC236F12138C5283068C009DB5A8BFFE04BA77D8369F8FEB0C40F635D0
54BDC5352640FC80CF72625850BBF8012F7729CC93DEF2977844ECFE11788F40E38DA7CB8CE4
D03F54ECA7E2DC5D6AE90278331561127E08C831141163F73F18EE35A0213EC9578F10EAE0F4
6FAD84C4DC2C6540BB80A97C5DDF726899A5119E6398D10FFC59ED145F70A4A87A2C9AD6127E
87C7119AC3D8DD6B634B2ECB59D298276CDDFD62701966E35BD29FAB919190B51028F27ACE06
34879FCE370AAD73E927BE33C99FFBE2E62EA291AFA9CAB2E25DDAF8057381370591F43A6445
6C9F65633F5DCDC63708B66BC891BD626F0DF84C279D61A2F21A9D0E69115553486A966C8A0E
0047E64BE96891DC448FD95C318F1A8A58B51324D140E15B826CA5A59732493E6D85166915BF
4D4F635404CFA8DE394D064DB6905C2D2EB09206574236A4AE8E3977A4A560013424C6557DF3
8F93C8AC0BF2407D4AFD1B4DA0ADB77A8CFB364DCBE6C556F9BFF8592CDF9961E3DD19AC27DC
B21D54D76C2C56E4BE6E0A07451BA9970D09F1EC2CF74E22984040C2FF6F91D563DE6BF3FE0E
468BC604FFDC6184BA82EEB41724EA884AB993BA6A8E2917AE83E971EE0277CA8FE2889AC5A6
94D95A3A99EF13CDEF5844B63B06D9DCC158778E17EC01284E9F94835CC84A30EDA707C9C547
22A60FA7C1C6F8E58F9717ED2A0C69E79AE0DEF8D9213D3EC30A49EF762D306FBB26BA2BE8CB
96DE9459DD0AB200FBC98CB6AF00F9D7A11B6FADA33D5260AC992D85BCD221952FFB0DD4C51E
8CFDA97649ACCA932EE298FD4BC755FBE960990130553E6A58929136AEAE0D9D8461899CAD39
CEC68C923EDE858C89A80280AA19576850A4C17256BF1823001383B110F97CCBAD6ECEC3B11E
39917B7A56B655E7A23F057F899F7E930E9459A8E3BB214B2C6FB3FC3CB6D2C0EFD11F24DBC3
305AE378FBED9AA9A79889EC9360E71873F6CC224F5F2D1F805A16A4B827C51E12923A080E22
C316682A05685E090D1B9F6B11C2988CE0BFEB1AA635356F0D237DC947DAD94A0D5351F058BA
6638A8A8365918C5CBAB7CFEDCEDB9FF7612ED23C2B5B40F766934201435DCD1829D5E3E96A3
27B69235A7D50959476258473307084466252F25F2AA418ACA2DCB97094964222702CD732116
4CCFE2E1F7A245FD601220CCC1DCCCC5E63930F400B61A38AB3B5D463AB3F8753E39D4722B9C
F8A8262C748E3454AC6D7A0AB4D3EFEEBD2886674ABCF1AEAE0AE0E053C70C19A6739EB3DB3A
B2ED7CB62CC889ED622D229DA7D3FE978C6B8D10880EAB2DF006A8B1C258067127D1E9606C81
735B0EC4CE8D5FAB82DA12442FF32F6D91DB14EBA206AF5CBE6980E689C02C8B124FA96BD1A2
C103D6C536C70E2814AF25ACFC30E134D63EB6C808CADC0B7927A44B4BC0F808CBF6E7651B73
B1300B38621DAB2C0397163E212EF3740AE7E11EC61AFDE0348C54DA7A32E8B1A5B34B69F2E3
243ADD8B20062D50CFC80B76B34A5F2BC3C7511A01746104287266B6202EC454DD0213D89829
33BECD2CFFD8FA5A94D49BD562A98B410938FE9186F82663FBFE3CB4E95AE983990D6E95AF19
7226F907939274187FEBE2ECBAB7D1CF7C00914B224CA21AB15AAB161512893319B10FA554E5
4ACBE826ABCD965D6F51C57AAE3C1207C76A869648C5618B5715F7B97B020AE8469AC8227654
44A42031A66ABC7F4D3AB3C43414070C65512D0E1151453D0D21D6A811EB404094783FE26703
79515EFF5F94D835884F2D54EBF1E5ABA3DFCECA0ECC9B65263029ADFF5D3612DBE2B505550D
AC8C1D5605427E16D2B8D514A5DC3F4526689BA2C6779E874E760A7061EFEBA2D2F59412A913
9BE7C62503C118CC2B4DDAD3167B81C9DA166F83C51D6A5DBC4CD435F1ECC50227FC048C21DF
58B3544F2E2EA6A5255BC910E2884486E0D156FB35849CCF3D4A66F89254E2DB3985E30509C5
35C522DB740EB4E19B5AB4E2358DBC8723BE4407E39603978C5ABF6F93245C3AC10CEE59735B
95201C54631B7C4B374A2DF5B0AC3D4BFBA1CF955EF441B3DD0B792E272B6FDD095F77187F2D
4515DCA52AC2F2446D89F9719B01F5869ED18CD3BBADBB8199F11AA7856EF965E040F0C437D5
57B4C983FCF415D31E30769B9AB36EAAEDFCA917F326EF3ABFA9A2094F02D2148B5428667C15
2C3C55B248E5AA0B920EF2C723AB546286F15B78FE57601D2B6A29D074317675B28B96DF0AB8
B4796DFC89BB34324AB6FD7DCEE148C0A6DB342EC8C770146D49DA9B6EC638D50D2908794979
56180673B64E86FCD313800168BF8E4A027866AB39A289EF2D30B7073627E0A519E1CF116CA2
B31F869B0A84FF864E4FEA18DA2378610009CA4F549E0856E52DBB28B7214AB5B75ABE7958DF
09BDA8215DAF7AD7DC40D72EB680A9F9150C35ED8900CF2D8F93444CB4355F72D948E5E9AD71
6782A7AF2F1E72E7A78210E867CDAF5025938B7820AC64EABF96C078A0D441FD63EBC598CABA
CFA1A2FC5964DD28842A3A9EF86F8D646088A2A2414DFA5062848C862D6EA49187E9AF740492
5D23B5A589C66C6726C9D365A897AD0FE89662356413D12A4F450935900DB1555468FA19DD6C
76BF39BB1B5F2901F9D419CC2470439B9AC6EB1D102BCC28B84D8E09D5BCDA50FB568B924F70
A1CAC774634360BAD5A0E2309B8EC4B280AE3835AC594128C527E99288314A9A0B290C1AAF13
94D33DCA6E3F45708E8EE1617111A28A5CAFF9EA2729CB5F34D91DBE7D4B59A1AF2BB564D63E
5E63DE568B36C61230455AC6742CC8FD14131929AC69F603657F204F1FB3ADD39F356E11A61B
69384235FE2AE6C6849778E06EBD401FC145FB024450FF3EBAA065241449F5DBEC5EB86ED9C0
610B59AA3E15F8A1A26B23E0AE773FC170C3E1B4FFCD93C3FDE174B59D161DDBC0215F3120BC
D3C46472B27BA5FC640C92E32C93D240F25D2BD8B691BD8A43DB0F7AB9F56E117B04E93052EC
55AEBF4BF18C1C2C26D581DAE91B1FB05C1AC6AD90DCE4D0A2314C42B0ABCF12234AE4B201B5
F0C0F3FEC3F1B81D7017173015CD201400CE58854A1211914B375A4C442261A395F466E64931
A81C3FD46A74C327C9383A2F288C499E47A19FDA070600CAB5368AC7041987980D3C832BA1B2
A972F620F89C789ED86A81CB3D88B47FAFBB39BFE57AC349BE2104A6C6B6721165474EBF584E
70418996340655735D623B6791011E8D2D4C3AE78CF72F15ACDAAECC701361D896080F3AE3D0
3178F9C794F2C8E460910656C095F1264545029F813FB66310180ED6F8140C43DB97C7993737
B22D60C7D92404AFAD4D76DF07EA1DEA167CB3852673C48CCE0CAE365821C467236E64CF875B
937711E484816E288464D98E976FD46F1FF7A75F85EC946F320EE33CDDBBAA090288B11CC70D
C10F021E87784D9049BF5E0ABDF4AD5B24644454EA5AD610F90CD2C36AC4B7E08293697C4F2E
E7453977625302BA73C542077A90E1D69AC8B421B59A3267F002A4D6FC1436A810E0DBCD6207
6372981FB9F2DB91571A310E7F4122DF6E58A2CCF131B501BB34856E91814B1DC14F432D164E
41A9E13D391767353DED575E78CDCC28057881B4C4FFDA9E457F1EB0C1DA743817107D4E9FF4
D6498E44CA8494929889BFAB9AA51FBF21819018C902DE0580225D7D01B64614BFC5C091D945
541332C86D52693C09A6C27233611630C7EBC5211E66E292C7E805BB8A539C2657157B561BD6
00AE06DB5FFF0DAA0EE0C4A7B52F979957630A810DE53193D8359F799138B31B2F0CBAD60656
BAE3AFA7F4D9A7B9C3F281829D102A5E467D1A1F233F0C501BE68EB8802D06FCEF7E961A6DC3
7E6AF0949C920846761C56C6201F894BF0D82E10075C2759A2F6C68EF45A828A9F138D1D8988
D67CE6123926079CBDC50EDE6672370FE1B68051BC7E6EB72D204C35895112E5ED2F5B8A02BD
1C185B9382804F527565A717FC3EE547C4CF0BA57A00FAAF6A50CBAF2C6A57E781941652DAAE
7537B4710DECBBF86A6D6C0A868A9A339F21DCF01939729284EB1A8D6909E9106075C43821B2
35241AB36304A8F9555599FC4FCA3B7E7DDBA80FB811F8643E848AC81A08CA0ECC96F90D1F67
BABE0705016C55FC6F76A5FD8A9F2B11B32251257A3DC424A8550001753CB7154A36524797F6
CAB4DCCC87766DDEE4B31725F5F9C3BB9FB3D2145DAC3D50437D84FCDC5F32DCC7D46BFDF514
1326EBC6020BE93B65B14737D79205A54996F88CBD305166C12FBA91F6098AFB1F19DFEF9B9E
652153E27C328E9346D03B8DD6906E1580333AF5476A9087F7297E6B959ACCD94D27418BA7DB
523E431CBADF4D5E7DFA5D86644C4275B8287798C8C52620D5474A2A0FEFD4BE538D307C14E8
4378C66FBFA5694E8C804B404E40988CEB1498F766AFC4E4DDF98332DEB0A4C269D672A137D1
0586251CA213788AD1CD34A5378BED38CBB7ED8480B187C8A2356B7ED53AFEBD9D44777022AB
3B6AF1B04104FAAD09CE6053525CB659040EB12ED2774EE017FD43B1916BE57913AB7EDE7548
23E928380ECF4E37B320760FDF2F49171E0B673BE893304D661A7BD892FB46331D09938D8353
77486E707D44B130ED07FAEBF479F5E46166A48380A89C41333F45F68E2E52109F420E01DF05
E581970563CF557C4FF2A82BB9551D24B472D13DD9878990AE1B6E90FDB4E73560CC95A32CE0
E12FD4F05E723B353F1A39CAD8F00F3E519C4ED7475A690783ACDFF79C91679786703D7B86D3
5F0FC89930D448CD3E28CBB47557BDD3A57A7C9B54CCB4E356494DE3AF662ADFA38436C21507
CC63E7AEDA5E3C979C5235CD762D77AE2AE54D0FD88F88F9F396318256A2A60C69873FE4A282
4A426685A0199DEB1D52A60207697BE44823B434680B288501A01B67C57EBC0A38BE2DD68ED7
EA85BDCD1440F8287DEC9B18FC89E616549C06540B4D979C8450ADB18260EF70D488A1607A8C
7BFE279B9C88780C89EF152B9A920ACB173CEE3C74D792394E9AD9C1CCDF6C49481DA0DD739D
C33DEF73650FB0CCE2CC0417F67FA4314ACEAAA92A8DD7B0BFA94C5B99B7C48D732A6367F540
D87E6D6B6676A84338DDCAC71384860D0D3954705A408F5E1183CCC603A784A0693770B7AB32
B69582514CABB337B2A470C00DB7166440E729525DC1FF683FDA5B6D85703F23EC78A397302C
0477E63F6F7AB3F29BB7DC0849E2754E42480F27EC01B3F08E17C55657AA158C215836D4659A
58BBF32F7F7D73F879CD9D9AED28DB7D393189EDBD30C0E473D99888C406F7750589E6F417E7
B073C7A3470D79885CA41743F24A00A0298126DFC06D4D89251B04E3A0CCBF079A5C0441BFC1
D0CCF2377043ACA0A34CA712A54A42B930F5F611F59B527EF9A36DFF363B838EAD097650E229
1347AFFCE3E55018250FB2665D258F4F74817F8FB9E5E3186C66BC416B07E2A1123EC9D69F85
E1B51F7DB640885FCFB7B2E3FF05A9F3571426E7A8290523F9CED780B09A8CD6FB2BA11724C9
9032E6695F99A9429D7A7604EF601C5D43E9C75D632BE88081D18CBA84B4052A83CAF9B5AEE5
4D1B30B9BC86F7A1D75CCDC8FE066FC61FDBF38EF36DBA560AA92CA5545BBCF306A3D9D66184
EF27C5728EDABED9B7CE3D2BA02EE9745FB5D22C2780A6C25029DAF3D0A79E722AD311E13457
8570D724A00B1C557B1D2D8CB6A8D18242891BF3209F8C861A71DAA099A20A61604FCC7C71E3
89649805A1DEE1CE33E91A03D3C3BA24E1EA2FF37CD24D52FAB72D608C1BE0AF0CA93B36E64D
FA7CC59FC3677EF280F7592075AA5BB16CF2286FBCD9FF06D481671A996C450FEC7793B7B8C1
D6842B808C7F70F464DAB3586C148F4458751F14A29E470BB91E62324D0265AD0DE5892A65D7
D7F8DF6952DB587838B941E897456E5312955C5215A106A0799745D3E10F819BC20399C2831B
6ACFFC54393118EF5093A772AFB6D9F45D547CC4D17530997AE0574D8A53E73DB0909303F36E
1B01DD1A83D26B9BF99BFEC48D0865D48D2CE88DC4D5F81F41A3D6469DD86BB42F625CF5E3E8
B27649DDF7E6C902B70B03A15112DE12F39D0144B1D4EAF3FB6BF87396A2683EB69A6085919F
618DA950B0287E6A2550AE86B8C8C93E0F0AB547576C954C81D13F02999D87E4B5F0F9A6F604
DD91A926C18A6875F50026BD1E41018624108C828DD425FA8E39635C500C22472822DE0CC5E2
AAF9FDF5B586E1EC05C9C0C11495D210007A85041C8C9F972B2293E4801BB814DAB883AA56E2
488A9992F5DA19B58D3147DA9FF748788AE2590FBCE954B2CDD2ABC90173902DC370538C06AB
C143B3B2A0713A0A82033939786563065D52D37B7A43B10387BA3F794FBA53D62EE62BE05423
60FC6022D8208109C66B919C6B32419B3EE5261C835EB2DDE819527AD13D661189E99629F867
6A41DD93277887624250643CAFE3A55ED28E2CD3210FC3A176D5E56DD80B4A2191B12A3CAEB1
2F53B202C8C2023D4DCC397D581D5BDB5233E1FA41322B4E8364EB22E2760046360945F5925B
EF2E0FA1CED35A4E4E82441B1DE3C2E71F6818158CA37C1F12F04BE73E35D28B2E35284BE1FA
15D33E2B0786832B34BB79D540A815DE059D8ED042D5EE5B591FB8BC94F509AC1D2D60FC118C
95899491F1CD9121A5A72D7CA9F552564D7236096424116A8DF7AB77AE651A9FBAAD8DED2825
2E602EF6F20D74C0930A6018F1C87F889EE8F6B48F6E31E568200F6E7AD1DB65529DE080236E
F96DE414DE4FB002FED9861877C2774F752A4EC7F80E6B0078638A9D99FF56A3D4C139AC48C2
7138B032C9A4CF1133F1A2CEF2F2D77FD59BF4A2832E81539A062BC81740260FBD8A915CC4D1
5DC09D6257DFA121A24EDEA570D91561C3EE3092668FBC6C8FDD6EBBD30A45448D0CB47007E8
43723AF1B0F31D11E5D4EC5110043DA3E40091E814E2CC9D57B51B0316387B1E916D4355D8B7
3BB75174FE1BE39D5BAE8A5ADFAA12116AC69AB47C590351341FC8E6433C155A65CFD8EE176F
E4E5FA4485761FF55226CA44E565D115026B9763169D6BA9283C269D2E3EC1DB025290B1A8BF
F24B020D7DCA0782E7835504AA73F646FA4C547A78AAA333469FAF536FB9508C5F7EA9663A29
0176B3E0B546690BAE386C5015C77370504EEE4A81F494CDB21B6C976164FC320F322CB6B2DA
0E159107AEF1A76C8EDAF00564555F289279B70ADCA1FC32E50F7440F4CB960ECEDA3CDBCD9E
D005AE855D483B1A83765D1E0D1EB07F3114A037FD338209D0C4B93E527C3FDBE72A6FE453F0
03579B43CCFE086CFEF823DE17CBBD16C66683BE3844408300FB93F99D78494432E4D0C3AEBB
B6540E7EB3B2ED049CAC98624D9D3127D5E2C4956A726047433299702239D3951CBB9D91FE5A
3FCD13F891D73443B53CEF5FA897BB4B16918468A17CBE3F97750934805C0A4BC91CF69E690E
ECC7ABC7FD34E3DABEF0569A3973A9E5F2FF8B1867AB573B1F2D9AABC7384C19378CAD184E14
2DC99243D5F8211C9959B50B581D372AD585BB4189F5F25EF8A4F6D27D088DC9A3528941C913
7C6A49B2A131C54728019B778BCA6537E8E4DC12137C0D09D9F2D73B4BE83A60538A9052331A
620CDF23309624BB990EAD3AE2864A7B4C3E39B4B7901408DCBDC5CFED5397756E6513EF04C9
47A77FEE6A1E802834A4CEFE9617644B29C7EEA048A1FD252A5E3A2A8E0385C49F860D04143C
77E7C0F4C9A5E9769833C7FAD4FB9603FA5CAFCB0321CFA3E7E0B8A3A8FEAF22D367EEBCC0FC
20D60DAA2167BC2938ED47367D85541DAE7E8729B716C606B4CB89BE34F1948A36F07F2E64F5
3696F3FF980A2C4F0A1BC315BA943B4EB24FE87AD0E7208DA19C0D3218EE1DBCF4506D806C4F
E42AE61B50DB1AFFD13129F6F6A5DBE0ACFEAC01336045250D50ED31B6898E92E8E8AE7D9262
97E5666B98E63E60BA37AB6645A8F733E90616AE2508FCF11A18CBEDA7AB9E734410D0BFBA0D
C794E7FEBF9FD06EDE8005D9B815234C32EFD73587351A6C4BDAACC3421EF2AC93EF953E7E6B
88FC428775B7470BF65060E64A15CF5C115FF9C056842B07E6D6813D56E2584273230485299A
43C0ACABBC2431F0C78EFDA4EF4B9516358D06EB2386AF8FA14FD752B618838543529CA6C3C9
D47AC78506AA6EA8863EE08FFD213EE8F2529B62919B4EB0FC60BDDC717CD3DAAE0EAB613E64
B649FC412EEA5D451C471145FE8803BE1717D7FD95003D951505BE01D5755D98E17604364B72
714DF4DF7B1F4B1E4AC5ED81223733603BD876904123B650DFC28B046DAF32AD015BD469B726
06E0E4E2E101E9A3EB01BAD6E1FC28557FD152149E2AA456D28F1771D46E1C66967D5AD164A9
3E985B6FDE66F72B814C7776F5E95EF89CD5A1036C1C4E592AA633B8842AE79670D266F13F38
A3862D0DA8AE104153139CB32F2DE65CD7EE5E2AA126C9DF95323001767FCD5C736380FCFA71
A5705E481A5D1AD43E1A52A0A3EA57C79A20290F2C5BEC8A1546377824D2C3D444A0D8443EC8
6F147C74FF7D46FDCAD020BDE9012E2D881AC67A975BD3EB129201881A69A14A73C0D69349ED
CEB11EF8679321E9B430C992B693E5CB664A96A96CBFD2A0D85A6646E73B14EA269A6F4360D5
46CC4B209243B861F8DF412390C2B311118873FBBA08600B412E92BF7D2A99F64F6748C0CB1C
41EB348DE2CEECA11A4BC824C08D66B9CF4794A4FE2089AEEC1133F6AE941E49D5350427513F
0228BD939F7E20EE614A02DCABB58F707FED08403712D3C0DD89B8A589419E21E97451666EC9
57ECB2B85EDA0069C9F2D2024798B0490287BB046C348C5E465C1ABABD4CDC55AE0655E6EA16
4D9C5927753AE5FCA143F5E68A0833C639C1BEA3453B29EE19201D09D4C3E49559FEA4DE15AF
0C8043BCF45C956A2F5B5A8A69330C4CA411C8D80B12FA4C6ED55F4CEB631CD1786C9EAFCC8F
5204D1F3AC571CF3025D92CA3C9099CEF4B97986FEDC2A5ECF74B22A400F82F9D6F3BF69B28D
9A0E8AF32ACFEB52E41A8D2B739E9D5B587FF9A3B9AF04AF51A1B0FC9C65F1BD03B9DD5522D4
1A37F23088CD83D730918B2224DF710367F9FBD7623FA51DDB3C79A0B949B3773AE85699D2B8
79D027CF0CBF91A0EA7F57331328A5AA272840CCB9D6B6A7C9034BEF155AAD29A049B18791C0
0E084E0D7C896CB406E5CF3CA64CA072D1C401B6D58C51954C0D6E3A5D93E683477F99E1305A
B4EBE7ADF8814A913AE41E1A84819F9EACD37951638EA88D462552467725EC4E01C4B124B221
3086DBCBE68A3EDA3B443E85273DE32C5558746D3D2FB6DB7B04C5C48741C21EF9B9FD2BC21A
EE5AE81AC5A7A2C2AC19D2CCD3B6D983811B627F294A9570FDA3DB78163F25699AAEC2F54ED7
C86A2605E811BA6AF18C266864B5315DC016680611EBB0D030417C8D4A54A626378DB354532F
864972FE0752C46D21D1DDDBDC0DDE25CC2CBFE5FC9AFCA9B1B668675117EBA029EA44BF0CAE
A5B7673891E6FF7C5C187236E22305F9C0D219C35D711F5FAD31875F45E2788CF38942C4AB9E
988451C591D1B2A659E7A30B472DE06F4E9F7534FCE4D982B4F1FCB09208D92EC17EF5398B9B
7FE4764662EB7CDC0F4B9F3DCEDDCBEDA3A4DF0A20C575085D85CB236EC4BE7A0A8AF8921ACC
A2073CF3F0D63C4EDFFA803800B5D3A20343C7D53115A6DA14714EFF62321CB6133DEF3831A2
D8EE5D365942E0C7C9F23B7ACB91335C086429B4C1ACF5821C62000B85B8D4DF905DF47FED56
AE48555139EDF88DEFDA5BD72BCB576B32903A29880385387A94B64B284621513C20C2A477F9
51C0B4E67036770BC97EC65425252769CE7D4D4F4D95A48BEEF9B891314A64EE97460B317229
1CB82FAE1550B528482D34B955ECD546FF6EB16AEB938A1FE03061347B7E886810D73DD1FF80
BF4EF7F21C878251438F05B3EA1FDAD6AE5B9FBAAC7CD1D3CD08933B8C7D598167AFBA88070D
215F7BE5EBD794662A40E010BAE5904CA0EA36B5EA2FB4B04AC8F67087C5967B9FD317111870
1E4398BB5DBF3B8C4432F7BBAC75E45B12808517E4CB025A50FA2346C698D2E654982367BBFB
0F1E489DB1AD5E18AD7064AF4AC3B21EA86481144A29F5FBE1021CD70247D5BD0D7CBAD7EE15
0B106AA32CD4F33BE8DA68F6EC75C20018F71371C12F13360F88FC60771B0EA933D9035D1B06
90F4CEAB5B09EAF963D27A6EFA9AD4E859E858FC0C286A43A4E0C9E9FF04EEC585289C3DE981
550AF41FEFF522DCC34CB0C69E17A074031B8E79AF7A3859A81F5854F68206423967FF1C0376
B5F92C49EAB0EE901DC10341DE0240946BADCE1C5D9100979075B97B2874C59ED03E57A328CC
10D6CF09FEC40A0FCFA669812BEFA950F740433D3FDC500DE421F4F048E81F48F0B206EF9283
2F4C9B026E1B0BCDAAC900B33241CD399630AEDC49CAEF5144F07492529B29CF68C38F11BB8D
E3BA0BE1C308F831626614B27420C706868AB9476ECC822894F71B33B4E6CD668D8529E11610
35A34A3F1F3C32AED7D591411C6CBE1FC757A13C64A7D18A8CA591AF3D3C9FB0964C9B914D98
887F785D66225CFC5ED11B60DC0FD25C127EEA5288054AD8C2F40EA491DE3940BDE5E92F7F83
D960DDAA1C5A2609A61A4AC70392276E7992B54B9FB8CAA5813937DC040C9BF08CACC221E0BC
88FFAB2DFEE3ACDA7B9DA9D394053CE5A37C6013582432F9A0CF3A11FA3C0C1A13BD31044F98
66BD008AA5BEF09A1A96D43FC80DA3F04C2B974A3E514AD245D342A1E0A37F242A86EABF3265
10D91CA012018E3A89D5AC46D2CF07916C800DE1E6F4C553DFC2CEF05B0BBA9698CA9210F421
6284CA57071B8E00AE4421B2535222F5FE849B54C33595F7D65D32CE0835E9BD9011FF4DECBA
DECD942677070A1B050F75B4F312320D36C67FA53C79A9EEC072350B574FE2CEA2274F546DB8
1F87B4EB0244FA4357AF72301FD4EE63859666547B87CE6215DA34A55591830B821E03394493
009753FF7F7A3710A833F7DEF5326FAACE7B14C132E7B2A082BC0DDA50299DD7AEA22546039C
E67D0B60131165F4E3362344972CB507D2651DC1FA912D9918C27C0A87202EDD58730CF45ECF
CB99C9EED362F6FC12A35CB663A301F2C54FCCC13490EE113D7D87D48124EF0CAC4DE18DCEB1
A3BD707E42A74D16D04296D095466D73EDD4518C4DAA8FE956E04F292A9ED1481EFF3C6EF0B2
C8BE03BF80F91638639E473D937FD0AA35572A99BDC8C42D81D2A40202D42E1C6E4A993FF649
8D8D899DF87D2487E60135208FDA85D6D8A625FB229ABD48E0659B783F69B267581833A721D1
8DCBF291B51EBF2C8CEE72D3921689E5AA1CCC4DE735BFFE4C24F2BF946142FD76CA4202DC5D
F681C1E6E513C1D61335EEBD762E54CD850387F98626B8AB1D88E1A335BC5D80D25212A6A6E9
291D92B8BA19874EF324497B4C948EDA5F958D079F1BB83AE1F77089037D1F284CF180FA273F
54E4BF1394D5F6D65882B8BD986087AC50965FF365DF162E73A9B39E864A8AF5284D01C27264
8B7B5426141F64CC929DC464CACCAC2CD611BE7AA74E0D66E4585BDDB8AD27A0B21504A6F6C8
BA8992055FC8B5E62C98AF956A0FB7C6E32B885C2656E98B766AEBDF8D46976CD8335A459B3C
4906AD82DCD2C48FBE9AE9EB8A90CCBD19E73A1EC101E5DAF2E7DABD8AF0B3605076C72163DA
B24811C3734CD5B9C2F210782A62F2BB5266CF28C06836BDF5B47672B8D3560A9E114A1E40D0
0E83883CAF9A19877F8A9EB4B8A24314B558661C443FA8CBDD8EB5885ECDAE2BE452EA79602E
380B647B5EDD06EFB1D97BA59123E38740A470425F54E2A59A41D030BB29C9613B23C7886FB1
5CBA2D9B9EBF4BF0CE6867F12959FEE2542E16DE4325E774180FCDDE3241D242763173FA8D60
02716043262FE1635A5D1D8593CB27297C1E27CA4402E76AA598BAA32BEA1088CE5177B2A57D
4C0EA7A4F1873C71362E33F41C04BAC92325FC8884F8B089B5DB993391B4CF03B91252611ADA
781B98C149EED85EB1D3F875C705A953DD286C4F1AA0F4084EED921DF2053658E7646AF0AF86
F722E655D6C6191AF27963FE2C540DA918F959502AA7034D07392027F4E06AB0308B284473BB
966DDFEB56D18A8D03DD87D694B9B23F5AD296CD976B6049A56784E26A8942DF5988EE225E01
2B8682805D5D3CFEB5900F95DF3A71BC9F48ED288230D0413A8D1A581E54567D554642C18CDD
3217D4131025EC08D4FEF6375A97EA6013DC48D6AE7AAB1131C3D144C3FCD7692F07A7C391DC
D0BAD244EE122EDC39FF4DBC037F784D2350B479A133FFA5EDD7D8E9548BB9B0FE15696022B2
476BCAC3CD908FE29EA6F7D5018803486B9FCB65174F24C3203224CED0C3701267F1DFA023F5
45465EF84A46A2FE4E8F3967A7851767754ADA4CFBE60D4A7F9C941363A92D23EAE1990141E1
15D8944700229CCEE6F555F816B400409F7FEF26F7D0879C12C401E16452B707ADA7494A2DE2
D354FCB072FEED7F47B280EC4360B1C692315FD89FD5E6F66432E67AA43A3F69FC59006CA0A6
F3132DC49EAD3D5AF65C8EE2BC80FC656F6F8F090E323796BEAEF0385887E67E0C63A7410C43
F15F006E87FB0CBF8297010993BAC8C3D34CF01AA3FBD99DFD867D168AA37A5CDC91022B7930
FB0547A3472AF22C31B198D4D37655914B3D9AA515AD6FA54503E0FAFA32BA19373D9E036F1E
67B9DF38A5963524FC20EC3C32232811DF622C3CF2A7DDBC4A44CC264EF2C986FC41AC283FBA
B74A14DBD67299AE5B404BB1FBF87A503DB6FF0AD768938FA6E325D416F6075E5ACDCECE63EA
D60169645DE2F6800A2F1465CB783A32741332D6A927371E929A5DDB2544CD564B9B941B3D3C
7345524F53F4BC64173DEBE8AC2FD9349D1FDA8701E92D2C56FE4167474A3F1B6547E043F523
8104C2075CE6625E585E3AEC5E1893513B7512268AAFC556B2BAE9154C311583C14F86BF0C76
7FCCEF8C08604F1CBA042FF84118B65DDA73E341A3D0C4515F57DD44D70F5ADCB3B4DC14DEAF
ED307AA7BF757D7D5CB7B764F5BC64F3F247D9A586C802E8BCA668A2A9EBEE8FF3DF2C38A97A
0FE8198DF19F6A16C87C79558B85BE369C8620F0A15EC4BFE01541F2BBCBF3A6F35FC4E88582
BC1866C81025A7BE548815868E9E0746C452F7A1102BB2F34AFA918A4DFF772270C3E7D9255B
16EEC5381C906ACD513213EC91DFB56AA5ED3ED535268AA471F2971A606DA9B79BB356667944
02C853EE32C8B8F335C1D7FF9491199BB74A49B35A1314CB59A3DE3969707D14AB9354135873
1F7A456BE0E51952304CDB10F00E71CDE018818F49A7BB400A819DDBEA815D73B606F1368F50
4F8CF7823A0045937F54B981CAE483B8C91988D349F18322A88F912B1E09F68AA9FF93D3C160
B74974C2477DB9A09BAD4F1C10E617698E0480254F9BB8A4C9A2B2712747C658C53120622A13
B92B9C9DEA123B73AA1CE8526BF0F78342076100ED293CBAE42FCCAE6D645EEEE3892339DB4F
234DDC6B20EFEDE8134D6E7BF3BDB4A7E6CBC86B45CDC28A50FB6D82F73E6B480A02E11B0DFD
84DE98AF7B3499CA7E3A710A63E8F67D6794835F50CEADF6835194C7E849A37F7A614476CB03
E84DE23758AD8F97C82FC740013300F1252F9D934FFE0BB47152BFF7D38193ECFBCE367ACF97
29291DCD4BACAECF34C340EA150D8D16DA16BD903C01D8F5200AC8CB59B25750A2B970B7F3B6
47EDD5E48DB10CEE62F2325C70A8B3612034B7D826446B84070869671F8BA81251EE1C154C5E
A9BAE6930E3FB4DBCCA896184C4EFE89767E979359D7E00EEFC75C01D0FF702D14D41F4C783D
1A07892E1DDB39C973282720B7F78A5A3B32CE86363BA72D93BA7416C108D7E996BACCB15686
130E0454C48090542D1EB511417E8798AA305FF10B4F512357ADD5C090ED4253A70D3B8125E8
97167A9122F953AE7358838E030F39DF2BB12653C07ADC5A92A40B771F20E8A3A1B7DA449F2B
77290A82A63143544D1BF024C1E931657E0CE2D3C0A4B67F967F34E4CCBF76767549E0C9AD56
9842606EEA4213402ED37C7D59433EF725BF348EAD3384EF052D5D217E9E14C716AB69AC726B
1991F0C8ABB7DE8AA207F8B56F4C0ADE3A360064F9CEBC8AB995B521AD5B3C431C00F8A5DD16
F9EF848882A2BC3BD7DE968F1EC01ADA57F9EEBB85B57193D3321FFDE675A93D26908C1FE97B
0E911DF482B7BE3D6333E1E2CA2EC10AAD45F6AD78D9E2858DB5600F1765EACA4E6F2F4F1BAE
B326B8D055DF885C69454B71C2BD88A6C8E8F2D51A42CF1304568194502954E672F5935CFC8A
B7C4668E92554EC3E01DCD6EBDC5FD00FB5FEA8BAF4838AB93364DB115EBEA7227AA07826FA5
166AF48D71FC84BF3DB59198DB5F75ED215048D376F8134E214BB6075475BEC9A1238F144ACA
DF1014B3203F1E07A010C5B8F4810E2017EFBD95816356BEA7DE7D909D5CC6B64BA154A51F8C
517F9172D8644D6202CE80C82DFA3F01DBE924BF8947C767F1E4DC0BC1132C0DBE79CB25F21C
4DC9D459F8C16AAE46B6DE505282DB2A25BF18A9B59E060BC19A656A29E2352560FE477BE13F
A0D8C8B03CC8CA2B3A49129B44C6E3217E5E78047685202CCD7615FD5DC6C69F10C1AD237A3B
9C840E0B06DF833AF884E7B64AAD30DB70DA47E9FD421FD6D74D8CB21ED90DF548627B180308
146A1FF48CA5C3B35430F45BC3B8A44FFAD66BF2E66810439E26952D3741D95F128FE9C620AC
A373EFEB9284D63644D6F971F2C16855BD503F8EE9E3EEC82D4E281E81EB95B9E402D90FC76C
EFB56C2C9D735EF29D633F1CF63B42C9A9C062782F1FDCF3204122DBC78A17205FF992DACEF5
F40114313F3757747ADAC5B09B290572726F1FD4640CB718E8129E979411A4A59F64A57DD5AA
1493A3CB5616520436652F92D755387C96D89F6154F5DA71E2D68C4E20BB34BA89BD5A3E444C
2ED891C08E3F4B11C8504294380439773FB282283932FCBE777357A00A54181749239FFE830C
DB6B496C7887FC96F39E9A182E7230517584FAAAEE51A3F947536C0058B20039A152D1CACACB
54EA8FB60CDE48613FA591D2D13A062257DD7BF93AE306B51E66053DF9F00763B37B84ADF971
3E144967B55A2834CCC0D04EEE6A455E0B7C9EE3B75C371A59531A975F9C6CD983E3E33F4FDD
0F39D4CD8CCDB8AC244B317DF48C83F7ACA6C9C8FD1AC84D4DDBE468B21C55065E517DB3CE16
3C865020D3FC5688C24E25BFE032E556C9F82C6731096534B05A845F62917E774C6655CEE505
AB8DF7FF465F3169B7DEE8438459E6B6C2AB28AD5304E9C1E962B145D62D13784ABD1052116D
D5F3D97FC38286684207026E93A9C61DBD9DDD3E2E78BDD2BEFCB89AEBD5622713ED7D5D661A
9B7C63ADF26E1C7F97651C3F83C4319470B9C4BF5D5DD79CDED1DF353129B3056157016A3D57
F35D8F3532A5A5BCC13C9E8871028A1EAAE09E25EA070495682C89D43C422EAE3BEA99E2ACE2
B069165F211CB9DE25330ADF887CBD526E4743AC22FA71C5540951474F01D389273E6EF4421B
05F821204A54B72B44547E4A23C40D9FBDF85654C89F360E2973C010F264484C28951B08D1D2
F2AF27F44324654E665887CC388DCA2D9B05CE0A7CCD9495F4154222B740C3C05EA5D2898DC8
89BD316709DAE5CF71D819E2796A68E36103A5DF90887F8C9AA9C951A8610033D153F9573409
6D0FE4AAD1853E02672FEBF3700B5CC2CA033C2718990D8BA4ED740A68C9BED9E3CF27762B55
98BE34A168E1DE6084596053A1C149DC6EE1818C894055E1CF2864FF5E191E3E848386734A1D
5C03522616726BFD65A742FB608051889702DA2F07C4D494166FD871DDDD2B3C6F0710322AA9
74C7EB2218B33EDCB3C1E924977513AEFDB6D9D9D7C5BA640C3DD7EEE638CB72F8DFD9754114
E515132B8130117EFA03AFDE99AD87A817A79DE95D960716EB01EF34BAC8DDF1B11084E86FBB
6696DA9A2B62BF68EF83C62E7F154994E701E916EB303CA82405D2E73132BAC75C7D02D82466
A6815A40B1A6628976BA88E4156FA760015CD199E8E13A27464AFAA4D942B5A9F51F53235E8A
C836C112231C2BC6F13A7E45C59CF5A4449F36555A6337AC9F16E5A7BF32BE568304E13EE297
D82DD9724CF4666EA3BBC4379DA261E66C087AEE5C61883CC235416B0C817A17B195FE641E7A
6A2998031101DA7CCDE9629C0B16424C3E395A1ADA0364E12F7A186BCA09FB10F7CEB70F7C0F
26E02569610247EF769B49C0EE68DB071AD7283F329A99DB801D2D663D3FCB900C4BEE7FC805
FFCAF6D7D850821D32086288E8BA0FBC3E33BEC11AC68D23EABA2664405934DA8CE38D96BB00
51D30DE0381A2D576EA3D40BDA17988BCF441D2593F2DC5383A0B3CE107FEB8439EE25F4B8E0
0FAC556446802D70EEDFAE1732997FC52C24A1A798A9D93FB5D9BEB61D0C4393E3C1CE3CF202
0BC14891026BDACA434C11CFB409C1824B8EAB63E4A2EC74658FA75074F27D10D8A1C985CD9C
C99AA5570392B5D556CA3CDDA83F7F3C02212B895412DFFA9EF15E84D645F0DA3A2D5C32B13A
D7360AE353DCDF31992C2EB41CC8EE5C22119E0D427249B6B6127572FF8D6E4C5ABFBCFB5663
08D3CAFA0970FB9D2553D19BDF4CB5A40D700CB119A6FED62A294C98C6E8E98AF5EDEE857C99
7D5F516A917E26ED00169AB68CA9A2E3E3CC3FF6A1461C44808D0C7472ADC0D08702A3EE9DFB
A7A6613CEDFE14C09FA9150D2D439486D0ADDC5343D1D25905C9C66B8F8499E099C2998FC45E
CE50688D6628BAA55D1E1BDB1286E140801399E5D9D2B22B282D14A83BC4D4C5C8F00A6C0519
F0184D83EA637FD30CF83CDD382E66D4836BC761C15FB419E65F4146784FD55195D3C9E36B89
F42E7790A514B8F058182AC38E7CD0A6BB16D661674045F48A6FDEF1BADBC830F77FF8089D66
417D78554FDFD77C3223F8677C6613AE65906896611AFCEA7F2875A5848380246D4A5520388C
DE78B5A88D4D322CD3AF94057726EAA855965745C6571EAF5B72CE3E9BE6246E233A8D6B7339
5F817C46AE632762C6E7846AB4FA04B7F232B3E086A5AC242643BB43E1F9840B571217F243D3
F2E754A42CF0524D4456AFC1625F86A17A7A5CBE3AF6E458A23596F2F3355A01503EB3C5024F
8F4CB70436BC659D9B9A455886C7DA64272DCE686B5E21891081637C49BFBF0370F34D019E9F
2860DEBA5798987DF9120661E081619F93BCC40DE41A2960295BD3AAF6FA1A18E634AF36A5CA
61B1C4A8FA60667A0D69E2CA883FD19ADEA985DB8438F58262D97FA4FFDD5F0877C769AA9049
0B85628BF809D952E1AB36C488DF8328875C4F4B02A95DD4FD068BB1EAA379495DDEB6DB9AB2
D2ADC7CC0321962318CB2CF7FF695E7603FEDF51C86667203F9669FC4351BB83DD99C05D8E92
4ED846EBF92AD02AD0FD44D0F5BEBAE2B02EA85CE117E4111433B34C2C59F93F09B6679BB473
7F47F4B9F19289B84EB0E80F8AEF34C7ED03589A9553FD69EF28F0B62970800C3A7287EADCEB
C6E4E092E1A736B3E73226674A3DEECE8B5BA7FD43265F7FBD4D1772EA18C93328E337A59B1D
24A5BB8A3E32FB678E426A8DBC69EF648F517F1B27491EEE3B5FE4F0EB4664ABFABB205F73F9
47D7D74F63A84CEBCB096A4BFC962225C22D0A05D3A399FFE5A98B3549585E94245D9ED81631
934C5C4B0FFB8D5BB8C4B958B37C9899FFA7C4A06096C5A433C9424A5B0FCF089B1C230361F7
D4A40828A951E44EC1916191CA916445AAA77E55C66B80E9E39FBC85BF7971BBCBDBEE3246AF
BFF3258B67E930CB05442A66854C9540816F1D79E5F7AFBC8D76A7B58700F76AC4AC4385FA3F
C2CFFBE23523EDF5F2C818A0B7110A9A1FF414A7D74998B10CA34D050CED08215A0183DCF6D2
069458B6D6B20690664A0C3C01C8FEFB74E98FD9BFA23EF69716A076524B0B1D9CE3628F77AE
698D957E8D4B30553DA4D48D3CB58DDD8CD31EF31CBFC268DFFA6A238F892C752395185CAD85
A311F7ED2227AAD8CCE3C3A54D7575AA2A450412E7233D9DD85E27B6CDCD8DBF0C887D971FD8
2E40C6E5A44CEA5B3FD1C6CAA06721CC55A9E93A7761B93BEC79D970C748065E2C9D8C021A07
066E2C8EFA37046B12564FBADA23222DA07CC445BEF8941FA73C1CB5125A3BDD295AE8E90560
E969AD98AA63B858046DE098C50E94FA8FD655AD589FB2A2F2DE27E6BE44A8F23CDA46F0D490
A3924441B48A20D207689DEDA068246F367E8883EF75E139917E5F1C2DC87A617FE45822AC27
692F6D8A9DDF3B4E924C15AD5663A1CB8B54B92F79A49FF83C2859C3D78392622DE6911DB0F1
97B47C51594E5661FF30D67F2E02320C29D8440374C96F2094C5525BBE76D5E5C2435D4C4ACE
5F01C0E0AE96AF9D6B94435B7B77CA7543670A2ABA7120A7FCA375801AC765CD5949552F0DEB
790D1C27BE1EB8E6C07857D77FD5A67B761BE7AEF45FE708A64F54A662B09E478B7A85F5A302
B2F27109EE41420FB9087DFF917A30DA4F0D13FF9E1A7D0A30082DD2BA2C1ACE9ADCA6020DC2
A4F094F978196D7948764BB97E90CB0B2644E2AAC575DC1404EA9E580065585C26B9E19D2099
F8627118EF61B44138DD14B98799DB61E1DF1E96B286F272B499851B215E40B95D1C9C75B8DA
CF3D5D7CA31F743DC39598A66C53EDD89AE799759EDB6B215C806F01AA2ADB95FCCA2AA9547A
4275A8E0AE843085656AF904C07B12E7A8AFB717116D4597174ED2D54DB4D937AA6573CFF61E
188EAABBA8281DD95C3C9E1C23F21148462EAE554AE71CCE2D53D9278D9E383C74F749C49ABF
76E173414F8B5B7F7822AD6AA01D2DA726870F3C746833E0BA19BBADED69534D605A482894B2
ACEC07C34BA635E36AE7A597227D4B7840B0924C38AFC4C89C5E44C7D16A674234A3373EBBEE
A984D19D33F5C0069F440717F4EABBAF241AB268B5C377EEB6E8E78C9E834854B9E72D57EAE3
1666915BDD60A181D582AD47491C1D219A487D39A731F27742B071C8B3E9FF0E816410E4E2DD
C83F535410FE741328E4E8F9D3860C7DC18BD359BC6D0E66D9CAA70AEEDE9594D0BD641F983C
33D6D1A15547304C5536EDE4757BFC5DDC34B35E297FC7376DCB2B534693530F4830B037B670
8426C8170DC6CD7E18D01A874A5D3878B3175DB62C3BFACE28FCA28660E3729AF96E63E85DE6
7D6AA1DA89D40447D5399903325230B0A8838322B6EB4150830124778E065A4A6B21BF50B167
37BCF946415B89B0D397695AA9ACB498F7FED12E44B226C8B2F863D083E9381FB67C1D1F9C48
629E22FA1128C9A4C98A2EE87F16ED9A3BE73ABE24CEF1F40E77360CBC03D494276FE9C464D9
106132EB55353D53C9FCC697FC27EAE3EAB14EC1095099604DB1CF5F8128311AD2ED15104F8B
18B3B656054B7B8F707C640FD55A5F39FC623DEFA01B7F3BA92F17A576B12B83751F3E2C76D4
ADB2D5A051F5F773A0A415754ED6A71282C884C8CDE39BE85269C87DAA34760CC122EC635AC0
964E119211C28AEE7C7CC6AF855BDFE623C603C54B261770EF2ED3C25771A9EB8827BCFA41C6
D439AD2BD33D4E08F87FBBE2FDEFD552EF3FA9AA568A9C94CCD51E8E969FEACAECFC753CB3A6
874944480006DE0633335838EC632522D0492CA7358770667DE8F6DAEDCC3724B3F0417414AE
34E28C0FF1D78B90CE3CB24F1CF5D791D11DF3127A4A48050ED6C71CF38548B665258434BD11
C199301A9EC952F7457B303666A45D5F2D2BC973D5B7A0906CD926582DD47BD8D41C291DB2BD
B36E008927EC60DDB0ECFE9E301186C56ABE605069785061EC265B22893441F252388E3ACA4C
EE67296676AADD462A31AAA074EB5F6A46F52B20DDF57A42468D584F7EEAB4CFEF8C7D5F11A4
AF918F728D0AD26127F06C2194393D20EB23DC23B7A166A0435C6B8C3C4A29ADF42DA8192C80
84552CA0FCD74647D66DA2054A62122ED06395E084A9856FC21B8811495DC93A734130C17FBB
BD52DF202C311595132AAF3B708731133D42FCE56C2BEE09227751021D53F249D89911938652
683848BD4346A82622FD72BFAB8D2DE34C4DEE7C9281DDE7EDA445CE373EB2C04F59D5798752
6E12D2A9FE56DC30AA7732B06EF5469590199654862F4DB7103904A18952AB24E3E7BAB3A594
A1CCC3D3DBB16B4B350746EFBF4ACCC0135570AE21D130F1196DA2F781236E3BE26CD1EB2CFB
1452ECAA58DBCC52511BAB4E5D61BEA9AA6A249475D63476CDB2ABF137824713D2525A47E914
EBA96DCAA423D39A44DA342E541BBFDC70A0D2DD53D38B6E14188E5331D41D60CA5F150918E2
412A332E4F8DB9B6FDF03DFE74B5C551A261BA00E6FDE226335D4AE923E8DD35DF7AB6E565F7
C215D8D6C5C770555186A0FB7E039DC93647D285F3848BB9FDDCB545FC606B505565C0E51551
1929C84BC334300B9C8F1871D678ABD010172D4FCDB0B0843DACAD16C5D0D2D404784CAEED17
02D67076A8AB6CFA2CED4825E22DE2662E1B96C79DAA0E9C744FEC1131E6F56B8022885A0555
89EB839CCE9E2DBB0220DC8E11B587F934BFBC4600517A71EF13BF598B33DCF656CD525BAA45
2D8ABB6E6CFED5CCE00E48A1AF097CA786FBD926AC6E72DFE9B9EC80BDFADFAD5E75A95090C8
1E572FDA410EA8D567D37DA45F7AC57C0AABEDDFBFE511CAB34D9E0B05E76D1C9A6F542C6768
927CF83A2245478546F6C06A06163A249D019C894BA00C7F40557769187D41344154046CDCDC
B07618424828315D8E74E4A226181821E543722BB1DFB3C45B2527D2B35B7680DE47E1AC588B
F9846088E59E34731F63E05DAE718544BCA5888C2E82D938AB70D416CD395B766EF0D715F730
53D762B3A83D792E05B105F276BD12EC9A7BBF39AC82159A6237F9E3B7C0F0DFF71DCE7B36B1
34C4295C666170666DD407FF8D359350D70296943F2FF83B080BA894BC3D0F2F467C079C6AD1
55D7C486759399DA888983EC7D209E6F77BF7B2461AB528877B12063E4CAFF221B9D3D88DCB5
6D6B20DBDB4F837A3343854A91B32A3911558A12D67147F39C54926BA594E7D30992C2F8E650
74296D0F9D9A4528FE71CB34689752E2E15CC6C24C5E262BC5BE936B9560648A364651B5D1F6
D0C105611377626E45CCA82B04B8854E46C308D4687822ACBC379B6EA335768B1690AD86F292
C2EA882C5386A5EAD6B0B9EFD82EE6763F8C8C67463CA8B3541877051FF8B4D1169DF8D104CB
B37353B68D01B85AAAEDCE163319207D255D095A8A2F5C82D22B8CC7CB8C4CF46E8A29F7EE23
161B21CF6255B2D154318AC208D49887EADBC20F627A84925CECC38129B9AAE7B8580ACCC525
B8642DEB5F2094A530859FBDE220C497C79E39347AFC0709DD78F3D8C7F9FE771419B83BD960
1E40AF90126F952E176BFD4F43C74A7D32CA5C6FC37126A3C701041ABEA77B6856B9CB2268C2
C0919257B8ABF6A19AB8547885BA7E706741F48F0CB0A23F6218AE7CD3AF9D8EAE80B9A8DE62
B74B9789906E4843542A930A9E1B2790A17E68FBC7CCB9578E9891DDD874CD8F7B7B18432BB4
07543B860277BA71BD9C0966E9E9A6C11179CC850D1F6D4DE0CE27CA55F5EA2897E0FCBCB503
C1FB0EB9F61E5D8C44BA27381A33895519C234FAA31FCAB6D701000702C2BEAD271CB5CA98A9
21A111F4E256784D4C81C29856F8A16002F80CF0542DC148D575ABC3C5EC5A61773FB326F221
A018DCDA1AFD4025428A93D009F9A1EF8817394D64EDC7873CD83ECBD46CF093DBD2124F61DC
B6A3D3393DB8B43B1A74EF030F9794218208BC80A956E80ABA2514F02E13CB4EA71E8A1D3A97
C8B4C46CB077F9690B8C280E309ECE2A051786E098EC7E84D3A6F4362183993D43A8140D1A31
336B685B8E5A48AF323A750F857F72345A6C1F32E45B8086F52F352A3D8870783D2AEC74CF93
827FD5E1DFBD3713F94D198424FFB6C9BE60163D55B2DF9882C13F77304DE81CF0080D23D171
433BD1A9912778E47833848B81A84342E37AA852FCC2FBC958A1C125DE29D46BDD703C68FCCC
BDCF71886384D51CBFB1C9992FE5C8C9F2ED77E8F9892089BF9DA2069D09767DCF4FF4C02636
EDB6E849835CD52C1B29D93A17AF606BAF670EDA83FFD08729FF1D4B4C2BD2DB0E62D2D41D9E
42921CA6AEC19EA70F3F5A17DE217DC83F8C2E81426573BE0B65A1A90A9296A3BBD4CCD2ECDE
18A1D9B015ACA556B7C1A915D60102C3685AF23E64089A9D5E7A42A9B46E96C6FF2156023DCF
2F49ADDE1273DC951E9E28F6A4B0CA2435D139C3E9B55107784D642C0D23C802F3C21DC5A00E
4117A87C878CD8D244E880458A9026C9B1447521F82735667B2F62D8B0318336775ADA5B2146
86122F623480796466D4227D36E6288C2562825D5B5F7E9D323D27504F04FF9624B56E3BB0E5
A74B18E12B8F6A0C778EAA8088536E933D26F56E4263E07E144AB2D560AD833CFB78AB6781E8
32BDE2E58D3366F556B2ECC218AD892D23BD855B5FA11C47CB6EE0D4AE26385ABF6CC8E89C56
711AD762149CA8AF25BBC569047B51AA385BAB09A71B0BEB66852D4ADD1B83038BA6FDC3132A
40A5509DF24A5E2C58A291A27D3D653AC20C947E28E2EB594B2C035BC1E9F5934BFAD7F3594E
644EFE813D5607531036212047C89EEC75B234B39D366935B2ED513528422D1D6F284DA15AD1
FB70798E99E4A32879B8A3D6EAF321560AE95ADCED590BB0DF9BDBEFC4F5ECC15F13BA184826
878165BD27907E31F8B2DC4FA37E299D147F5E7BA0CF0F2C0B8CEDD38CB27C340005F0EE6E5D
10D992FF4193C2D86BF6A24343FF5D9853C293F5BCA5D099A140691DED6B981F2DD99E409A55
6A6BC30E2C009374C1B7C1692D0BE25C93C3BC07BABC2A0971FBB1B3CD7489B30AAF4B0BED33
B3ECF526C8A0562BF5E4F4DB8D87104D4C8043662F274DEA8CC689FC4BAA6826C7E00E3550FB
DCDA279C41B4C6C48ADFAEB21E37AA9E748EA111837E680051ACB401F28099C557BFA983EFE7
A51E85F6198AA14C24AAD346926FFE72F20D984AB8B2DEADDD475CAFBB644420F40AB012E250
BCCD48B9132A6E5756EBA527ECF8286F2B81E524187CC8BA9CA1B41D859631155449100E4E4B
451D537BFAEF4CB718F96DB77ED7253BB9E6FF37B82F4292021B654689A4F6CF5495B63835E0
C0841365AB60E8CF4171E5F7A913E4E28AB8D382D9539A123DCA7ED82D1C334ECCF4353C7CAA
6B3934BD904E394F3E8F17EFD8F068BBC8D7A19C31813C6B93A58ED5CCF7911DD70E0D15513E
5BFB67C0082B965E78B562B2CFCC6C8E3034C328C2D7A68216A1587BA875B20BDEE283C0C974
D12B68ABE3970DD8863EEEF01534F86F49BD76CD291C8BD5328F24686D3CF29D423D4736B02F
6B0D4775010F9CC5C4E7930E281F28E76302DFB81F330687E38CB3B073C35B0C5E385514AEEA
0AB62C080B55762706E81C8A29F2D9973F55370079E6165B55895FBDC618D83D4874BA610A48
00E192F299167BB96E9AE3E39C99E9AB522714D9F31375E770B2ECA393F4CF864E0F31ED1ADE
63E5EA730CC650CE70BD6B076E7ED662044E349D44488D58DBD6987F561BD8B018199B582D6F
C3836983F84AF33AEAA65B229B71D8169E30F1C4A049A0D6F4CF6A72210686A0FDC419219643
1AF587EDC98DC8423EFB3F3AD1E91FC22E38F6FA8FE110A8D2B7ED546C3733FBFA6789102B84
726092CDB37B28A603AB1B907EF6B7A052BDE02FC3AE5EAAFF8A4E3E54F146C6726B05C66E45
1D1A1D22BA4C401A8CBDD261C0E6D1C936A0A50D8BBB2E0E0405A4EBB7DC57A0343B55785CA1
30ACAB3EC6ACD8B5B3910CE4750A1F13801EB63B937BCA7B736197E4874437CC0923A46109C1
81FDF4345C3AC14C015B19658B0986B5A128895F5EDB14F7DFC59D59EA0796A998CC6FC11E87
1E70AED258A9EA600CC4361CBD163B3830C989DF402A6785FAA2FCB8CFC9938D3C97FE39DBA4
3FACDB085497C95BA07C6D62C23EAB46DB56BF91CF5A6B8072C1DDAAAD5547772379E363B7EA
E71A64D667FB482F182451BD51DCC9B89C6CE71FFD709C06A42D55A687F383742461DD1C68D7
CF75B05C4345B842DA0522369662D9C3758C98F0D14901794C6F40863ADC20D162A8241891B2
86F563D9D5FD68E5CD01D4EDE004FC8FD19169A77586E887ECAE628AB4643B6A6B80D26EF7C3
26E0EBB51E1A20D5F4C2E0F84AF9BD8BF1719DFF164058B5D5B1B6C459CD7408B0E808493EE6
A5DCA242EC20210F3AEE219C9B50F9D2595F821E547D941E50AA8A60290A48616746129A6BBB
A7BB6574B21995271A474A4F83483717248DD40FA10DD113DB0B94C0B73E7213ADD1E2F32F33
703FF72AD175B3057486947AFB03EFEE2C54E21398574EB67678C1C8C46F302827C836902839
45A266435E7B7FCFDF97F1E93DB89E1383A2D3CC9FB79B0D104969B1F46E22CD4D3AE165B718
BC0C990A8D01CFEAFB231D2008A67CEF933E003739EA80DDA9F8AF2DD2D1D2D9E2D7BAD89E43
550F6C44D03E1FF2AB8FA26CB66BEFCDFF4B2C33111F7ABD3D5EB318C5669954B6F3ACABB470
F20FFE2D9A39BA20B0E5087CD4266BEFFC3B221C7A73D969837152E36DC9F6194717AE03795F
493FB4A8D4DF38D70557AF196C0DAEC61411529E5E33BD09947D365B6DBB7BEC123BA59011A4
D53D3E471AAEF44565BA55171B2B8A3529DAD1CFD4696793CDE99759A91195A10F606FF5AB7F
9EEB7B3ED518EC5A2004021831DDAB3D79444B3E260CDE6582F50F92304DA8D0B744E20E097A
C7BEB729DC5B9B754CF8E81BB998F954E09657713E37AEDA94FA09450FEC4F6BBA4CB1DB0C55
2E4F5624B3E992F49DDEB74AD2BB9CB294E8C0E501F537C0CF23BB61AAFEE1D6A1F477E975D7
8F1FEA938C1C8B615C0925EB826223ED898C5A4E6BB18774848AB22077A2B621B73070CC3F7E
E4C62D267902A7375EED88554A973ECD2A71C102625546565020F3CAF46957CA806D76B75F08
8DDE661207427DD02B023F340CFA2C9BBBE81995744E8A7F7528BE6A91F03276E89AE242F545
C2BDA6E0364CFAE89BEA4ED9866C07326D46A1DB058D3F22A57EB7C3DE9874756E2D6F780A73
B4E3F91528BDD24B653E84F613DDDF3389B38A9893A232A8BFC6514EEA7A08386307D04AF2FE
5BCC76575CDCC7FCF3F14B173E46554C5E702BE45E306F5EE2DAD5952302B912E79893301568
DF4D61456A342D00B2A822BFD97AECA51A38D9ECF2A5C045DE29D940BBBCE3840275F8603EC0
E29C8D7400A4D5CD3608338CA4F6B098636952B4934F3E36BB3DF8C0A5D2DD95C31E71AD880D
CE8E6CD3F6B4D2D81883C537708BD4A40E0E67DA30709F860C0DA126DC90000D5A6FC2B56D4A
BE93CD025F527AB27563A77FA422345528140F1E56C9E11A3DFDB0AED55F2D153356EC3F806E
0A9A4F586EFF56A190AEBF17D3F17185A93FFD30B1D5A7AA71C57DA060DCF2EB62C6067AA17B
C36004E88F24404AC4A980DCD9F2D90A96ED581C27204EE8386E797FC8C9A94750833C769B51
E4BC787747B4489D2E23EF1136E9FE311642D8F55434389627FF4BC3D6663849B608ED7EF8FC
AF6BE24A47492558AD30600385697E3439740EB74512B6A510C6E59EA0F53FEFB58168983BA8
DF386AA6252DE17BFDF31BB2BCC50FBE366E8FA2DC00F31D7273EB4BC1FE1CEEA8378D69557A
64C70887D92F49F59426E00022FB286BDD3A0F2C85D0BFDF33D2C7C09F23DE5A28012FB2E18F
47F5E39DE87497A923433C6DA8F7CDEFCC79714A9AC1DE6A721216900A817B1E18D2B94F20FF
B2A908AAC5FE9D8E8B2EAE9829DB52E29C2D260468E1AED81C0B0E51017C2C96CF50F7D58719
A339BE972F315B7FFDD5A915A3CC03F869618F484772D0D84AC7830EF67A45726748132E0B9F
1A09D7E10A6AA7E0AECE68EC35011297CAD44F218CD8D94933547D10E417785BF34D2BD1ADE7
42609B9ADB842792C3266F972963C21E4F5090C827A90B9B4CC20D6FF6C8685ECC90C25C52DD
ED500AA2DC0EAAA17604FBF5DB11AF06678FFCAC6AF8B7CB761848C2B417E0258FFE2F2CE397
38D29966DD5EFA5BFF0626035F4526B60BED66E3B390C3003546BB03B15FE8CCE70D42DC5068
F460DE895E72BE29DBD13CEDB810BCC100EB0874ADA2BAB0AF814D6FEC4F5B6E76907E5AC510
76083DFAF50939525FA2CD9E359854918D2C92DD625B5A6624E16173D2A595E31CAFF9681410
A24EA7D166DE3DF5345A0447F8C82DAB70B01078A378FC4E8DE20DF680547B037F4DBC697928
17DDA4C7F92EFD32552DF9C561DC7C9D5BFF08C6B0B5B183D780CF6E89E7E3E2D365786FD8C1
5BF546A184DE6F3DB5B37499B55B6221D6B961FAD9DB9B1F0159863E2B5DA9CB93E235BEE8C3
A879DFCB1FB626F879B81E0BCAC5A94FC5EA849E5C8A90E700A675FD62067A768AA71C04F383
C8458B097E6CA5B68BE4CEA339D39FF3133531C64EC07F4A517E2F5B42A1325836F324270679
EC6F9E3B06E828762E49A6CAD73AA2A5220994C8691C4868D9C106531E380291586130CF68B9
C6EA7FCE6A387ACF606BB42C96A0052925498C42EDD149A13CC1E752420969121ECF7223E3D3
48A88047EA45C7791E36727A8510178CD7D027D4DB0182D7091B7C5B907973E8C53FF1B942DC
D9E9C72E0AF3131DFA8A4E3EF04A60C43322CC67620D871D31B56C7C380C5C6CD981761F963D
BD3EC946DA850CEACC1A76A7FDD6BA42C77AB127EF75CCD4B43593D9E863896DEF491F22EEEB
C512A8C7D6C1C4B4B205E106BBC00534703DA0BA4D4CA190D098388A11396F7F27E43E0B8FE6
4918125C3B4F1FAB5F5F1DB6541258BCDA008114DFBAC98F0671F5452D4C9C854C6740A25C37
99FC89E0D3EBCDF77C7BB271BB7BBF789481BB6CE76FAFC31B0EA63A710F5157564EF709A757
1A8B7DEE7484F6E02475749B2DFFC3B151C9E391C21FADD2E02D1FC3466DD652652EFA7D5407
D114F5750103D54F136C248C9E3F35BB90140B81423DEC10E4231FBBCEFC40560CD1F45677AD
74134F9587CEC7988AE465FF7E91A102526EBAFC81981629A91B1EA512B096D57838586DB250
8C010B22594F97281BD67E7AD5FBFD66A3D468C3CFB593548AB8F4AE9810685199A59622AFF3
1CF5EAC0F0C0D0C71CB367C6ACC21E6A5D063E31A7B476BAF04ADA59A9B3CEBF222AC83F4EBF
514506E55A5C4F296BFD942DB1814914E38D0B67CB7C6E21DEB843E949BC4EFE00B15EB52F81
C18C1A7AA62F98535ADC26DCCF76A08FCDE54CBB8F269EFC82937F63FF8D2DB37567F391D860
5A31C81F1A82E1C8125E590522E44AF2718A3830A6BBFA42F7B8CB71EE2E021EA0CBDBCF323F
820ADB61060646E187B7E1E14CB5A5F4EBE8084E8F8E2DAB2C25140261C0C3CC3FE280940203
66FE6A3F5AF439C5970A5CE3A2EB586DEF09098313D45F5A56C29D1E9436C2B908991DADD7E0
EE03B281969C4F4C9AAAAAC75C4B60BED944DCEBE8B4CA38ADF04B45D37C64D434700F3BCEF0
B6D53B369AC825CA84D1CEB67A4130120BF8ABB0E4744740B5457B67EE624B9C6C9024AF277F
156FA024FF7EA71832404C04B28AE3933DE6ACDBAD3D895524597CD7B40421D96A94B9F4E8F1
981E46858DFE7D9679CE3C316D659CD26105F8C5D15ACACCBF9FFD23B504F76D280FD834D4B9
149DC6624EF65EEEFE020690F27612322A7336F4A909729EF775BF52B8A345A898C3C7388DEB
88D7727281CB44A0A2E03D589245B888D8BE0C5A48EFBB37DCD1BB62F2EC4FC84F8E2978F71A
B21D22AE3E847FBEA2E4F74F56DA970F763B0A7F895C466C33C73B069B1B726ACDD272BF23E3
CE236BBD7BB7549130FF322D05B3330B54672D8770C647383778DC5F3C4E9C2A10EBCA92C1AC
95B4A0B019A345C730F94C1BE830FB6349CF142F2BDC2AB05D85F138BD014CB4FD4699762464
A44B69F48385669327EBDF794BA4F1E38B7ACB6ACE0DF09580487282869FE57A78D90D55CE4D
D4A75694894FE6DBF8ACACE59F43A6730FC751B055532973BD18F37CDAD38DE5318CCE528E66
CC1F63134DA012991E283C0E224FA33442CF350C236ED7A66E6285C5594CD82F600C5D982F26
DDA6209D7FD8E6E9D10B26EEFBD396F45CD30F01C15570870D2C9E76AA947543C66DA5BC00D0
7378F9C9BBC5A9CA8F22C8A2ADA2FD63EFEEDFF81E5FB13CC09532725075A716351D9916F3A0
65E15D56B3D2A5DC3696F22646F72043DD7D09BFBAE9C6AFE4116F506BF021F1BC49AE53D319
635590942C4A7A0EE5F6FC5245777686C149A51D6BC8A5DB11A4ADD204B18CF6DF65DFBB6DF4
57446B0B966400A1D45E029CDDAA42C416365263941007EBFCD90BE1C1180B33FFC66CFE0D97
644EA840131797E82EE4B0AF14F9CEF9E129B0B5700BC3D98885178EE1B0AEBB2ABAC262F34B
D24106F196BF1733DDC53379A2EB66C28E37EDB3201D0B9F314AE6B1250584F258042C5174EE
164A352E301FEBF2434303CD188661FD95008D8E5EFB18FA91AC4A942C399B2D5DF0B96D11CE
786CB61F69E13E9578167135BBCCEF9C135EE20B2A25B52A843B7ECBE350DC3229AB15E248D4
DCF553178DD03515D52949127E2C28A02545C929A616B72F0AC8CC98B06E1BB28CA3292CBB3B
6960EBE6A4A204EC1474F84E8CF65DFC75DF163069C8D244B191274F7B85695F5FFEB78C9468
7D2C6F4D0ACF3D1CB8282E80079182597B0BA249AFC636D3269482FAE865ECBE6172212714F7
D856BAE0FE0813B98CB9BA878D1CC54B43CF880DCDFB870A8E26EAE8F2AE390E73FE15ABEAB8
D4599AE1760E16A98E2AF9C46D2D3A24D0C416E0772A50979B822DFE41047BBBBD83919C36B6
0D82F10C52F566DF4B33E5A3DE5738450BA27A45FF87FBFA7F31B0AC3A872AF69D9C555679D6
8DFAB59A503EA845510F343303F72214D2B32D04F79973BBB3BBDCADBE5CF04B92928E7F2A8F
7731EA3DBE2960069345226F55510521D21D9587B7696010920DB650C0BCD0223AFF7CE00C8B
9A6A056C0E1613C77240AFB8EFEABD5FA3ED8DF754986AC6FCE8103A9284F64487375FE104EF
6558CD01E2B82AD758E982A72E76D884F851D92E2E3AC77EAAB7D0C7167DC5A1A8A411A59733
854E6FD463B3B60D04AEB503E4BDD06D10AB709C6EB1ECC7CB9E91C21F4DA9D0C6C0F4DE8679
CCE0A7011B31DC7B20F673D4A7C34A89C2D3F875B4815A291827C124B3AE1190467905340C8F
AED664A1DEA1CA3E7203555845596D6CA8AFF3622812B9A4D54CD0060E4ECE5E89978E7EF3F8
61D6FA2C049BC61C6A74E79B44D12C3D1A225F56D0D381D859DE13D8E90AA2293BC43F2B6BA9
0641BA629BBE04F5766ED169D41A653C3FFDB77CA5A94207BFF4D4D202258F8C16B47D1034B3
3AEC32BE3D43E65BD6E6DB42E96BA8969D8BEB3E14B18FF4BDB155FD1D8216ED876F1AD5F8BA
CEAB108738EA933282875C487052A3F1EF6D706F0351CE2B165322B3CD58CF914F0D16FAFDD6
6C3DBFE69A8ACBE8D6699A9B0DF41AEC67595C16B4685C177B7D3F3E396BDE3635AB660DFE71
87C5FD4FF7C2A8D614E61DDD8C9A1DAB41E0E2FDEBBD427F9EC6635F31315AF4AA78481F359F
2ED090FBEB00DF1C751B12146BC51841B39F02662A2E789109211ECFF2C1E13760A07E354CB9
2AD96BD666C5E9CEAFD61F1B7E9CA30C5F4B26E2BB6CDA8AE2395AD7B38969382EC38EC6CDDB
3B9500AEC0795720D130F5FE2C8B9DDAEC6685ADF419D5ED2CF1B7BA36F0D3AFAE88B3918699
0B2CC3D596B8A27295ABCF8E21382168C6E8C186696A4C54DAC02D9B039E21FC2BBC20CCE604
499E272E10FB82E1B7B4CA2E07CD4D954D1D25DD99BA538EC4043BE9F25095AD2013B82D2921
0590DEA84BF4E53AC2889F1F088CDD503F36ECE6F7EB6CB76F52F5B63FF5ED9FF01BB0A1B8C2
4D6E9D6553463FACB6D9028CDC85676227F9AADC3BCD3A63B5BB4E0E1D6F5D1C5547B60DAE95
65552538E42AFD897713A9ABD0FD900E8ABA71A83551B7F88C583A4DA28559A835BC07653774
B5AB6013564AA7EFBD36043E66FC1AA25879E18E4625AE27D4861F9249F6B556E2CAB52BAC10
F56CCC7E985FA0492A1D4C7D8944E861E3B9629126C3A3E850E801E72875C0E4859EC5C96229
D652EEDBE8BE1BEEB03C8A54C9BACDC5EACC7F3026BF6DA6A4250DD247A147AFC5069189477E
80939B1441A9B8257DA332F92758E36FE884951F1B450C36558D209FACD5F918603EB234EA2A
C527C539BE047F6BB8473CC19DACFBDAE7315076E68D3A2FA7B9E3E7240E69A0FAC4D160D1E7
1F56BB70B5DCE603C160A6846687E861D06773F125CAFB9EE6E9AC82D9DB92ACE2E14F348D48
C102967C3EECD220A71B3B37530F6A1C75B9BBF6804E834A5543B4ECBCB836C1475D28604C34
4D3A4CAA1CAC68345FCC2F2EF1D12A340FBEF26E54D4F641A6693C47DD9EDEFDAA3C0BC7E426
740021946615B3F25CAE9783763EA45C722B1AF5A68B3CF9EA411A95615C010E7FCC808FF318
4AE3BAE69A3BA9BC3B626D918210A9544F7013781D51D8E4986508B8D0FF03442B5C15B8240E
E68811CE089BEE23570CD03C467A7BB1AFC7E1C074A8166C36D3B830D2DC1EA120973EB1DF09
8FBB39D987A452CCD9CB22C377E959FA62C6078BFCE7B3F7D26D0B848BEBF200DBD10071F166
C821C0D18136A27E8707A8F05175C4C785BE95F486FB2FCA75F302C3D78B5CBFA5D0A11531E6
276C96DDD0432553C4AB4C62391D167EC2896478F8757D0C6CEA813F29DA5E98D014ACD18204
AC3DB8E9EB0DDD73BB39C6F5D03A2B4CE23444368A11ECB5D1BBCE5F75EC6E798CE566AE04AE
353FF417AE0D4D38172313BA9DBC85401CE90DF6A13E2FB531E78D6973E1552F2800FC7CD3D6
35AFF8229A1F5393117DD617F713E0B99F3545E7C706B6F7EEDB5C6B580ADC13DE6B8D533C11
420178D6C2D25FD1C239F1DA89B72FCE1595C82A44B1B774279967A699C9C16F6A7A87F95C7B
8B4C3ACB831C1725E4294FF8CA9C7E56A64831E4541469DA6E3A5CC763613B3DB11FF0778528
B2103574478674D095EFB7D4BFC7C5044CB2926C16B58C1F5B1BAA189D5EFE6C54157F203531
E3925D4948DB68D6E2259B5E171570E9090E67FB07CBC6AFE38061519C9D7207342A1200C7EF
D42EFEAC74F3B4B63B08C992481CEB2DC99873A9945C17417648A674CCD9B120065D6394791A
D7F41DFD1AF5AD40A8165408E66006D59CA0312EADB541D3CBAFDE2505DD3CF57DC0CDA09349
EF4F082EB092600C38C8F8CCFA9C3D1B5835F4A850D65521E0564861002ED0C58D916F1ABEA8
51917EE08D7ADE21383CF0D156FB13C1169D1052DB7B6792A5EE899950BFCC60D01E56D95960
0ED126559E854769F17874205C4C6ECA06800963E5C026BE2D28550DFB925DF030E0935DAD0B
E904E1771F906C13AD4FD2BA14EF69E3178E597B5C2EAFBC582F4AB3D0A7AF8C161FAA1E2686
EAE85941F12D60C9B0623AEBCEB8BB7D19DE4A632C9DC9F77908F673544D2D3130E7BE366973
20B76CC69D8C8284C5EF1EB6BBCCAE6BFFAB4D1CCBCFB512D8107199D4140B87F90C40FBA346
CAB2AECA74389209090F6D92589675B5596F28802C8B0A0F6CEC54205089EB41000AE33EA47A
18B49BFDFA085A93A8879B1919392E4E984FC2EDBE6AE4B7E53DCBA27DCA63BF70B95B9B1259
36E06AF14FABE04269DD686817D84E6F7B5FFCDBC5FFD591C559E259D2282B47E031FAF9202E
644367A1A69B56C550BA494632D9B7C0618F1F3B77262B13F90785E040ACD1FC43AA151FCBEE
56F73FA13ED708E8B266FA07A035AD5250BD91332794EE687806B27DD1688CEBFA13E7D18D98
A279E24132338820B459522137D75071F28E72F062109209AA8BADF40168237E8B7F6500CC91
26C2F90D7C7E8863D60E753537373F2349335502689D30D8599413D3B7604C6E9D6424E44058
75A580C4B3216F160110D40B6D425B5055375CA982DD759BBDD16AB703F2A95887DE040CAEE9
1AE1F2CDBFA8CF6162110A2A226F4F035AB9DCDFD6ADE9120A01A1F4041B9D7580B45EE76FFE
CF4135E6EF5E9326B2E9843984AFD1ACCF4A3543DA6A6E8B911DD16B9FE207554D9C6C676A74
8AE2C448A19A29D2482AD25505C41E80939F4E8C8AFBD2030810F515A35152DE8F70A293D036
6A3D875CA145CDA45B4EAF5228B105B2DABA456063AEA511C56F5FAD0E12A1972C30207276BA
8CACB5C16711A8B928780CD717D284DACF5ED94827E66843757979B572C0E747E800B1170645
61B74FD4B1778CB7C3FB9F28EB14B1D366A845940E0670F7148751D800022240DFD56A4AE67B
DF3548CD8F2D72882F3328058DCDB39C8F187BAA19D984A464B84408038BBA4A6B1DBFFD4548
152C2E7BD058A7699561F9065B5D0BDE03E7EEDDBDEC3C4A850A1B21CC1F9BED730CB5394B24
D56B75A3E01B6BC67021C53962FF3424EF791172A2155F80353D5D29C71F05A6B38E2BFA648D
134885EDA997CED8270667CBB42B60D0EB9DD78B492300A30C3927B6E3705A4DE04C127920B8
6ADF6262259E1701ADD7C35E913F794D1A5D48867B2210AEB7793F67FB3573706C6E23E86FC8
DBF93A0ADB459728740552C15E652782382C18FB5707B2AA33A0AA8F1FE8514BF23B548A7797
BFBCACF7219CAD93AD366650E90A73433841C515CA9860A0CA171BE10AFF2C1E99C12C6500D4
18DD53C7CAEA83DAB4EB9E6EC1FE3C6066AA675C4ED730811001B8160EA6E1826960EE8C04CD
DE77B98169F9DAC87EF2158861D5E42D4E251ADF29DEB4098359A2E65D0FB792AE4623A45EC6
977DF19EACF2E12C9B6B63467B3FB89EE3EB478CA67FDF9AE07CD2FCE60C77608521786282B3
80A9028EAE8985E8ECC211630E70A8C6E847520FA48896289EAA7D4744ECFA44ABADAB946119
767A16728C9B8F781B72B631D6982F8D8AE6134EB9D4204C207EEB58795342FEDB24B5F6D0DA
89802056B68758CE06E2465A2BEA3576C22F7387D6999B145EDD2A50DC7C279CF984E1F5365C
12F1F62CFC7E26D44F5A68F5DF71FC609FDFAA06F8283E36208E0E6446E34545FB1832EB9018
1BFEE3186C7563775C4790A41348399518121D6515AC9D3DE3C208038D2EC19D0474D0D0E35E
345C4D5AB9D4A7B9B25E1986FC3FF0E44A55AD6E004E7847169C50184AF54D6F6559A843C60E
CEDF7B367304C51D44440C61F8E2105F783D3B2094AC5A06FADF7A8B52C40099386C01FD5B2C
07570EE47EF95B556B3B8B39143E8E259D2DAD5CF5DBC974727FE4C316DC6F1FAFAFA84895A6
6101E135122B2A9F1ECB66CF1B74C67DC76858C5C41257AD17C7DCF2DE280F9017C7A597D400
84636E722582ECD3D26F38B99D9C69E0CF5353C88A66DA881CD6DF237C2A6D66D59DCE95FBEC
94C3928B4137A93C74B85390E07A0A3D0F0518A88773F47B20A442A75D22E47DAC46F86EE37A
4DB1BD5E188A2AF1D61E6DC19E72950FDB0F5E329AF06135BE8A6BDD3935FBCDBA3A741BD2F2
E73A7BB5D5E0313C764D5AD7A463C83C160D5D7FF75158A816A8997BBAB9B6A1A4434D183C44
F5FA687FE4830026904B7F43AE5948CB18492EA3C95F94BDF7EB4761B369C49EF3EF8B25C335
0B0D7186BA82D89A7575F4BB5E54F20C16E19861ED99E8F81D92F54D89B29105BCCD04E64472
3133DA692A6187D4697E8D853F952B7907556424DA39E052CBCFF6D6BF5F182C6C245F1D5492
F2E82A8CF23A5FE321FC399C6ED263C62276D25F4A172EAE9FEB6744E1F0D8633BEDFB257851
5EC78E18B096A175449CB9585D0536A6B74DF26720A90716292B7C04DE4A7C8D5A51CB5781BA
BB8147966504A890109430FC65A3207528F386075701671BF095F0490AABFF7687B975D0A518
B6FC4E686710ACE528626C09586CCAD8A565A1F2E73AE39569CB961C0728553E8184CF1BD123
2350D16742308E405CCDEE920769DAA49600CC65E6D89190F21524D413234FE00597F1FF76C8
FD96DF8CEE5A4DD53C18A6DFD4F260AC82BEC967C9E639652052F841B0C4AE72E51825AEA16D
31E0C5CB585C1827A44D084E8D93CFBEC63F7FE604828BAF596F11A3B47B771A9E4917277418
B10BFA8444F39D2957AEEF92613D463EE9900DAEB847E1F16F6C67D01B97EA4C4E5CB41D6DAA
7D5D4DD70F5DDC13E61BBA15422E60A77A6AC3B0D50547E2F1A2CF2FCC558543CEAB91ABAF63
0E0C6B87C9E39CF24B81A0862453AD7A4D45CB6EDEA68E02B7F0738A30B2AEA5871859B6E13F
1D804F17093060CB61B62FEFE925D5F66584719FB9EDA1CEF6FC4B30B0EC540169F6D9ACA18F
41009DE5B73C9F1B07C88BFE095091FB5C8DED4868AB2F3C663F4EE7E4F04340305E5CA661F5
F6851D165D6ECF8C530E0F4633F45487DB43BFAE11B3FED22532B84816ECF6375A466466B0C0
547829A84A8592294ADF9FBAC8DB9E00DC58828D7A9F5374CA60B278F44E69A0ABA0DBBD4D93
AD4B09E331D14AB542DEDE7F3718B47B9999FCD1900A462996AB031FBD4365D1AEE0D280A4AF
BBEBB45BEEAC6280A7EA9CD9549331CC298A60681D15C4DB3F497BEA2D0FECF8B77F0BBAD0AA
7C12CAB38A881091AC3230E26D695C1CF6B23B2099243AB16DAB504499BC144F7085DB720F4D
1EC53A28D36AE77CDFC2557425963BA6E639B60B2F7FA9D7E658251B57C46EC8A4250F7D4CCE
BD12899BD902E241CFE321861DD7C5946FD7BB56A1CABD3D306A94C7E408337FF44B856FA5EE
D1B034D064C9DF32682CD724F9B44B37BFE56CA957C4B71644F0B5FC0DE21A85A5A1F5F454D7
447FA771DC7D6E81FBEED17F4453F721392261EF23BC31A090FABA8E0CB7F41070DCF646C5E9
7A3A5EE81F482EB11645F763716120AF411DCF01908EFB2F425BF15146FE3A884A89E4C81C7B
78218205744DAD01AEB01A058FBBB676B20EB5051EA8E652B28F798C7A0D9EADA3DD89301C88
A04502A5B615E7F81A684901F2F7F3BD7629C4FBD048150F54018787FE0394F6656E2CF4CF49
08E71E59AB82F9E7192F377BC3EA06C7ADA7CD49D0ACCA368DF5298F36BCF99656AA9E88B333
58453EA5D2C4C7BDB350E4906AEFCF3A98B257653B69793C2364B3239874B161014E09603105
24B68BFBF3F265B1D162FC96D4AE22807A9B476642F30F71D7513CD59524A599770922C799F1
88CCF2829E7D5363D3AEFC4AE6B5813DAED870320E978B5F3D2E9D3CE94FB55A4FFC43E38A2F
D51AE6EBA8F834EE9F79AA55A4FB29291C759B80030AF5BE582A7CB00DB9E8CDA20666525587
54795C325E8D738AF480DD78FB7661EE72ACBF4235BF9C45D06B61212E010EAE8E603F205FF6
6C6224C49ADD3BB95D63F6E5D791104DE1317478E6EC855A7C49B144D7CFC667440BC04FA850
B2156A74370A217B58AE0A89DCEA5B984A7E486DC846468CC4FACBD8D3CBF84EFFFC5C1FB928
F0F4F2FFCC7224AB62F53C30D0C35ABD026E55CA40FFB7F594992689142768029BFC02EF3DF8
0D24CF63C355C9CC19D0E49F53F854547E42E669A905956C5A3A92D76DA2932511DD0FB863C2
8987B2D8E1700ADE96BF7E712EBDCCA49D841FB4695DDBF2599D05F368DF18FF4257145F9887
7948CA4CF92F1B7B0EEA58218C09FA2A729EA29C3388111446E249DBC97C3657E160011252FB
B4924CFC3791714A39F23FBFF26D5C03A46FC1B2CC00386601961FD1B14F2A3353BD2E4365CF
0C42C8F2B6CAFB1C7DC6E2418CF5B5658E9B38116EAFD212AD16D8C5865FBF21FF2E7BE46046
99374CE9EB043E054F81675435DEF4536AB5F2E2B0BCFBAE1E8134BC45C5B09077190CE58265
5847DAD0DA2B05EF8B5337603B9624FCD42975BB0F81CBED0C94538513843000FE75DF0A8FEF
D5A17A7A537D087DF70DE981F390AEC6EC645E2C5C7B6DD44FB9EB84B1AED2B73D2346AE0DE9
91014C7D72B0EA8257F15CEF3E169C822960F36363334499A61FA19CAC1719E8F313C9B377D7
56EA58F115BA9DE284C276E6E4F6BA8A071CE7C6128BDD6C3FBA5DE8378C11681FA2595EA673
2DEC36F2C85C40DED557FF9ED386DA976C549DA4F89038A9AAA27F25FE2047875094C6F90A97
681F729ED57D17773FCD45F28F90740C07B087AEFC340A26ABF0DF0ACC89A5CC7FE18F07A376
AA7D707040D23AB066C7F7F03C59DB8B5CDAC46A77EB68CCCFBD0328AC248793A12786C76E17
2174A334A5276C4162611E8EF3525F434C43CC965D2950AEA13619FD243F4E683A33C04D94EA
9CFF6DABB3FF12176C67B0BFFBF14C6F0505DD8B2D385EFF5AD7947BC3817D986C7804EEA146
59EA7973E068580CE5844CBA813FAD9BE24E51E554D3F94761E09702EBC63D503F4FE01F6470
C0A692986BF6B1C95C2909575A10C8F7168DE53ED459263C1503E846A7AB7A01A9F0D5F1DB55
C47E27AC1447DF9C0566D8745402A57B3E8E39DD390C5072F960C7280741ACC1C25EA8C880A4
D3D4C3000798059DA353D69C4D60C59F9266C576DA7B36C6ED428BB27C068B1D93DC1529B39D
F968F5B98B8F3EA032FDABFC818580D081C2414014D621532455779D46BAA6993937BDE8919A
7E55DF173271A33372E3DC0BF980474E25CD5C42464C0B3EBEB2FB1190AE257846F34F185FCA
3C1E4A13A769AFEECB7C627F75EA70A9AFC2C09C3B98433AD8DD5D146E0D13A9ADE256A83317
3AABC713D251ECB19D6F1B9D136B9A60AE574167BA8239FD38C1B8DC625BD17F2D8467EBEE36
36BE24EF3D85DFE6E02D6664F549CD8B730C649D8906684D123879376325BE3BC1D18A81739E
E5402ABD5E75FAEE2A3D12E68BF40869FBA5782B418578622E6AEEA218E539CDCC764903A108
12F28BA15170F1D228ED110BECF1CAFB3ED6AABC808D3DE180D03226985D229B7091B6665207
2B39701D51AA68FE72753E52A266206608C39567F21426752F7AEAA149819AB72EDB43CDE485
6C4183D98AFBD2B42057142E00A6BD3DFB897DA9DBED9C60E0E45D0D64C03CBB80C0F5D6B9E6
8E8DB96C1B0F3015EEB138827A9CF67087C50FF410E7488B3DA97C98A950445E5B44C927ADDC
4A204AA6BC5E101219E463B863F4428A2602D6E2836016490D1D5066189A28D41F3C5C6D8353
B64BF81D9EEB91E68936597B3825947BD7B640694819F93BC51F9FA087F96A56479CD7460BAB
31055B1168D82F0F37780F06003199D6D511F8988BE0B6D8C9FD45692596EA9125C2AAB0139E
9EFA2D2C4F08B40EF61C8C2E1684E9C66244DC966D1607BCD1AC9DD88DA85EABCED28AF77DAC
59F001915E5C42CA68632E866B86FAD58AE0E2693F77D0C3FEE1C31BE9CFD3E98E3AF2A686A2
AC9B86C120D8C9C47A6109CF2E6975C1565D884621CDBA5724F5123AD692AFC1CAC3EC5FC9B4
A72934B9CC6CB549FE5527EFFF4406B2FB41F0980E54DE4175FF228FCA5744AB2C9C4DEA1B58
07CEE695297D04E5F54504BC8765D64BEB39DC128FD7760EDA35AFA2BE7CF782D8895737AEBA
4B02FCBE2EE6C3EA108387D470463759F20007024392DC4760E4DED6E75809D53665E75F3C3A
E9477E3757A5CC9F7443CB148A71BF60A23AA7B1EDF08F81DDBBCD8D4EB17E4403069A69258F
8C79BCC3D1309B8CA9536391465C35383B84B9CC7819625ED1F548D0810AA19226D08110C0D0
5B6B8AF93A74DF5B97FBFB4F5586E6CE1292C1919FF91D04BF4E04838B7A5506A5966CF5FD11
7F531A70DDFE077FEE2835CA2CE6F8CB74A439E374665955511518A7AB8166F68FC80AEA0C58
7A930D4554AAA7A8D7C2B72C9C980EEF92AAD6A9548F9743F381AF25BA28AD0BD16753026CAB
AFB706499C2CDE7D060963FE9BB0030493DA526E33A3A16A98D1E0252831C52C3840B1616E6D
A7750CC341093CF0C05C0E30F0B3063F381F25DCF4D6D608BB2413532CD6DB5A511E3D768F1C
F1708608AEDEF4BCFCD83CE097C079BAFE54CD06D447507FDA14B21B592560D598762EA20C7A
059F4CE40F804021B62D0DB26594CD8CBD75559C38933D3A6C8B13594A530D2BCE94D69C5384
3E8A0636031E3E39DA6AC629A0BE085210C7212CC0EBE4EDBC1A6B5196B1D8DF03BE66CD159F
7C9052074BE024CEE2865B22067368549778A13F14DC194CB78BE2E830037CB88D41F8130C8B
87267107B77EA6E204CC78C70B56CAB719D5FD46F07FFAA6F25091F39489F4A0116BB62911C2
BE8B740183EDC047510F441F524BB1AD2DBCA88716677B36550BE30983CCC5BBFCF4559506D8
9EB6232046241F19789AAE9A95F8E33FEEA4B8E69B094E3BEE8BF9AC4A5874AE0F02A6A0D84A
56618F41D4CED19F3351FBFBA34F7C0E3F237697ABE403556C4CDABB314BDE548797FB1AF529
F2A5BB39DB12EC07720D97569D6D9ADB53B8762A791DAF652E8B76D3EC02871F3094FC79F1A2
4E08D910B236F9D00C3544654B5A71003DD407576EDB6098ED2393912E196D1B47AC222DF442
342C21C0BBC9B2AE3C6C840F80C38E49A0295CF82D6030CC9C7D851FCF67D48C2E6416E67AA3
A4DE8050713DF83F3FA28036A1338985900DEB72919638A67EE9E03504AF12680BB7A696C7F5
888D05626CEA11DC0D4E13B2C7540FEAC023B881EDFDF89A99B08EB27052B3DB5AEC328CA1D6
7F52013323007D01B049D7C29748EB216615F1D6A7A7D11897C1976B618AAB0A01A1541DD0CB
CE18BBEE5938511761E03B837059A43DD6C93194F0BC853BF83EAE10199E4AC0AF6FAB387462
917D8388F6071346F7EFF8D8E02CE0C7C03AC4100A5F11A07BA6922C332444914E16D6DD3199
F137033C71339DAC3759135817AE8B315E75CEF41A5DF4B9B2658AEB814A28993DD4563F2E02
6BCE090021722111B5166423B4CCA87FA50E496CF137C8D7BF032E6AA9D08C2B61F311C2EE34
44CCA3661DA23C1F79D76545D16CB5FDA350B29F270B0AA084D032D049062ED01532DF31CC47
8FCDA85AC305BD5799A6EBEB54733E192265278742BBC4D8ABC378C8820307190ECE2DC2432B
6DFFEF34FA293D833E6A519177CC77D0988E9E042C385352E8881252A078F54E541B64CD47F5
B91A075F5B653830025167E852BF6C9D8ABA1FDB5D00FF5ED18321BEE54577C06F22E6AB0CE9
BCB0D679C2CC82EA692D9B828326F0565D4DA59648C980226C241C49B7A3B6C513F785128D98
A690D38F2689A133787FE1F4A04C1CC50A0956CB7BAF9F8CF6E12B681F44A9ECF2FB6F4FB3AE
C507A9C58EBC7C4B9AD3C65E2BB0E6B047DAB4A32A997853FD0265EF37E93645608F05A4E0DA
35B39E5C5A1E59A6B41FF0F06C30F5270D2863A55B5AAD60DA7B554547CFBC4444BAA19A975D
AE4FF38B8FA892BD7DDDB5108A5CC088F7E1D0CBF9112D4A15313F3F6AD4BB5C494AB3D639DD
73C99FC979A201A925B6706239B694453D520A74355923CBDAC45456CB361F3E4D3FD79B3C7B
64BF131A47AB725C913CD37B5013A35DCBD0D2501340A878EAD75D4571D9C111DACC2CE5A841
9CBC33F9349B72C00B02F385DB3F0B1CAF0956737D076B1AFEAAD99D60C79357EEE3C3F8FD39
DDA67C4A7E0E843766982B2D164723DF1825E94A708077335EB5E133D5C44A9D399F47739498
3AAB998F84F023E2E25412ADC64F3F0FD23DE84231462D274F77E1C1F25EADB2A17788BB9C09
796A16E0F673D65802CD45B58D9F6A04F9251B1284A1A8DCEE4AC966964CD1C0562BAA529D93
A9180E96B5621C5D7544C563996EED7E3D793293F2B3D114178209D77B32AC20085EDA095449
87668CF2ACB94B3B8D5F41F464771D8D55922C8A12EAD3F9E51305C953505B067A01BE9252E5
2101F4AFED247F3756DEAFD898E56F858234528CB3A5E8A0FE41E1AF0927BCD9BF125128591E
227CB963F3A0BA8F15CE2FCF7065221A23711872D67BE35D852E4884E92D1F2ED085D3525B3D
FE1A66237B341A76A1F6B0AF237DB9B7914F4B7B38C56C999C750A3D2EB842522EA64D3E020A
AF9026C98688790DBBBB31A775F423B791C8835169A7797C43ABF946AAEF9494E107235A4520
445844098D7C693EDC1F5F23AC8F35F1B5A20BF528977103F714FC55F98B3404A97B7675CA4B
44A5445EFEBE766C73208C02B0BA98771CB7C87C945BA981CB619093E09DD736F7BCCD0D4E0A
F10A27168181087B335D16970F812A40E9C62F385905AF0D171C2D5386B177F8A56C10DE5CDE
A8D0EB21703EC2196AC73AF38A8852A6D4CC11792EC2CB1F99C1549034365FA4F24D56E02B40
DCAA176EF11E3C593631EA9887DAE22BF39FC2DCF9406FB17D473CDD6A012FE33707E068070B
1F45DA3BD48F36FF540E5E585C6DCE6AEBC78A31A470F9E5B09323978474C3DF8D521D64D947
9581F3B05062E7D3F93641E8F827407FE1163F9494D383E3E93010F2787CF0F770BA2330DC3E
DD296B71FDDF5539A769794B91FE277D2A5C0E957F7CFAE1F81B237058D9638EDFA6807977BA
AE597E88F1012EE5D79C21C6EA7C6B04F73C9CD77BDAC3393252E2D8850A138BF96D1B08C231
45D56FDDA9FC3C8242670163438805E72FBFE633EE393CC49F9C344C246442AD734BC7C6E9B0
78EC135A266143D89FF0F5F5A7CC6FB297A170143362322847D7C4B60183F8D26C1F3753CEAC
662D62113EF4C53C457A7938B467199504E8B27D9CD34A5C0686FEA878B2D792C15EBC385B5A
7A47B12BFCC002F2FED2EBAB2012EFC6B1481388FC8E69A5403787E120328FCC642EC024BB31
C947CC765D54B6595693318348FF1353FA0ACB61B3059D1B4AEBB65E7824A9E78881401CACC2
E00A7F8A6F4453DB0AD3C583660FB02D9A6CCB045D53C16135C560574B10A6BA3EAB6FB86ACA
D46AF178CA8D5E14DBB50B1E65D9776BDDB29B7502D084BFE8FA14DBF73C41B8AFC9E9F6EBDD
9880255E5803AB91354FC44355AE446F6439A66B623A06EB43F84E2DAD051B2F5DFD5DC4AC93
0B58EBAF403A56E46BDF17ABE04F862C178C3E10A0A48050EB8F2EF6E24B3A901F5E384A3C43
BC035EB30F07B81B6DFE91B550C75785C7C167D2DC4D2E3FE029A7EAF59BDF5EEF04330D5564
56193A0DC4008B840ABBF81CAC9B39AB6161DAF440D11634CF8AC2CDCB493A93B2303AEEFD08
0A72A60A60F75904F2A98DC225C490B14B01AB37CC8C73E488FBD9E58E7F6F856CF6B5C29179
28AB09AB88BE2A14C69B3A79051782C7A167D0EB0C9F1D1B803ED86E91D71FDCAC190EEEC796
73C9FC69B9BC8497EC76143856060ED505DB14963E338BC7843EF8EF15579A9045233680CB60
87F56B9558D608D99D31D4179252A15D94122DCB3AFFD972F6C1CA9A4E7E6B82D46D59BB4455
212C031B193AC8842C19244C4E7C7B5091CF8DA6F6018D16B73D535C575E45ECB826943F8F5C
8812CB7AD2DCF4C6E8F95362D79AE1FB42841F91359BF7527E0593CFF5C0D8D506B43F1E859C
922715761861C47FC0D64F4E095146EA0B37AD30E3270CFFFC986A8FE62AEF43046976B61352
820AEDCF17AFC84C4C7355748F007060D08659976C5A35DA7034C2A9540321957127A3531EE7
A75B61A8999CD4DFF26E9A5FB8453A3FCB7F4D86D4F48B4947B7B7ACA3D7FBA387E5E0DC1DD7
7E2F09C7BA7BD5F1464DE1010F40BCC3DBE5BC82647DFF8711B572AC841DED06F6F860C9F111
7B4B12EBCE79DF97BDA158149BA5ACB97D96F5BE2BDF14BEEC9182797DD3C4C6BBAA59464BC6
03EB1B84B3CD3466AEDCC31AF82047C67E36CCE26B56A37A0C2A919DFE65135315820162EA67
1FB2F7C0DBB441E28EE41C61BBFE217D67651BC51DA30AC2B3651CDE82AA08133D74E4EA9CF5
1E64FCEC62B65716C280B19666E800AB71993C62E63F16B163EB9A8C7D6E55939A9A544778DA
05A3648A2BB6263BA70EDE5A92239EA6E041D1447D97F7B207215800F9F55F43602BDE3DD5E7
E8A7FFC1B05A76A90AF2C942829B5CEA138CB009B1A36384F06852FBC671ADD437A53E84107D
BA31E1C82B91241CEEE1EFA7529FCD0A6B2E44E862418B6AE61324F252505B95E4DE0AB92A19
37864A956F4DF4A8B9C714C290C9F5AEB904A859870F969EB6B8873E5CEFEC0E85190EFA1BFF
B778227F09558BE85C6AC0AD6FE56824A565B9EBD65293D78E5032A757227CE1E67D92E812CA
C3FA3AC369D19B3703831237C69F3D83B2C249E7FB9C0646C7C2BEBEEE56A3693FF7F7A492C5
8E52279343F44931F22EF5479896D1274358D769214F2AC432A81E2C9611100C856A427D3C52
216F67D6D301135B5D7E7783EB5665C9F594C384EBF5767401153CB3FAC10436E661977546FC
B680B1F009C4BA6120CF086311D0F2A7DE930556BD1C755BE72328B5B2B24424F3329A364435
55F13441A62699717E5B236A1700B516E51F4672C272C598AF85DB5EBCE6754CEFC50CBF6E8B
D345EB611690F86080D9B3F9EE77062545EA26171F769DA6A3DCD4FCCCF375C724F8285CF0B0
13F84FD22F1323986A163176B84F0F572E0873FBE38E848800037BDC449925FB58C8C5EBF699
0BA3D508E7CF7BE946B5E58DD203E3EE0A7F6E671017AAA82EA7F7068F98E9BFF2FCE05516E6
F5597E300DE964A36C85370DED3F36A3A6691C185DCCEE8FFD419AFD4F4DCB6C3756C9CE2300
E54F622F95B9A6F610FB1419C0684064559F9449D8736590F10B38D387769215F438A55701BB
16F608B914020D9D68D1B4E6B0A72ACF444AFA7014C016FA3AD2439C2E66A63ADF26DD2641FA
FF61468938EFA17189E3AC4571FD571F28954FBB1B1F003C6E6FC73567B259329554B33DE3CD
5ACE7126971ED0F6FB5FD10AF89FE43B9F15E8934FBC937BF3A9C00B1E0BDA4A57220759A7B3
679C49710B9D8484D96607F14287DF9B42E7466D856D94BE768BC5E5D64D37BC70C0793FB83E
DF2B9EAA86E285FB25FC0E61773715DFE50BFDEA7555E590838794308F277D2A2ED1076DA177
2F85248DF2F1F36CFEFA542E41020CD09974588C4860901A0F2C17F0C2BD5004BBEE58194FDE
840584A97AEE2C8AD02A3C3E47251A643D30F7203CC913183B2BE2ADBC6E9C748092CE587BD5
5A5BDB6F62909DB2A0091398853E63F81E72B62B5CD820152C5EF717004418CAFE2725C10DC3
681E630364A8B783321A2494224DA600187A459E26B21F40D999B944703F061517200DCFCF9F
C449EB9F3D343E38A1E44EE132A7B0DF1F0EB4EE3CDE097459E7F8C4831D786504653919C92B
A727DB9D713ADA8FC3E37D8314DF2111483F1660789265751BF5ECEF9B33AA2876E941FEB15F
B4EC6E739714E392DC7763937760B88C532ABBBF1F780335129E8ABE1E0BF7782630868E070E
6BD04AC7AC17609C0BA1DE39D7AD73F74E48380C65FA4F596B104C580467618E3046C0883994
906A273FC4D4B662F3CC32F52B47DECA45428B0A1B46808B1A97FE8844AC20968DC0BFA2A247
A556E57A64DD03E9193A16CF7C3F24849A5E58B1CDD52AE8BF3642E503090BA521339F17B4DB
0A08C4F7FA4A95129C116BF11ED00000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndFont
 TeXDict begin 40258437 52099154 1000 600 600 (stokesfig.dvi)
@start /Fa 206[57 49[{}1 41.511 /CMSY5 rf /Fb 137[33
99[32 18[{}2 58.1154 /CMMI7 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -128 1323 a @beginspecial
0 @llx 0 @lly 326 @urx 174 @ury 3260 @rwi @setspecial
%%BeginDocument: stokes.pstex
%!PS-Adobe-2.0 EPSF-2.0
%%Title: stokes.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Fri Mar  3 10:43:01 2006
%%For: gphani@gandhamoff (Gandham Phanikumar)
%%BoundingBox: 0 0 326 174
%%Magnification: 0.6000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 174 moveto 0 0 lineto 326 0 lineto 326 174 lineto closepath clip newpath
-2.5 184.7 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.03780 0.03780 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 1521 2160 790 790 0 360 DrawEllipse gs col11 1.00 shd ef gr gs col0 s gr

% Ellipse
n 4398 2086 811 811 0 360 DrawEllipse gs col11 1.00 shd ef gr gs col0 s gr

% Ellipse
n 6884 2195 811 811 0 360 DrawEllipse gs col11 1.00 shd ef gr gs col0 s gr

% Polyline
gs  clippath
217 4110 m 157 4110 l 157 4262 l 187 4142 l 217 4262 l cp
eoclip
n 187 4684 m
 187 4125 l gs col0 s gr gr

% arrowhead
n 217 4262 m 187 4142 l 157 4262 l  col0 s
% Polyline
gs  clippath
476 4131 m 416 4131 l 416 4283 l 446 4163 l 476 4283 l cp
eoclip
n 446 4705 m
 446 4146 l gs col0 s gr gr

% arrowhead
n 476 4283 m 446 4163 l 416 4283 l  col0 s
% Polyline
gs  clippath
755 4120 m 695 4120 l 695 4272 l 725 4152 l 755 4272 l cp
eoclip
n 725 4694 m
 725 4135 l gs col0 s gr gr

% arrowhead
n 755 4272 m 725 4152 l 695 4272 l  col0 s
% Polyline
gs  clippath
1287 4099 m 1227 4099 l 1227 4251 l 1257 4131 l 1287 4251 l cp
eoclip
n 1257 4673 m
 1257 4114 l gs col0 s gr gr

% arrowhead
n 1287 4251 m 1257 4131 l 1227 4251 l  col0 s
% Polyline
gs  clippath
1828 4101 m 1768 4101 l 1768 4253 l 1798 4133 l 1828 4253 l cp
eoclip
n 1798 4675 m
 1798 4116 l gs col0 s gr gr

% arrowhead
n 1828 4253 m 1798 4133 l 1768 4253 l  col0 s
% Polyline
gs  clippath
2369 4113 m 2309 4113 l 2309 4265 l 2339 4145 l 2369 4265 l cp
eoclip
n 2339 4687 m
 2339 4128 l gs col0 s gr gr

% arrowhead
n 2369 4265 m 2339 4145 l 2309 4265 l  col0 s
% Polyline
gs  clippath
1021 4109 m 961 4109 l 961 4261 l 991 4141 l 1021 4261 l cp
eoclip
n 991 4683 m
 991 4124 l gs col0 s gr gr

% arrowhead
n 1021 4261 m 991 4141 l 961 4261 l  col0 s
% Polyline
gs  clippath
2635 4100 m 2575 4100 l 2575 4252 l 2605 4132 l 2635 4252 l cp
eoclip
n 2605 4674 m
 2605 4115 l gs col0 s gr gr

% arrowhead
n 2635 4252 m 2605 4132 l 2575 4252 l  col0 s
% Polyline
gs  clippath
1557 4104 m 1497 4104 l 1497 4256 l 1527 4136 l 1557 4256 l cp
eoclip
n 1527 4678 m
 1527 4119 l gs col0 s gr gr

% arrowhead
n 1557 4256 m 1527 4136 l 1497 4256 l  col0 s
% Polyline
gs  clippath
2099 4104 m 2039 4104 l 2039 4256 l 2069 4136 l 2099 4256 l cp
eoclip
n 2069 4678 m
 2069 4119 l gs col0 s gr gr

% arrowhead
n 2099 4256 m 2069 4136 l 2039 4256 l  col0 s
% Polyline
gs  clippath
2916 4106 m 2856 4106 l 2856 4258 l 2886 4138 l 2916 4258 l cp
eoclip
n 2886 4680 m
 2886 4121 l gs col0 s gr gr

% arrowhead
n 2916 4258 m 2886 4138 l 2856 4258 l  col0 s
% Polyline
gs  clippath
1556 2930 m 1496 2931 l 1497 3083 l 1527 2963 l 1557 3082 l cp
eoclip
n 1530 3964 m
 1527 2946 l gs col0 s gr gr

% arrowhead
n 1557 3082 m 1527 2963 l 1497 3083 l  col0 s
% Polyline
gs  clippath
5148 2047 m 5145 2107 l 5297 2114 l 5179 2079 l 5300 2054 l cp
eoclip
n 5659 2077 m 5209 2080 l
 5162 2078 l gs col0 s gr gr

% arrowhead
n 5300 2054 m 5179 2079 l 5297 2114 l  col0 s
% Polyline
gs  clippath
4850 1493 m 4896 1531 l 4994 1415 l 4894 1488 l 4948 1377 l cp
eoclip
n 5203 1116 m 4916 1462 l
 4883 1501 l gs col0 s gr gr

% arrowhead
n 4948 1377 m 4894 1488 l 4994 1415 l  col0 s
% Polyline
gs  clippath
4365 1349 m 4425 1349 l 4425 1197 l 4395 1317 l 4365 1197 l cp
eoclip
n 4393 825 m 4395 1275 l
 4395 1334 l gs col0 s gr gr

% arrowhead
n 4365 1197 m 4395 1317 l 4425 1197 l  col0 s
% Polyline
gs  clippath
3654 2105 m 3657 2045 l 3505 2039 l 3624 2074 l 3502 2099 l cp
eoclip
n 3137 2066 m 3587 2073 l
 3641 2075 l gs col0 s gr gr

% arrowhead
n 3502 2099 m 3624 2074 l 3505 2039 l  col0 s
% Polyline
gs  clippath
3850 1588 m 3896 1550 l 3801 1432 l 3854 1545 l 3755 1470 l cp
eoclip
n 3509 1192 m 3826 1511 l
 3864 1558 l gs col0 s gr gr

% arrowhead
n 3755 1470 m 3854 1545 l 3801 1432 l  col0 s
% Polyline
gs  clippath
4422 2809 m 4362 2806 l 4354 2958 l 4391 2840 l 4414 2961 l cp
eoclip
n 4382 3347 m 4388 2897 l
 4392 2823 l gs col0 s gr gr

% arrowhead
n 4414 2961 m 4391 2840 l 4354 2958 l  col0 s
% Polyline
gs  clippath
4945 2601 m 4903 2643 l 5010 2751 l 4947 2645 l 5053 2708 l cp
eoclip
n 5281 2985 m 4966 2664 l
 4935 2633 l gs col0 s gr gr

% arrowhead
n 5053 2708 m 4947 2645 l 5010 2751 l  col0 s
% Polyline
gs  clippath
3838 2588 m 3803 2539 l 3680 2628 l 3796 2583 l 3715 2676 l cp
eoclip
n 3423 2885 m 3771 2600 l
 3809 2573 l gs col0 s gr gr

% arrowhead
n 3715 2676 m 3796 2583 l 3680 2628 l  col0 s
% Polyline
gs  clippath
6103 1730 m 6043 1730 l 6043 1882 l 6073 1762 l 6103 1882 l cp
eoclip
n 6074 2240 m 6073 2195 l
 6073 1745 l gs col0 s gr gr

% arrowhead
n 6103 1882 m 6073 1762 l 6043 1882 l  col0 s
% Polyline
gs  clippath
7725 1730 m 7665 1730 l 7665 1882 l 7695 1762 l 7725 1882 l cp
eoclip
n 7695 1745 m 7695 2195 l
 7694 2240 l gs col0 s gr gr

% arrowhead
n 7725 1882 m 7695 1762 l 7665 1882 l  col0 s
% Polyline
gs  clippath
7769 2569 m 7732 2522 l 7613 2615 l 7726 2565 l 7650 2662 l cp
eoclip
n 7739 2555 m 7385 2833 l
 7379 2870 l gs col0 s gr gr

% arrowhead
n 7650 2662 m 7726 2565 l 7613 2615 l  col0 s
% Polyline
gs  clippath
6837 1286 m 6803 1236 l 6677 1320 l 6794 1279 l 6710 1370 l cp
eoclip
n 6389 1565 m 6434 1520 l
 6808 1270 l gs col0 s gr gr

% arrowhead
n 6710 1370 m 6794 1279 l 6677 1320 l  col0 s
% Polyline
gs  clippath
7037 1246 m 7000 1293 l 7119 1386 l 7044 1289 l 7156 1339 l cp
eoclip
n 7031 1279 m 7385 1557 l
 7424 1565 l gs col0 s gr gr

% arrowhead
n 7156 1339 m 7044 1289 l 7119 1386 l  col0 s
% Polyline
gs  clippath
5975 2241 m 5925 2275 l 6009 2401 l 5968 2285 l 6059 2368 l cp
eoclip
n 6265 2728 m 6209 2645 l
 5959 2271 l gs col0 s gr gr

% arrowhead
n 6059 2368 m 5968 2285 l 6009 2401 l  col0 s
% Polyline
gs  clippath
4446 3912 m 4386 3912 l 4386 4064 l 4416 3944 l 4446 4064 l cp
eoclip
n 4416 4867 m
 4416 3927 l gs col0 s gr gr

% arrowhead
n 4446 4064 m 4416 3944 l 4386 4064 l  col0 s
% Polyline
gs  clippath
5155 4352 m 5120 4303 l 4998 4394 l 5113 4347 l 5034 4442 l cp
eoclip
n 4426 4857 m
 5126 4337 l gs col0 s gr gr

% arrowhead
n 5034 4442 m 5113 4347 l 4998 4394 l  col0 s
% Polyline
2 slj
gs  clippath
1375 695 m 1315 698 l 1321 849 l 1347 729 l 1381 847 l cp
eoclip
n 1346 3948 m 1346 3945 l 1346 3938 l 1346 3925 l 1346 3906 l 1346 3882 l
 1346 3854 l 1346 3823 l 1346 3791 l 1346 3759 l 1346 3728 l
 1346 3698 l 1346 3671 l 1346 3646 l 1346 3623 l 1346 3602 l
 1346 3583 l 1346 3564 l 1346 3547 l 1346 3530 l 1346 3509 l
 1346 3489 l 1346 3468 l 1346 3448 l 1346 3428 l 1346 3407 l
 1346 3387 l 1346 3367 l 1346 3348 l 1345 3330 l 1345 3312 l
 1345 3296 l 1345 3280 l 1344 3265 l 1344 3251 l 1344 3238 l
 1343 3221 l 1342 3204 l 1341 3188 l 1339 3171 l 1336 3155 l
 1333 3138 l 1328 3123 l 1322 3108 l 1315 3095 l 1308 3082 l
 1299 3070 l 1288 3059 l 1279 3051 l 1270 3043 l 1259 3035 l
 1246 3027 l 1233 3018 l 1219 3009 l 1204 3001 l 1188 2992 l
 1172 2983 l 1155 2974 l 1139 2965 l 1123 2956 l 1107 2948 l
 1091 2939 l 1076 2930 l 1061 2922 l 1046 2912 l 1031 2903 l
 1016 2893 l 1000 2882 l 984 2871 l 968 2859 l 952 2846 l
 936 2833 l 920 2819 l 905 2806 l 890 2792 l 876 2778 l
 862 2764 l 850 2750 l 837 2736 l 826 2722 l 815 2709 l
 805 2696 l 795 2683 l 785 2668 l 775 2653 l 765 2637 l
 755 2621 l 745 2604 l 736 2587 l 727 2569 l 718 2551 l
 710 2533 l 702 2516 l 695 2498 l 689 2481 l 683 2464 l
 678 2447 l 673 2431 l 668 2414 l 664 2396 l 660 2378 l
 656 2360 l 652 2340 l 649 2321 l 647 2300 l 644 2279 l
 642 2258 l 641 2236 l 640 2215 l 639 2194 l 638 2173 l
 639 2153 l 639 2133 l 640 2114 l 641 2095 l 642 2076 l
 644 2057 l 646 2038 l 648 2018 l 651 1999 l 655 1978 l
 659 1957 l 663 1936 l 668 1915 l 674 1893 l 679 1872 l
 686 1851 l 692 1831 l 700 1811 l 707 1792 l 714 1774 l
 722 1756 l 731 1740 l 739 1723 l 748 1707 l 758 1691 l
 768 1675 l 779 1659 l 790 1643 l 803 1627 l 815 1611 l
 829 1594 l 842 1579 l 856 1563 l 870 1548 l 883 1534 l
 897 1520 l 910 1507 l 923 1495 l 935 1483 l 947 1472 l
 959 1461 l 972 1449 l 985 1438 l 998 1427 l 1012 1415 l
 1025 1404 l 1039 1393 l 1053 1382 l 1067 1371 l 1081 1361 l
 1095 1351 l 1108 1341 l 1120 1332 l 1133 1324 l 1144 1316 l
 1156 1308 l 1167 1301 l 1179 1293 l 1192 1285 l 1205 1276 l
 1218 1268 l 1231 1259 l 1244 1249 l 1257 1240 l 1269 1230 l
 1280 1219 l 1291 1209 l 1300 1198 l 1309 1187 l 1316 1176 l
 1323 1164 l 1328 1151 l 1333 1137 l 1337 1123 l 1341 1107 l
 1344 1090 l 1347 1072 l 1349 1054 l 1350 1035 l 1351 1017 l
 1352 999 l 1352 981 l 1352 964 l 1352 947 l 1352 931 l
 1352 916 l 1351 900 l 1351 884 l 1351 866 l 1350 848 l
 1349 827 l 1349 805 l 1348 782 l 1347 760 l 1347 740 l

 1346 712 l gs col0 s gr gr

% arrowhead
0 slj
n 1381 847 m 1347 729 l 1321 849 l  col0 s
% Polyline
2 slj
gs  clippath
1167 752 m 1107 749 l 1101 901 l 1136 783 l 1161 903 l cp
eoclip
n 1164 3955 m 1164 3952 l 1164 3944 l 1164 3932 l 1164 3913 l 1164 3889 l
 1164 3860 l 1164 3828 l 1164 3796 l 1164 3763 l 1164 3732 l
 1165 3702 l 1165 3674 l 1165 3649 l 1165 3626 l 1165 3605 l
 1165 3585 l 1166 3567 l 1166 3549 l 1166 3532 l 1167 3512 l
 1167 3491 l 1167 3471 l 1167 3451 l 1168 3431 l 1167 3411 l
 1167 3391 l 1166 3371 l 1165 3353 l 1163 3335 l 1161 3317 l
 1158 3301 l 1155 3286 l 1151 3272 l 1147 3259 l 1142 3246 l
 1136 3232 l 1128 3219 l 1119 3205 l 1110 3191 l 1098 3178 l
 1086 3164 l 1073 3151 l 1060 3139 l 1046 3126 l 1032 3115 l
 1017 3104 l 1003 3093 l 989 3083 l 975 3074 l 963 3065 l
 950 3057 l 937 3048 l 924 3039 l 910 3030 l 896 3020 l
 881 3010 l 866 3000 l 851 2989 l 836 2978 l 822 2967 l
 808 2956 l 795 2945 l 782 2933 l 769 2922 l 757 2910 l
 746 2899 l 735 2888 l 724 2876 l 713 2863 l 702 2849 l
 690 2835 l 679 2820 l 667 2804 l 656 2788 l 644 2772 l
 633 2755 l 623 2739 l 613 2722 l 603 2706 l 594 2690 l
 585 2674 l 577 2658 l 569 2642 l 561 2626 l 553 2610 l
 546 2593 l 538 2575 l 531 2557 l 523 2539 l 516 2519 l
 509 2499 l 503 2479 l 497 2459 l 491 2438 l 485 2418 l
 480 2398 l 476 2378 l 472 2358 l 468 2339 l 465 2320 l
 462 2301 l 460 2281 l 458 2262 l 456 2241 l 455 2221 l
 454 2199 l 453 2177 l 453 2154 l 453 2130 l 454 2107 l
 455 2083 l 456 2060 l 458 2037 l 461 2015 l 463 1993 l
 467 1972 l 470 1952 l 474 1932 l 478 1912 l 482 1893 l
 487 1874 l 493 1854 l 499 1835 l 506 1815 l 513 1794 l
 521 1774 l 529 1753 l 538 1733 l 548 1712 l 557 1692 l
 567 1673 l 578 1655 l 588 1637 l 599 1619 l 609 1603 l
 620 1587 l 631 1572 l 643 1556 l 654 1541 l 667 1526 l
 680 1510 l 694 1495 l 708 1479 l 723 1463 l 738 1447 l
 754 1431 l 769 1415 l 785 1400 l 800 1385 l 816 1370 l
 831 1356 l 845 1343 l 859 1330 l 873 1317 l 887 1305 l
 902 1291 l 917 1276 l 932 1262 l 947 1247 l 963 1232 l
 978 1216 l 994 1200 l 1008 1184 l 1023 1168 l 1036 1151 l
 1049 1135 l 1061 1119 l 1071 1103 l 1081 1088 l 1089 1073 l
 1096 1058 l 1103 1042 l 1109 1026 l 1114 1009 l 1118 991 l
 1122 970 l 1125 948 l 1128 923 l 1130 896 l 1132 869 l
 1134 841 l 1135 816 l 1136 795 l
 1137 766 l gs col0 s gr gr

% arrowhead
0 slj
n 1161 903 m 1136 783 l 1101 901 l  col0 s
% Polyline
2 slj
gs  clippath
945 828 m 886 821 l 867 971 l 912 856 l 926 978 l cp
eoclip
n 988 3948 m 988 3947 l 988 3944 l 988 3936 l 988 3921 l 988 3902 l
 988 3878 l 988 3852 l 988 3825 l 988 3799 l 988 3775 l
 988 3753 l 987 3732 l 987 3713 l 987 3694 l 987 3677 l
 987 3659 l 987 3641 l 986 3622 l 986 3603 l 985 3583 l
 984 3562 l 983 3541 l 982 3520 l 980 3499 l 978 3478 l
 975 3457 l 972 3438 l 969 3419 l 965 3401 l 961 3385 l
 956 3369 l 951 3355 l 944 3339 l 936 3324 l 927 3309 l
 917 3294 l 906 3280 l 894 3266 l 881 3252 l 868 3238 l
 854 3225 l 839 3212 l 825 3199 l 811 3187 l 797 3175 l
 783 3163 l 772 3154 l 761 3144 l 749 3133 l 737 3122 l
 724 3110 l 711 3098 l 697 3085 l 684 3071 l 670 3057 l
 656 3042 l 642 3027 l 628 3012 l 615 2997 l 602 2981 l
 589 2966 l 576 2950 l 564 2935 l 552 2919 l 542 2904 l
 531 2889 l 520 2873 l 509 2856 l 498 2839 l 487 2820 l
 475 2801 l 464 2782 l 453 2761 l 442 2741 l 431 2720 l
 420 2699 l 410 2678 l 400 2657 l 391 2637 l 383 2616 l
 374 2597 l 367 2577 l 360 2558 l 353 2539 l 347 2519 l
 341 2500 l 335 2480 l 329 2459 l 324 2438 l 319 2417 l
 314 2395 l 309 2373 l 305 2350 l 301 2327 l 298 2305 l
 294 2282 l 291 2260 l 289 2238 l 287 2217 l 285 2196 l
 283 2176 l 282 2157 l 281 2138 l 280 2119 l 279 2098 l
 278 2077 l 278 2056 l 278 2034 l 279 2012 l 280 1990 l
 281 1967 l 282 1944 l 284 1921 l 287 1899 l 289 1877 l
 293 1855 l 296 1834 l 300 1814 l 304 1794 l 309 1775 l
 314 1757 l 319 1739 l 325 1722 l 331 1704 l 338 1687 l
 345 1669 l 353 1651 l 362 1633 l 371 1614 l 381 1596 l
 391 1578 l 402 1560 l 413 1542 l 424 1526 l 435 1509 l
 446 1494 l 457 1479 l 468 1465 l 479 1451 l 490 1438 l
 503 1424 l 515 1410 l 529 1395 l 543 1381 l 557 1367 l
 572 1352 l 587 1338 l 602 1324 l 617 1310 l 632 1297 l
 647 1284 l 661 1272 l 674 1261 l 687 1250 l 700 1240 l
 712 1230 l 725 1219 l 738 1208 l 752 1197 l 765 1186 l
 778 1174 l 791 1163 l 803 1151 l 815 1138 l 826 1126 l
 837 1114 l 846 1102 l 854 1090 l 862 1078 l 868 1066 l
 874 1053 l 879 1040 l 884 1025 l 889 1008 l 893 989 l
 897 967 l 901 943 l 904 918 l 908 894 l 910 872 l

 914 840 l gs col0 s gr gr

% arrowhead
0 slj
n 926 978 m 912 856 l 867 971 l  col0 s
% Polyline
2 slj
gs  clippath
622 897 m 565 876 l 513 1019 l 583 917 l 569 1040 l cp
eoclip
n 724 3955 m 724 3954 l 724 3951 l 723 3943 l 723 3929 l 722 3910 l
 721 3887 l 720 3862 l 719 3836 l 718 3812 l 717 3789 l
 716 3769 l 715 3750 l 715 3734 l 714 3718 l 714 3703 l
 713 3689 l 713 3674 l 712 3658 l 712 3642 l 711 3625 l
 710 3609 l 709 3592 l 707 3576 l 705 3559 l 703 3543 l
 699 3528 l 696 3513 l 692 3499 l 687 3485 l 682 3472 l
 676 3461 l 670 3449 l 663 3438 l 656 3425 l 647 3413 l
 638 3400 l 628 3386 l 618 3373 l 607 3359 l 595 3345 l
 584 3331 l 572 3318 l 561 3304 l 549 3291 l 538 3278 l
 526 3264 l 516 3252 l 505 3239 l 494 3226 l 482 3212 l
 471 3198 l 459 3183 l 446 3167 l 434 3151 l 421 3135 l
 409 3118 l 396 3101 l 384 3084 l 373 3067 l 362 3051 l
 351 3035 l 341 3019 l 331 3003 l 322 2987 l 313 2971 l
 304 2955 l 295 2938 l 287 2921 l 278 2903 l 269 2884 l
 261 2865 l 252 2846 l 244 2827 l 236 2807 l 228 2788 l
 220 2769 l 213 2750 l 206 2732 l 200 2715 l 193 2698 l
 187 2681 l 182 2665 l 175 2647 l 168 2628 l 162 2610 l
 155 2590 l 149 2571 l 142 2551 l 136 2530 l 129 2510 l
 123 2489 l 118 2468 l 113 2448 l 108 2429 l 103 2409 l
 99 2391 l 96 2372 l 93 2354 l 90 2338 l 88 2321 l
 86 2304 l 84 2287 l 83 2269 l 82 2250 l 80 2231 l
 80 2211 l 79 2191 l 78 2172 l 78 2152 l 78 2132 l
 78 2113 l 78 2095 l 78 2077 l 78 2059 l 79 2042 l
 79 2025 l 80 2006 l 81 1987 l 82 1967 l 83 1947 l
 84 1926 l 86 1905 l 87 1884 l 90 1862 l 92 1841 l
 95 1820 l 98 1800 l 101 1780 l 105 1762 l 109 1744 l
 114 1726 l 119 1710 l 124 1693 l 130 1676 l 136 1659 l
 143 1642 l 151 1625 l 160 1607 l 169 1589 l 179 1571 l
 189 1552 l 200 1535 l 211 1517 l 222 1500 l 234 1483 l
 245 1467 l 256 1451 l 268 1435 l 279 1421 l 290 1406 l
 301 1391 l 313 1376 l 325 1360 l 338 1344 l 351 1327 l
 365 1310 l 378 1293 l 391 1276 l 404 1259 l 416 1243 l
 428 1227 l 440 1211 l 450 1196 l 460 1181 l 470 1167 l
 479 1153 l 488 1138 l 497 1122 l 505 1106 l 514 1090 l
 522 1072 l 531 1052 l 540 1031 l 549 1008 l 558 985 l
 566 962 l 574 942 l
 589 901 l gs col0 s gr gr

% arrowhead
0 slj
n 569 1040 m 583 917 l 513 1019 l  col0 s
% Polyline
2 slj
gs  clippath
1734 712 m 1674 709 l 1668 861 l 1703 743 l 1728 863 l cp
eoclip
n 1704 3962 m 1704 3959 l 1704 3952 l 1704 3939 l 1704 3920 l 1704 3896 l
 1704 3868 l 1704 3837 l 1704 3805 l 1704 3773 l 1704 3742 l
 1704 3712 l 1704 3685 l 1704 3660 l 1704 3637 l 1704 3616 l
 1704 3597 l 1704 3578 l 1704 3561 l 1704 3544 l 1704 3523 l
 1704 3503 l 1704 3482 l 1704 3462 l 1704 3442 l 1704 3421 l
 1704 3401 l 1704 3381 l 1704 3362 l 1705 3344 l 1705 3326 l
 1705 3310 l 1705 3294 l 1706 3279 l 1706 3265 l 1706 3252 l
 1707 3235 l 1708 3218 l 1709 3202 l 1711 3185 l 1714 3169 l
 1717 3152 l 1722 3137 l 1728 3122 l 1735 3109 l 1742 3096 l
 1751 3084 l 1762 3073 l 1771 3065 l 1780 3057 l 1791 3049 l
 1804 3041 l 1817 3032 l 1831 3023 l 1846 3015 l 1862 3006 l
 1878 2997 l 1895 2988 l 1911 2979 l 1927 2970 l 1943 2962 l
 1959 2953 l 1974 2944 l 1989 2936 l 2004 2926 l 2019 2917 l
 2034 2907 l 2050 2896 l 2066 2885 l 2082 2873 l 2098 2860 l
 2114 2847 l 2130 2833 l 2145 2820 l 2160 2806 l 2174 2792 l
 2188 2778 l 2200 2764 l 2213 2750 l 2225 2736 l 2235 2723 l
 2245 2710 l 2255 2697 l 2265 2682 l 2275 2667 l 2285 2651 l
 2295 2635 l 2305 2618 l 2314 2601 l 2323 2583 l 2332 2565 l
 2340 2547 l 2348 2530 l 2355 2512 l 2361 2495 l 2367 2478 l
 2372 2461 l 2378 2445 l 2382 2428 l 2386 2410 l 2390 2392 l
 2394 2374 l 2398 2354 l 2401 2335 l 2403 2314 l 2406 2293 l
 2408 2272 l 2409 2250 l 2410 2229 l 2411 2208 l 2412 2187 l
 2411 2167 l 2411 2147 l 2410 2128 l 2409 2109 l 2408 2090 l
 2406 2071 l 2404 2052 l 2402 2032 l 2399 2013 l 2395 1992 l
 2391 1971 l 2387 1950 l 2382 1929 l 2376 1907 l 2371 1886 l
 2364 1865 l 2358 1845 l 2350 1825 l 2343 1806 l 2336 1788 l
 2328 1770 l 2319 1754 l 2311 1737 l 2302 1721 l 2292 1705 l
 2282 1689 l 2271 1673 l 2260 1657 l 2247 1641 l 2235 1625 l
 2221 1608 l 2208 1593 l 2194 1577 l 2180 1562 l 2167 1548 l
 2153 1534 l 2140 1521 l 2127 1509 l 2115 1497 l 2103 1486 l
 2091 1475 l 2078 1463 l 2065 1452 l 2052 1441 l 2038 1429 l
 2025 1418 l 2011 1407 l 1997 1396 l 1983 1385 l 1969 1375 l
 1955 1365 l 1942 1355 l 1930 1346 l 1917 1338 l 1906 1330 l
 1894 1322 l 1883 1315 l 1871 1307 l 1858 1299 l 1845 1290 l
 1832 1282 l 1819 1273 l 1806 1263 l 1793 1254 l 1781 1244 l
 1770 1233 l 1759 1223 l 1750 1212 l 1741 1201 l 1734 1190 l
 1728 1178 l 1722 1165 l 1717 1151 l 1713 1137 l 1709 1121 l
 1706 1104 l 1703 1086 l 1701 1068 l 1700 1049 l 1699 1031 l
 1698 1013 l 1698 995 l 1698 978 l 1698 961 l 1698 945 l
 1698 930 l 1699 914 l 1699 898 l 1699 880 l 1700 862 l
 1701 841 l 1701 819 l 1702 796 l 1703 774 l 1703 754 l

 1704 726 l gs col0 s gr gr

% arrowhead
0 slj
n 1728 863 m 1703 743 l 1668 861 l  col0 s
% Polyline
2 slj
gs  clippath
1943 736 m 1883 739 l 1889 890 l 1915 770 l 1949 888 l cp
eoclip
n 1887 3942 m 1887 3939 l 1887 3931 l 1887 3919 l 1887 3900 l 1887 3876 l
 1887 3847 l 1887 3815 l 1887 3783 l 1887 3750 l 1887 3719 l
 1886 3689 l 1886 3661 l 1886 3636 l 1886 3613 l 1886 3592 l
 1886 3572 l 1885 3554 l 1885 3536 l 1885 3519 l 1884 3499 l
 1884 3478 l 1884 3458 l 1884 3438 l 1883 3418 l 1884 3398 l
 1884 3378 l 1885 3358 l 1886 3340 l 1888 3322 l 1890 3304 l
 1893 3288 l 1896 3273 l 1900 3259 l 1904 3246 l 1909 3233 l
 1915 3219 l 1923 3206 l 1932 3192 l 1941 3178 l 1953 3165 l
 1965 3151 l 1978 3138 l 1991 3126 l 2005 3113 l 2019 3102 l
 2034 3091 l 2048 3080 l 2062 3070 l 2076 3061 l 2088 3052 l
 2101 3044 l 2114 3035 l 2127 3026 l 2141 3017 l 2155 3007 l
 2170 2997 l 2185 2987 l 2200 2976 l 2215 2965 l 2229 2954 l
 2243 2943 l 2256 2932 l 2269 2920 l 2282 2909 l 2294 2897 l
 2305 2886 l 2316 2875 l 2327 2863 l 2338 2850 l 2349 2836 l
 2361 2822 l 2372 2807 l 2384 2791 l 2395 2775 l 2407 2759 l
 2418 2742 l 2428 2726 l 2438 2709 l 2448 2693 l 2457 2677 l
 2466 2661 l 2474 2645 l 2482 2629 l 2490 2613 l 2498 2597 l
 2505 2580 l 2513 2562 l 2520 2544 l 2528 2526 l 2535 2506 l
 2542 2486 l 2548 2466 l 2554 2446 l 2560 2425 l 2566 2405 l
 2571 2385 l 2575 2365 l 2579 2345 l 2583 2326 l 2586 2307 l
 2589 2288 l 2591 2268 l 2593 2249 l 2595 2228 l 2596 2208 l
 2597 2186 l 2598 2164 l 2598 2141 l 2598 2117 l 2597 2094 l
 2596 2070 l 2595 2047 l 2593 2024 l 2590 2002 l 2588 1980 l
 2584 1959 l 2581 1939 l 2577 1919 l 2573 1899 l 2569 1880 l
 2564 1861 l 2558 1841 l 2552 1822 l 2545 1802 l 2538 1781 l
 2530 1761 l 2522 1740 l 2513 1720 l 2503 1699 l 2494 1679 l
 2484 1660 l 2473 1642 l 2463 1624 l 2452 1606 l 2442 1590 l
 2431 1574 l 2420 1559 l 2408 1543 l 2397 1528 l 2384 1513 l
 2371 1497 l 2357 1482 l 2343 1466 l 2328 1450 l 2313 1434 l
 2297 1418 l 2282 1402 l 2266 1387 l 2251 1372 l 2235 1357 l
 2220 1343 l 2206 1330 l 2192 1317 l 2178 1304 l 2165 1292 l
 2151 1279 l 2138 1267 l 2124 1254 l 2111 1241 l 2097 1227 l
 2083 1214 l 2069 1200 l 2056 1185 l 2043 1171 l 2030 1156 l
 2018 1142 l 2006 1127 l 1995 1113 l 1986 1099 l 1977 1085 l
 1969 1072 l 1961 1058 l 1955 1045 l 1948 1029 l 1942 1013 l
 1937 996 l 1933 978 l 1929 957 l 1926 935 l 1923 910 l
 1921 883 l 1919 856 l 1917 828 l 1916 803 l 1915 782 l

 1914 753 l gs col0 s gr gr

% arrowhead
0 slj
n 1949 888 m 1915 770 l 1889 890 l  col0 s
% Polyline
2 slj
gs  clippath
2177 808 m 2118 815 l 2137 965 l 2152 843 l 2196 958 l cp
eoclip
n 2076 3935 m 2076 3934 l 2076 3931 l 2076 3923 l 2076 3908 l 2076 3889 l
 2076 3865 l 2076 3839 l 2076 3812 l 2076 3786 l 2076 3762 l
 2076 3740 l 2077 3719 l 2077 3700 l 2077 3681 l 2077 3664 l
 2077 3646 l 2077 3628 l 2078 3609 l 2078 3590 l 2079 3570 l
 2080 3549 l 2081 3528 l 2082 3507 l 2084 3486 l 2086 3465 l
 2089 3444 l 2092 3425 l 2095 3406 l 2099 3388 l 2103 3372 l
 2108 3356 l 2113 3342 l 2120 3326 l 2128 3311 l 2137 3296 l
 2147 3281 l 2158 3267 l 2170 3253 l 2183 3239 l 2196 3225 l
 2210 3212 l 2225 3199 l 2239 3186 l 2253 3174 l 2267 3162 l
 2281 3150 l 2292 3141 l 2303 3131 l 2315 3120 l 2327 3109 l
 2340 3097 l 2353 3085 l 2367 3072 l 2380 3058 l 2394 3044 l
 2408 3029 l 2422 3014 l 2436 2999 l 2449 2984 l 2462 2968 l
 2475 2953 l 2488 2937 l 2500 2922 l 2512 2906 l 2522 2891 l
 2533 2876 l 2544 2860 l 2555 2843 l 2566 2826 l 2577 2807 l
 2589 2788 l 2600 2769 l 2611 2748 l 2622 2728 l 2633 2707 l
 2644 2686 l 2654 2665 l 2664 2644 l 2673 2624 l 2681 2603 l
 2690 2584 l 2697 2564 l 2704 2545 l 2711 2526 l 2717 2506 l
 2723 2487 l 2729 2467 l 2735 2446 l 2740 2425 l 2745 2404 l
 2750 2382 l 2755 2360 l 2759 2337 l 2763 2314 l 2766 2292 l
 2770 2269 l 2773 2247 l 2775 2225 l 2777 2204 l 2779 2183 l
 2781 2163 l 2782 2144 l 2783 2125 l 2784 2106 l 2785 2085 l
 2786 2064 l 2786 2043 l 2786 2021 l 2785 1999 l 2784 1977 l
 2783 1954 l 2782 1931 l 2780 1908 l 2777 1886 l 2775 1864 l
 2771 1842 l 2768 1821 l 2764 1801 l 2760 1781 l 2755 1762 l
 2750 1744 l 2745 1726 l 2739 1709 l 2733 1691 l 2726 1674 l
 2719 1656 l 2711 1638 l 2702 1620 l 2693 1601 l 2683 1583 l
 2673 1565 l 2662 1547 l 2651 1529 l 2640 1513 l 2629 1496 l
 2618 1481 l 2607 1466 l 2596 1452 l 2585 1438 l 2574 1425 l
 2561 1411 l 2549 1397 l 2535 1382 l 2521 1368 l 2507 1354 l
 2492 1339 l 2477 1325 l 2462 1311 l 2447 1297 l 2432 1284 l
 2417 1271 l 2403 1259 l 2390 1248 l 2377 1237 l 2364 1227 l
 2352 1217 l 2339 1206 l 2326 1195 l 2312 1184 l 2299 1173 l
 2286 1161 l 2273 1150 l 2261 1138 l 2249 1125 l 2238 1113 l
 2227 1101 l 2218 1089 l 2210 1077 l 2202 1065 l 2196 1053 l
 2190 1040 l 2185 1027 l 2180 1012 l 2175 995 l 2171 976 l
 2167 954 l 2163 930 l 2160 905 l 2156 881 l 2154 859 l

 2150 827 l gs col0 s gr gr

% arrowhead
0 slj
n 2196 958 m 2152 843 l 2137 965 l  col0 s
% Polyline
2 slj
gs  clippath
2511 863 m 2454 884 l 2507 1027 l 2494 904 l 2563 1006 l cp
eoclip
n 2353 3942 m 2353 3941 l 2353 3938 l 2354 3930 l 2354 3916 l 2355 3897 l
 2356 3874 l 2357 3849 l 2358 3823 l 2359 3799 l 2360 3776 l
 2361 3756 l 2362 3737 l 2362 3721 l 2363 3705 l 2363 3690 l
 2364 3676 l 2364 3661 l 2365 3645 l 2365 3629 l 2366 3612 l
 2367 3596 l 2368 3579 l 2370 3563 l 2372 3546 l 2374 3530 l
 2378 3515 l 2381 3500 l 2385 3486 l 2390 3472 l 2395 3459 l
 2401 3448 l 2407 3436 l 2414 3425 l 2421 3412 l 2430 3400 l
 2439 3387 l 2449 3373 l 2459 3360 l 2470 3346 l 2482 3332 l
 2493 3318 l 2505 3305 l 2516 3291 l 2528 3278 l 2539 3265 l
 2551 3251 l 2561 3239 l 2572 3226 l 2583 3213 l 2595 3199 l
 2606 3185 l 2618 3170 l 2631 3154 l 2643 3138 l 2656 3122 l
 2668 3105 l 2681 3088 l 2693 3071 l 2704 3054 l 2715 3038 l
 2726 3022 l 2736 3006 l 2746 2990 l 2755 2974 l 2764 2958 l
 2773 2942 l 2782 2925 l 2790 2908 l 2799 2890 l 2808 2871 l
 2816 2852 l 2825 2833 l 2833 2814 l 2841 2794 l 2849 2775 l
 2857 2756 l 2864 2737 l 2871 2719 l 2877 2702 l 2884 2685 l
 2890 2668 l 2896 2652 l 2902 2634 l 2909 2615 l 2915 2597 l
 2922 2577 l 2928 2558 l 2935 2538 l 2941 2517 l 2948 2497 l
 2954 2476 l 2959 2455 l 2964 2435 l 2969 2416 l 2974 2396 l
 2978 2378 l 2981 2359 l 2984 2341 l 2987 2325 l 2989 2308 l
 2991 2291 l 2993 2274 l 2994 2256 l 2995 2237 l 2997 2218 l
 2997 2198 l 2998 2178 l 2999 2159 l 2999 2139 l 2999 2119 l
 2999 2100 l 2999 2082 l 2999 2064 l 2999 2046 l 2998 2029 l
 2998 2012 l 2997 1993 l 2996 1974 l 2995 1954 l 2994 1934 l
 2993 1913 l 2991 1892 l 2990 1871 l 2987 1849 l 2985 1828 l
 2982 1807 l 2979 1787 l 2976 1767 l 2972 1749 l 2968 1731 l
 2963 1713 l 2959 1697 l 2953 1680 l 2947 1663 l 2941 1646 l
 2934 1629 l 2926 1612 l 2917 1594 l 2908 1576 l 2898 1558 l
 2888 1539 l 2877 1522 l 2866 1504 l 2855 1487 l 2843 1470 l
 2832 1454 l 2821 1438 l 2809 1422 l 2798 1408 l 2787 1393 l
 2776 1378 l 2764 1363 l 2752 1347 l 2739 1331 l 2726 1314 l
 2712 1297 l 2699 1280 l 2686 1263 l 2673 1246 l 2661 1230 l
 2649 1214 l 2637 1198 l 2627 1183 l 2617 1168 l 2607 1154 l
 2598 1140 l 2589 1125 l 2580 1109 l 2572 1093 l 2563 1077 l
 2555 1059 l 2546 1039 l 2537 1018 l 2528 995 l 2519 972 l
 2511 949 l 2503 929 l
 2488 888 l gs col0 s gr gr

% arrowhead
0 slj
n 2563 1006 m 2494 904 l 2507 1027 l  col0 s
/Times-Roman ff 180.00 scf sf
4346 3847 m
gs 1 -1 sc (z) col0 sh gr
/Times-Roman ff 180.00 scf sf
3696 477 m
gs 1 -1 sc (Normal pressure) col0 sh gr
/Times-Roman ff 180.00 scf sf
6556 437 m
gs 1 -1 sc (Tangential shear stress) col0 sh gr
/Times-Roman ff 180.00 scf sf
806 457 m
gs 1 -1 sc (Creeping flow) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage

%%EndDocument
 @endspecial 0 0 0 TeXcolorrgb 1258 1258 a Fb(\022)p
0 TeXcolorgray 0 0 0 TeXcolorrgb 263 1308 a(v)296 1316
y Fa(1)p 0 TeXcolorgray Black 0 TeXcolorgray Black eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
